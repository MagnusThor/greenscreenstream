/*! For license information please see webgl-bundle.js.LICENSE.txt */
(()=>{var e={7432:(e,t,n)=>{"use strict";const r=n(852);document.addEventListener("DOMContentLoaded",(()=>{let e={r:0,g:0,b:0},t=new r.GreenScreenStream(r.GreenScreenMethod.VirtualBackgroundUsingGreenScreen);navigator.getUserMedia({video:{width:800,height:450},audio:!1},(n=>{t.addVideoTrack(n.getVideoTracks()[0]),t.initialize("../assets/beach.jpg").then((n=>{const r=document.querySelector(".dominates");r.addEventListener("click",(()=>{t.setChromaKey(e.r,e.g,e.b)})),setInterval((()=>{let n=t.getColorsFromStream().dominant;const a=`rgb(${n[0]},${n[1]},${n[2]}`;r.style.background=a,e.r=n[0]/255,e.g=n[1]/255,e.b=n[2]/255}),2e3),t.start(),document.querySelector("video").srcObject=t.captureStream(25),r.addEventListener("click",(()=>{t.setChromaKey(e.r,e.g,e.b)}))}))}),(e=>console.error(e))),window._instance=t}))},7417:(e,t,n)=>{"use strict";n.r(t),n.d(t,{BodyPix:()=>Sa,PART_CHANNELS:()=>qa,blurBodyPart:()=>Xa,drawBokehEffect:()=>Ha,drawMask:()=>Ua,drawPixelatedMask:()=>Ga,flipPoseHorizontal:()=>ha,load:()=>_a,resizeAndPadTo:()=>la,scaleAndCropToInputTensorShape:()=>ca,toColoredPartMask:()=>La,toMask:()=>Ba,version:()=>ja});var r={};n.r(r),n.d(r,{json:()=>O});var a={};n.r(a),n.d(a,{json:()=>D});var s={};n.r(s),n.d(s,{json:()=>M});var o={};n.r(o),n.d(o,{json:()=>B});var i={};n.r(i),n.d(i,{json:()=>P});var u={};n.r(u),n.d(u,{json:()=>L});var l={};n.r(l),n.d(l,{json:()=>V});var c={};n.r(c),n.d(c,{json:()=>z});var d={};n.r(d),n.d(d,{json:()=>W});var p={};n.r(p),n.d(p,{json:()=>U});var h={};n.r(h),n.d(h,{json:()=>G});var f={};n.r(f),n.d(f,{json:()=>H});var m={};n.r(m),n.d(m,{json:()=>X});var g={};n.r(g),n.d(g,{json:()=>q});var y={};n.r(y),n.d(y,{json:()=>j});var b={};n.r(b),n.d(b,{json:()=>K});var x={};n.r(x),n.d(x,{json:()=>Y});var v={};n.r(v),n.d(v,{json:()=>Q});var k={};n.r(k),n.d(k,{json:()=>Z});var w,I,N=n(9972);!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(w||(w={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(I||(I={}));const T={};function S(e){return T[e]}function C(e,t,n,r,a){const s=t.inputParams[e];if(s&&void 0!==s.inputIndexStart){const e=s.inputIndexStart,o=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?e+1:s.inputIndexEnd;if("tensor"===s.type)return E(t.inputNames[s.inputIndexStart],n,r,a);if("tensors"===s.type)return t.inputNames.slice(e,o).map((e=>E(e,n,r,a)));const i=E(t.inputNames.slice(e)[0],n,r,a),u=i.dataSync();return"number"===s.type?u[0]:N.util.toNestedArray(i.shape,u)}const o=t.attrParams[e];return o&&o.value}function E(e,t,n,r){const[a,s]=A(e);if(null!=r){const e=r.getHashTableHandleByName(a);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[$(a,e)]));return void 0!==o?t[$(a,o)][s]:void 0}function _(e,t){const[n,r,a]=A(e);return[$(n,t&&t.currentContextId),r,a]}function $(e,t){return t?`${e}-${t}`:e}function A(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function R(e,t,n){let r=C("pad",e,t,n);if("explicit"===r){r=C("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=r[2*e],a[e][1]=r[2*e+1];return a}return r}function F(e){return e.kept?e:(0,N.clone)(e)}const O=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],D=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],M=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],B=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],P=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],L=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],V=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],z=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],W=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],U=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],G=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],H=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],X=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],q=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],j=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],K=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],Y=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Q=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],Z=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class J{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[r,a,s,o,i,u,l,c,d,p,h,f,m,g,y,b,x,v,k].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],a=[],s=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e)),{});let i=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const d=Object.keys(o);d.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,a]=_(e),s=o[r];if(null!=s.outputs){const e=s.outputs.indexOf(a);if(-1!==e){const a=`${r}:${e}`;t.inputNames[n]=a}}t.inputs.push(s),s.children.push(t)}))})),0===Object.keys(c).length?d.forEach((e=>{const t=o[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=_(e),n=o[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=_(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))})):i=r;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const h={nodes:o,inputs:i,outputs:u,weights:a,placeholders:r,signature:t,functions:p};return s.length>0&&(h.initNodes=s),h}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=S(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let a=void 0;switch(n.type){case"string":a=te(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=te(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=de(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=de(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=re(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=re(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=ce(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ce(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=ne(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ne(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=he(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=he(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=le(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=le(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=pe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=pe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=oe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=oe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=ie(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ie(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=se(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=se(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const a=[],s=[];e.signature.inputArg.forEach((e=>{const[t]=_(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:ae(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),r[t]=n})),Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[a,,s]=_(e),o=r[a];if(null!=o.outputs){const e=o.outputs.indexOf(s);if(-1!==e){const r=`${a}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=_(o[e.name]),a=r[t];null!=a&&(a.defaultOutput=n,s.push(a))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:a,outputs:s,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function ee(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=(0,N.env)().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function te(e,t,n,r=!1){const a=e[t];return null!=a?ee(a.s,r):n}function ne(e,t,n){const r=e[t];return r?r.b:n}function re(e,t,n){const r=e[t]||{},a=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof a?a:parseInt(a,10)}function ae(e){switch("string"==typeof e&&(e=w[e]),e){case w.DT_FLOAT:return"float32";case w.DT_INT32:case w.DT_INT64:case w.DT_INT8:case w.DT_UINT8:return"int32";case w.DT_BOOL:return"bool";case w.DT_DOUBLE:return"float32";case w.DT_STRING:return"string";default:return null}}function se(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function oe(e,t,n){const r=e[t];return r&&r.type?ae(r.type):n}function ie(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>ae(e))):n}function ue(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function le(e,t,n){const r=e[t];return r&&r.shape?ue(r.shape):n}function ce(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function de(e,t,n,r=!1){const a=e[t];return a&&a.list&&a.list.s?a.list.s.map((e=>ee(e,r))):n}function pe(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>ue(e))):n}function he(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class fe{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return E(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return E(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return re(this.node.rawAttrs,e,t);if(null!=n.s)return te(this.node.rawAttrs,e,t);if(null!=n.b)return ne(this.node.rawAttrs,e,t);if(null!=n.shape)return le(this.node.rawAttrs,e,t);if(null!=n.type)return oe(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return ce(this.node.rawAttrs,e,t);if(null!=n.list.s)return de(this.node.rawAttrs,e,t);if(null!=n.list.shape)return pe(this.node.rawAttrs,e,t);if(null!=n.list.b)return he(this.node.rawAttrs,e,t);if(null!=n.list.type)return ie(this.node.rawAttrs,e,t)}return t}}var me=n(6407),ge=n(3135),ye=n(5228),be=n(4841),xe=n(1274),ve=n(9322),ke=n(9165),we=n(827),Ie=n(4513),Ne=n(632),Te=n(3453),Se=n(5265),Ce=n(6235),Ee=n(7839),_e=n(1470),$e=n(2421),Ae=n(1891),Re=n(7037),Fe=n(9812),Oe=n(369),De=n(6825),Me=n(1661),Be=n(173),Pe=n(2699),Le=n(3233),Ve=n(4650),ze=n(4842),We=n(3426),Ue=n(6943),Ge=n(2597),He=n(7474),Xe=n(4386),qe=n(7370),je=n(9036),Ke=n(766),Ye=n(7409),Qe=n(7809),Ze=n(5503),Je=n(625),et=n(9331),tt=n(4434),nt=n(3254),rt=n(3694),at=n(3261),st=n(248),ot=n(1869),it=n(1173),ut=n(2279),lt=n(3582),ct=n(2634),dt=n(9451),pt=n(9133),ht=n(8151),ft=n(6230);function mt(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){N.util.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const a=e[r],s=t[r];N.util.assert(a<0||s<0||a===s,(()=>n+` Shapes ${e} and ${t} must match`))}}}function gt(e){return"number"!=typeof e&&!e.some((e=>e<0))}function yt(e,t,n){let r=bt(e,n);const a=!gt(r);if(a&&0===t.length)throw new Error("Tried to calculate elements of an empty list with non-fully-defined elementShape: "+r);if(a&&t.forEach((e=>{r=bt(e.shape,r)})),!gt(r))throw new Error("Non-fully-defined elementShape: "+r);return r}function bt(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const a=e[r],s=t[r];if(a>=0&&s>=0&&a!==s)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=a>=0?a:s}return n}class xt{constructor(e,t,n,r,a,s,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=a,this.dynamicSize=s,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=(0,N.scalar)(0),(0,N.keep)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),mt(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,(0,N.keep)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return(0,N.tensor)([],[0].concat(this.elementShape));const n=this.readMany(e);return mt(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),(0,N.stack)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return(0,N.tensor)([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return mt(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),(0,N.concat)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,(0,N.unstack)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:t.size/n,s=[];(0,N.tidy)((()=>{t=(0,N.reshape)(t,[1,n,a]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],a];s[n]=(0,N.reshape)((0,N.slice)(t,o,i),this.elementShape)}return s}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,s)}}class vt{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);mt(t,e.shape,"TensorList shape mismatch: "),(0,N.keep)(e)})),this.idTensor=(0,N.scalar)(0),this.maxNumElements=r,(0,N.keep)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new vt([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);mt(e,this.elementShape,"TensorList shape mismatch: ");const r=yt(this.elementShape,this.tensors,e);return(0,N.tidy)((()=>{const e=this.tensors.map((e=>(0,N.reshape)(e,r)));return(0,N.stack)(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=yt(this.elementShape,this.tensors,e),r=this.tensors.pop();return mt(r.shape,e,"TensorList shape mismatch: "),(0,N.reshape)(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(mt(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,N.keep)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+e);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);mt(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=yt(this.elementShape,this.tensors,t);return(0,N.reshape)(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);mt(this.elementShape,t.shape,"TensorList shape mismatch: "),(0,N.keep)(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);mt(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=yt(this.elementShape,this.tensors,n);return 0===e.length?(0,N.tensor)([],[0].concat(r)):(0,N.tidy)((()=>{const t=e.map((e=>(0,N.reshape)(this.tensors[e],r)));return(0,N.stack)(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);mt(this.elementShape,t,"TensorList shape mismatch: ");const n=yt(this.elementShape,this.tensors,t);return 0===this.size()?(0,N.tensor)([],[0].concat(n)):(0,N.tidy)((()=>{const e=this.tensors.map((e=>(0,N.reshape)(e,n)));return(0,N.concat)(e,0)}))}}var kt=n(1355),wt=n(4794),It=n(2277),Nt=n(1405),Tt=n(4718),St=n(473),Ct=n(5176),Et=n(1174),_t=n(6877),$t=n(1749),At=n(5020),Rt=n(557);function Ft(e,t,n){const[r,a]=C("fusedOps",e,t,n),s="biasadd"===r,o=!s,i="prelu"===a,u="fusedbatchnorm"===r,l=C("numArgs",e,t,n);if(s){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&s&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=C("strides",e,t,n),d=R(e,t,n),p=C("dataFormat",e,t,n).toUpperCase(),h=C("dilations",e,t,n);let[f,m]=C("args",e,t,n);return o&&(m=f,f=void 0),{stride:c,pad:d,dataFormat:p,dilations:h,biasArg:f,preluArg:m,activationFunc:a,leakyreluAlpha:C("leakyreluAlpha",e,t,n)}}var Ot=n(4006),Dt=n(4135),Mt=n(686),Bt=n(6708),Pt=n(4917),Lt=n(7846),Vt=n(5002),zt=n(7245),Wt=n(3596),Ut=n(9640),Gt=n(6577),Ht=n(6321),Xt=n(2271),qt=n(6380),jt=n(6567);function Kt(e,t,n){return{boxes:C("boxes",e,t,n),scores:C("scores",e,t,n),maxOutputSize:C("maxOutputSize",e,t,n),iouThreshold:C("iouThreshold",e,t,n),scoreThreshold:C("scoreThreshold",e,t,n),softNmsSigma:C("softNmsSigma",e,t,n)}}var Yt=n(3243),Qt=n(9608),Zt=n(6092),Jt=n(9494);class en{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=(0,N.scalar)(0),this.tensorMap=new Map,(0,N.keep)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Jt.i(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),(0,N.tidy)((()=>{const e=(0,N.unstack)(t),r=n.length,a=e.length;N.util.assert(r===a,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${a} elements.`));for(let t=0;t<r;t++){const r=n[t],a=e[t];(0,N.keep)(a),this.tensorMap.set(r,a)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return(0,N.tidy)((()=>{const e=[];for(let r=0;r<n.length;r++){const a=n[r],s=this.findWithDefault(a,t);e.push(s)}return(0,N.stack)(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got `+e.dtype);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got `+t.dtype)}}var tn=n(6477),nn=n(6500),rn=n(636),an=n(7630),sn=n(6573),on=n(624),un=n(2856),ln=n(8651),cn=n(5750),dn=n(5912),pn=n(8687),hn=n(4653),fn=n(9065),mn=n(7505),gn=n(9648),yn=n(682),bn=n(1510),xn=n(9758),vn=n(3307),kn=n(5130),wn=n(5735),In=n(5475),Nn=n(781),Tn=n(2998),Sn=n(47),Cn=n(7394),En=n(7405),_n=n(3865),$n=n(5746),An=n(6884),Rn=n(4926),Fn=n(7486),On=n(2676),Dn=n(5158),Mn=n(9590),Bn=n(4968),Pn=n(2991),Ln=n(4136),Vn=n(7501),zn=n(8644),Wn=n(3100),Un=n(7494),Gn=n(7020),Hn=n(8447),Xn=n(3710),qn=n(4415),jn=n(1300),Kn=n(1483),Yn=n(9682),Qn=n(7918),Zn=n(8441),Jn=n(9112),er=n(8247);function tr(e,t,n,r){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[me.I(C("a",e,t,n),C("b",e,t,n))];case"AddN":return[ge.Q(C("tensors",e,t,n))];case"FloorMod":case"Mod":return[ye.w(C("a",e,t,n),C("b",e,t,n))];case"Mul":return[be.d(C("a",e,t,n),C("b",e,t,n))];case"RealDiv":case"Div":return[xe.h(C("a",e,t,n),C("b",e,t,n))];case"DivNoNan":return[ve.N(C("a",e,t,n),C("b",e,t,n))];case"FloorDiv":return[ke.q(C("a",e,t,n),C("b",e,t,n))];case"Sub":return[we.l(C("a",e,t,n),C("b",e,t,n))];case"Minimum":return[Ie.L(C("a",e,t,n),C("b",e,t,n))];case"Maximum":return[Ne.g(C("a",e,t,n),C("b",e,t,n))];case"Pow":return[Te.s(C("a",e,t,n),C("b",e,t,n))];case"SquaredDifference":return[Se.$(C("a",e,t,n),C("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[Ce.W(C("x",e,t,n))];case"Acos":return[Ee.K(C("x",e,t,n))];case"Acosh":return[_e._(C("x",e,t,n))];case"Asin":return[$e.Z(C("x",e,t,n))];case"Asinh":return[Ae.V(C("x",e,t,n))];case"Atan":return[Re.z(C("x",e,t,n))];case"Atan2":return[Fe.f(C("x",e,t,n),C("y",e,t,n))];case"Atanh":return[Oe.C(C("x",e,t,n))];case"Ceil":return[De.m(C("x",e,t,n))];case"Complex":return[Me.P(C("real",e,t,n),C("imag",e,t,n))];case"Cos":return[Be.m(C("x",e,t,n))];case"Cosh":return[Pe.f(C("x",e,t,n))];case"Elu":return[Le.p(C("x",e,t,n))];case"Erf":return[Ve.q(C("x",e,t,n))];case"Exp":return[ze.Q(C("x",e,t,n))];case"Expm1":return[We.t(C("x",e,t,n))];case"Floor":return[Ue.G(C("x",e,t,n))];case"Log":return[Ge.c(C("x",e,t,n))];case"Log1p":return[He.K(C("x",e,t,n))];case"Imag":return[Xe.a(C("x",e,t,n))];case"Neg":return[qe.W(C("x",e,t,n))];case"Reciprocal":return[je.M(C("x",e,t,n))];case"Real":return[Ke.k(C("x",e,t,n))];case"Relu":return[Ye.U(C("x",e,t,n))];case"Round":return[Qe.N(C("x",e,t,n))];case"Selu":return[Ze.U(C("x",e,t,n))];case"Sigmoid":return[Je.X(C("x",e,t,n))];case"Sin":return[et.O(C("x",e,t,n))];case"Sign":return[tt.X(C("x",e,t,n))];case"Sinh":return[nt.R(C("x",e,t,n))];case"Softplus":return[rt.W(C("x",e,t,n))];case"Sqrt":return[at._(C("x",e,t,n))];case"Square":return[st.h(C("x",e,t,n))];case"Tanh":return[ot.A(C("x",e,t,n))];case"Tan":return[it.O(C("x",e,t,n))];case"ClipByValue":return[ut.i(C("x",e,t,n),C("clipValueMin",e,t,n),C("clipValueMax",e,t,n))];case"Relu6":return[lt.b(C("x",e,t,n))];case"Rsqrt":return[ct.b(E(e.inputNames[0],t,n))];case"Prod":return[dt.W(C("x",e,t,n),C("axes",e,t,n))];case"LeakyRelu":return[pt.h(C("x",e,t,n),C("alpha",e,t,n))];case"Prelu":return[ht.A(C("x",e,t,n),C("alpha",e,t,n))];case"IsNan":return[ft.i(E(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=C("thenBranch",e,t,n),a=C("elseBranch",e,t,n),s=C("cond",e,t,n),o=C("args",e,t,n);return(await s.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=C("body",e,t,n),a=C("cond",e,t,n),s=C("args",e,t,n),o=await n.functionMap[a].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),i=s.map((e=>e.id));let u=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let l=s;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const s=await n.functionMap[a].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await s[0].data(),s.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[F(C("pred",e,t,n))];case"Switch":{const r=C("pred",e,t,n);let a=C("data",e,t,n);return a.kept||(a=F(a)),(await r.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==E(e,t,n)));return r?[F(E(r,t,n))]:void 0}case"Enter":{const r=C("frameName",e,t,n),a=C("tensor",e,t,n);return n.enterFrame(r),[F(a)]}case"Exit":{const r=C("tensor",e,t,n);return n.exitFrame(),[F(r)]}case"NextIteration":{const r=C("tensor",e,t,n);return n.nextIteration(),[F(r)]}case"TensorArrayV3":{const r=C("size",e,t,n),a=C("dtype",e,t,n),s=C("elementShape",e,t,n),o=C("dynamicSize",e,t,n),i=C("clearAfterRead",e,t,n),u=C("identicalElementShapes",e,t,n),l=C("name",e,t,n),c=new xt(l,a,r,s,u,o,i);return n.addTensorArray(c),[c.idTensor,(0,N.scalar)(1)]}case"TensorArrayWriteV3":{const r=C("tensorArrayId",e,t,n),a=C("index",e,t,n),s=C("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(a,s),[o.idTensor]}case"TensorArrayReadV3":{const r=C("tensorArrayId",e,t,n),a=C("index",e,t,n);return[n.getTensorArray(r.id).read(a)]}case"TensorArrayGatherV3":{const r=C("tensorArrayId",e,t,n),a=C("indices",e,t,n),s=C("dtype",e,t,n);return[n.getTensorArray(r.id).gather(a,s)]}case"TensorArrayScatterV3":{const r=C("tensorArrayId",e,t,n),a=C("indices",e,t,n),s=C("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(a,s),[o.idTensor]}case"TensorArrayConcatV3":{const r=C("tensorArrayId",e,t,n),a=n.getTensorArray(r.id),s=C("dtype",e,t,n);return[a.concat(s)]}case"TensorArraySplitV3":{const r=C("tensorArrayId",e,t,n),a=C("tensor",e,t,n),s=C("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(s,a),[o.idTensor]}case"TensorArraySizeV3":{const r=C("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return[(0,N.scalar)(a.size(),"int32")]}case"TensorArrayCloseV3":{const r=C("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const r=C("tensorListId",e,t,n),a=C("index",e,t,n),s=C("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(a,s),[o.idTensor]}case"TensorListGetItem":{const r=C("tensorListId",e,t,n),a=C("index",e,t,n),s=C("elementShape",e,t,n),o=C("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(a,s,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=C("indices",e,t,n),a=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const a=Math.max(...t);if(null!=r&&-1!==r&&a>=r)throw new Error(`Max index must be < array size (${a}  vs. ${r})`);const s=new vt([],n,e.dtype,r),o=(0,N.unstack)(e,0);return t.forEach(((e,t)=>{s.setItem(e,o[t])})),s}(C("tensor",e,t,n),r,C("elementShape",e,t,n),C("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=C("elementShape",e,t,n),a=C("elementDType",e,t,n);let s;s="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=function(e,t,n){return new vt([],e,t,n)}(r,a,C(s,e,t,n));return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const r=C("tensorListId",e,t,n),a=C("indices",e,t,n),s=C("elementShape",e,t,n),o=C("elementDType",e,t,n);return[n.getTensorList(r.id).gather(a,o,s)]}case"TensorListStack":{const r=C("tensorListId",e,t,n),a=C("elementShape",e,t,n),s=C("elementDType",e,t,n),o=C("numElements",e,t,n);return[n.getTensorList(r.id).stack(a,s,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+e.shape);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);mt(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=(0,N.unstack)(e);return new vt(a,t,r)}(C("tensor",e,t,n),C("elementShape",e,t,n),C("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=C("tensorListId",e,t,n),a=n.getTensorList(r.id),s=C("dtype",e,t,n),o=C("elementShape",e,t,n);return[a.concat(s,o)]}case"TensorListPushBack":{const r=C("tensorListId",e,t,n),a=C("tensor",e,t,n),s=n.getTensorList(r.id);return s.pushBack(a),[s.idTensor]}case"TensorListPopBack":{const r=C("tensorListId",e,t,n),a=C("elementShape",e,t,n),s=C("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(a,s)]}case"TensorListSplit":{const r=C("tensor",e,t,n),a=C("elementShape",e,t,n),s=function(e,t,n){let r=0;const a=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const s=bt(e.shape.slice(1),n),o=0===r?0:e.size/r,i=(0,N.tidy)((()=>{const n=[];e=(0,N.reshape)(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:a[r-1],0],u=[1,t[r],o];n[r]=(0,N.reshape)((0,N.slice)(e,i,u),s)}return e.dispose(),n})),u=new vt([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)u.setItem(e,i[e]);return u}(r,C("lengths",e,t,n),a);return n.addTensorList(s),[s.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const r=C("stride",e,t,n),a=C("pad",e,t,n),s=C("dataFormat",e,t,n).toUpperCase(),o=C("dilation",e,t,n);return[kt.P(C("x",e,t,n),C("filter",e,t,n),r,a,s,o)]}case"Conv2D":{const r=C("strides",e,t,n),a=R(e,t,n),s=C("dataFormat",e,t,n).toUpperCase(),o=C("dilations",e,t,n);return[wt.T(C("x",e,t,n),C("filter",e,t,n),[r[1],r[2]],a,s,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:r,pad:a,dataFormat:s,dilations:o,biasArg:i,preluArg:u,activationFunc:l,leakyreluAlpha:c}=Ft(e,t,n);return[It.conv2d({x:C("x",e,t,n),filter:C("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:s,dilations:[o[1],o[2]],bias:i,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:a,dataFormat:s,dilations:o,biasArg:i,preluArg:u,activationFunc:l,leakyreluAlpha:c}=Ft(e,t,n);return[It.depthwiseConv2d({x:C("x",e,t,n),filter:C("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:s,dilations:[o[1],o[2]],bias:i,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=C("outputShape",e,t,n),a=C("strides",e,t,n),s=R(e,t,n);return[Nt.b(C("x",e,t,n),C("filter",e,t,n),r,[a[1],a[2]],s)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=C("strides",e,t,n),a=R(e,t,n),s=C("dilations",e,t,n),o=C("dataFormat",e,t,n).toUpperCase();return[Tt.B(C("input",e,t,n),C("filter",e,t,n),[r[1],r[2]],a,o,[s[1],s[2]])]}case"Conv3D":{const r=C("strides",e,t,n),a=C("pad",e,t,n),s=C("dataFormat",e,t,n).toUpperCase(),o=C("dilations",e,t,n);return[St.p(C("x",e,t,n),C("filter",e,t,n),[r[1],r[2],r[3]],a,s,[o[1],o[2],o[3]])]}case"AvgPool":{const r=C("strides",e,t,n),a=C("pad",e,t,n),s=C("kernelSize",e,t,n);return[Ct.w(C("x",e,t,n),[s[1],s[2]],[r[1],r[2]],a)]}case"MaxPool":{const r=C("strides",e,t,n),a=C("pad",e,t,n),s=C("kernelSize",e,t,n);return[Et._(C("x",e,t,n),[s[1],s[2]],[r[1],r[2]],a)]}case"MaxPoolWithArgmax":{const r=C("strides",e,t,n),a=C("pad",e,t,n),s=C("kernelSize",e,t,n),o=C("includeBatchInIndex",e,t,n),{result:i,indexes:u}=_t.I(C("x",e,t,n),[s[1],s[2]],[r[1],r[2]],a,o);return[i,u]}case"AvgPool3D":{const r=C("strides",e,t,n),a=C("pad",e,t,n),s=C("kernelSize",e,t,n);return[$t.u(C("x",e,t,n),[s[1],s[2],s[3]],[r[1],r[2],r[3]],a)]}case"MaxPool3D":{const r=C("strides",e,t,n),a=C("pad",e,t,n),s=C("kernelSize",e,t,n);return[At.Y(C("x",e,t,n),[s[1],s[2],s[3]],[r[1],r[2],r[3]],a)]}case"Dilation2D":{const r=C("strides",e,t,n),a=C("pad",e,t,n),s=C("dilations",e,t,n),o=r[1],i=r[2],u=s[1],l=s[2];return[Rt.W(C("x",e,t,n),C("filter",e,t,n),[o,i],a,[u,l],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"Fill":{const r=C("shape",e,t,n),a=C("dtype",e,t,n),s=C("value",e,t,n);return[Ot.h(r,s,a)]}case"LinSpace":{const r=C("start",e,t,n),a=C("stop",e,t,n),s=C("num",e,t,n);return[Dt.S(r,a,s)]}case"Multinomial":{const r=C("logits",e,t,n),a=C("numSamples",e,t,n),s=C("seed",e,t,n);return[Mt.S(r,a,s)]}case"OneHot":{const r=C("indices",e,t,n),a=C("depth",e,t,n),s=C("onValue",e,t,n),o=C("offValue",e,t,n);return[Bt.l(r,a,s,o)]}case"Ones":return[Pt.i(C("shape",e,t,n),C("dtype",e,t,n))];case"OnesLike":return[Lt.J(C("x",e,t,n))];case"RandomUniform":return[Vt.L(C("shape",e,t,n),C("minval",e,t,n),C("maxval",e,t,n),C("dtype",e,t,n))];case"Range":{const r=C("start",e,t,n),a=C("stop",e,t,n),s=C("step",e,t,n);return[zt.w(r,a,s,C("dtype",e,t,n))]}case"TruncatedNormal":{const r=C("shape",e,t,n),a=C("mean",e,t,n),s=C("stdDev",e,t,n),o=C("seed",e,t,n);return[Wt.X(r,a,s,C("dtype",e,t,n),o)]}case"Zeros":return[Ut.l(C("shape",e,t,n),C("dtype",e,t,n))];case"ZerosLike":return[Gt.P(C("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:s,iouThreshold:o,scoreThreshold:i,softNmsSigma:u}=Kt(e,t,n),l=await Ht.BHj.nonMaxSuppressionWithScoreAsync(r,a,s,o,i,u);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:s,iouThreshold:o,scoreThreshold:i}=Kt(e,t,n),u=C("padToMaxOutputSize",e,t,n),l=await Ht.BHj.nonMaxSuppressionPaddedAsync(r,a,s,o,i,u);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:s,iouThreshold:o,scoreThreshold:i}=Kt(e,t,n);return[await Ht.BHj.nonMaxSuppressionAsync(r,a,s,o,i)]}case"Where":{const r=Xt.p(C("condition",e,t,n),"bool"),a=[await qt.i(r)];return r.dispose(),a}case"ListDiff":return jt.O(C("x",e,t,n),C("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const r=C("x",e,t,n),a=C("k",e,t,n),s=C("sorted",e,t,n),o=Yt.h(r,a,s);return[o.values,o.indices]}case"Unique":{const r=C("x",e,t,n),a=Qt.T(r);return[a.values,a.indices]}case"UniqueV2":{const r=C("x",e,t,n),a=C("axis",e,t,n),s=Qt.T(r,a);return[s.values,s.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const r=C("images",e,t,n),a=C("size",e,t,n),s=C("alignCorners",e,t,n),o=C("halfPixelCenters",e,t,n);return[Ht.BHj.resizeBilinear(r,[a[0],a[1]],s,o)]}case"ResizeNearestNeighbor":{const r=C("images",e,t,n),a=C("size",e,t,n),s=C("alignCorners",e,t,n),o=C("halfPixelCenters",e,t,n);return[Ht.BHj.resizeNearestNeighbor(r,[a[0],a[1]],s,o)]}case"CropAndResize":{const r=C("image",e,t,n),a=C("boxes",e,t,n),s=C("boxInd",e,t,n),o=C("cropSize",e,t,n),i=C("method",e,t,n),u=C("extrapolationValue",e,t,n);return[Ht.BHj.cropAndResize(r,a,s,o,i,u)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=C("default",e,t,n);return[E(e.name,t,n)||r];case"Placeholder":return[E(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[F(C("x",e,t,n))];case"IdentityN":return C("x",e,t,n).map((e=>F(e)));case"Snapshot":return[F(C("x",e,t,n))];case"Shape":return[Zt.R(C("x",e,t,n).shape,"int32")];case"ShapeN":return C("x",e,t,n).map((e=>Zt.R(e.shape)));case"Size":return[Jt.i(C("x",e,t,n).size,"int32")];case"Rank":return[Jt.i(C("x",e,t,n).rank,"int32")];case"NoOp":return[Jt.i(1)];case"Print":const a=C("x",e,t,n),s=C("data",e,t,n),o=C("message",e,t,n),i=C("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<s.length;e++)console.log(Array.prototype.slice.call(s[e].dataSync()).slice(0,i));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"Equal":return[tn.D(C("a",e,t,n),C("b",e,t,n))];case"NotEqual":return[nn.Q(C("a",e,t,n),C("b",e,t,n))];case"Greater":return[rn.p(C("a",e,t,n),C("b",e,t,n))];case"GreaterEqual":return[an.b(C("a",e,t,n),C("b",e,t,n))];case"Less":return[sn.d(C("a",e,t,n),C("b",e,t,n))];case"LessEqual":return[on.z(C("a",e,t,n),C("b",e,t,n))];case"LogicalAnd":return[un.H(C("a",e,t,n),C("b",e,t,n))];case"LogicalNot":return[ln.h(C("a",e,t,n))];case"LogicalOr":return[cn.K(C("a",e,t,n),C("b",e,t,n))];case"Select":case"SelectV2":return[dn.a(C("condition",e,t,n),C("a",e,t,n),C("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[pn.O(C("a",e,t,n),C("b",e,t,n),C("transposeA",e,t,n),C("transposeB",e,t,n))];case"Einsum":return[hn.W(C("equation",e,t,n),...C("tensors",e,t,n))];case"Transpose":return[fn.p(C("x",e,t,n),C("perm",e,t,n))];case"_FusedMatMul":const[r,a]=C("fusedOps",e,t,n),s="biasadd"===r,o="prelu"===a,i=C("numArgs",e,t,n),u=C("leakyreluAlpha",e,t,n);if(s){if(o&&2!==i)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==i)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,c]=C("args",e,t,n);return[It.matMul({a:C("a",e,t,n),b:C("b",e,t,n),transposeA:C("transposeA",e,t,n),transposeB:C("transposeB",e,t,n),bias:l,activation:a,preluActivationWeights:c,leakyreluAlpha:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[mn.t(C("x",e,t,n),C("mean",e,t,n),C("variance",e,t,n),C("offset",e,t,n),C("scale",e,t,n),C("epsilon",e,t,n))];case"LRN":return[gn.G(C("x",e,t,n),C("radius",e,t,n),C("bias",e,t,n),C("alpha",e,t,n),C("beta",e,t,n))];case"Softmax":return[yn.X(C("x",e,t,n))];case"LogSoftmax":return[bn.C(C("x",e,t,n))];case"SparseToDense":return[xn.e(C("sparseIndices",e,t,n),C("outputShape",e,t,n),C("sparseValues",e,t,n),C("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"Max":{const r=C("axis",e,t,n),a=C("keepDims",e,t,n);return[vn.F(C("x",e,t,n),r,a)]}case"Mean":{const r=C("axis",e,t,n),a=C("keepDims",e,t,n);return[kn.J(C("x",e,t,n),r,a)]}case"Min":{const r=C("axis",e,t,n),a=C("keepDims",e,t,n);return[wn.V(C("x",e,t,n),r,a)]}case"Sum":{const r=C("axis",e,t,n),a=C("keepDims",e,t,n);return[In.S(C("x",e,t,n),r,a)]}case"All":{const r=C("axis",e,t,n),a=C("keepDims",e,t,n);return[Nn.$(C("x",e,t,n),r,a)]}case"Any":{const r=C("axis",e,t,n),a=C("keepDims",e,t,n);return[Tn.Y(C("x",e,t,n),r,a)]}case"ArgMax":{const r=C("axis",e,t,n);return[Sn.N(C("x",e,t,n),r)]}case"ArgMin":{const r=C("axis",e,t,n);return[Cn.v(C("x",e,t,n),r)]}case"Prod":{const r=C("axis",e,t,n),a=C("keepDims",e,t,n);return[dt.W(C("x",e,t,n),r,a)]}case"Cumsum":{const r=C("axis",e,t,n),a=C("exclusive",e,t,n),s=C("reverse",e,t,n);return[En.z(C("x",e,t,n),r,a,s)]}case"Bincount":const r=C("x",e,t,n),a=C("weights",e,t,n),s=C("size",e,t,n);return[_n.y(r,a,s)];case"DenseBincount":{const r=C("x",e,t,n),a=C("weights",e,t,n),s=C("size",e,t,n),o=C("binaryOutput",e,t,n);return[$n.p(r,a,s,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=C("n",e,t,n),a=C("axis",e,t,n);let s=C("tensors",e,t,n);return s=s.slice(0,r),[An.z(s,a)]}case"Gather":{const r=C("x",e,t,n),a=C("indices",e,t,n);return[Rn.I(r,Xt.p(a,"int32"),0)]}case"GatherV2":{const r=C("axis",e,t,n),a=C("batchDims",e,t,n),s=C("x",e,t,n),o=C("indices",e,t,n);return[Rn.I(s,Xt.p(o,"int32"),r,a)]}case"Reverse":{const r=C("dims",e,t,n),a=[];for(let e=0;e<r.length;e++)r[e]&&a.push(e);const s=C("x",e,t,n);return[Fn.G(s,a)]}case"ReverseV2":{const r=C("axis",e,t,n),a=C("x",e,t,n);return[Fn.G(a,r)]}case"Slice":{const r=C("begin",e,t,n),a=C("size",e,t,n);return[On.t(C("x",e,t,n),r,a)]}case"StridedSlice":{const r=C("begin",e,t,n),a=C("end",e,t,n),s=C("strides",e,t,n),o=C("beginMask",e,t,n),i=C("endMask",e,t,n),u=C("ellipsisMask",e,t,n),l=C("newAxisMask",e,t,n),c=C("shrinkAxisMask",e,t,n),d=C("x",e,t,n);return[Dn.N(d,r,a,s,o,i,u,l,c)]}case"Pack":return(0,N.tidy)((()=>{const r=C("axis",e,t,n),a=C("tensors",e,t,n),s=a[0].shape,o=Mn.L(a[0]).shape,i=a.map((e=>{const t=N.util.arraysEqual(e.shape,s);if(!t&&!N.util.arraysEqual(Mn.L(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:Bn.X(e,s)}));return[Pn.k(i,r)]}));case"Unpack":{const r=C("axis",e,t,n),a=C("tensor",e,t,n);return Ln.H(a,r)}case"Tile":{const r=C("reps",e,t,n);return[Vn.G(C("x",e,t,n),r)]}case"Split":case"SplitV":{const r=C("axis",e,t,n),a=C("numOrSizeSplits",e,t,n),s=C("x",e,t,n);return zn.V(s,a,r)}case"ScatterNd":{const r=C("indices",e,t,n),a=C("values",e,t,n),s=C("shape",e,t,n);return[Wn.s(r,a,s)]}case"GatherNd":{const r=C("x",e,t,n),a=C("indices",e,t,n);return[Un.d(r,a)]}case"SparseToDense":{const r=C("sparseIndices",e,t,n),a=C("outputShape",e,t,n),s=C("sparseValues",e,t,n),o=C("defaultValue",e,t,n);return[xn.e(r,s,a,s.dtype===o.dtype?o:Xt.p(o,s.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:a,emptyRowIndicator:s,reverseIndexMap:o}=Ht.rVs.sparseFillEmptyRows(C("indices",e,t,n),C("values",e,t,n),C("denseShape",e,t,n),C("defaultValue",e,t,n));return[r,a,s,o]}case"SparseReshape":{const{outputIndices:r,outputShape:a}=Ht.rVs.sparseReshape(C("inputIndices",e,t,n),C("inputShape",e,t,n),C("newShape",e,t,n));return[r,a]}case"SparseSegmentMean":return[Ht.rVs.sparseSegmentMean(C("data",e,t,n),C("indices",e,t,n),C("segmentIds",e,t,n))];case"SparseSegmentSum":return[Ht.rVs.sparseSegmentSum(C("data",e,t,n),C("indices",e,t,n),C("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"FFT":return[Gn.k(C("x",e,t,n))];case"IFFT":return[Hn.S(C("x",e,t,n))];case"RFFT":return[Xn.Q(C("x",e,t,n))];case"IRFFT":return[qn.w(C("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"StringNGrams":{const{nGrams:r,nGramsSplits:a}=Ht.Z_8.stringNGrams(C("data",e,t,n),C("dataSplits",e,t,n),C("separator",e,t,n),C("nGramWidths",e,t,n),C("leftPad",e,t,n),C("rightPad",e,t,n),C("padWidth",e,t,n),C("preserveShortSequences",e,t,n));return[r,a]}case"StringSplit":{const{indices:r,values:a,shape:s}=Ht.Z_8.stringSplit(C("input",e,t,n),C("delimiter",e,t,n),C("skipEmpty",e,t,n));return[r,a,s]}case"StringToHashBucketFast":return[Ht.Z_8.stringToHashBucketFast(C("input",e,t,n),C("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return N.tidy((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Xt.p(C("x",e,t,n),C("dtype",e,t,n))];case"ExpandDims":{const r=C("axis",e,t,n);return[jn.d(C("x",e,t,n),r)]}case"Squeeze":{const r=C("axis",e,t,n);return[Mn.L(C("x",e,t,n),r)]}case"Reshape":return[Bn.X(C("x",e,t,n),C("shape",e,t,n))];case"MirrorPad":return[Kn.V(C("x",e,t,n),C("padding",e,t,n),C("mode",e,t,n))];case"PadV2":case"Pad":return[Yn.v(C("x",e,t,n),C("padding",e,t,n),C("constantValue",e,t,n))];case"SpaceToBatchND":{const r=C("blockShape",e,t,n),a=C("paddings",e,t,n);return[Qn.f(C("x",e,t,n),r,a)]}case"BatchToSpaceND":{const r=C("blockShape",e,t,n),a=C("crops",e,t,n);return[Zn.E(C("x",e,t,n),r,a)]}case"DepthToSpace":{const r=C("blockSize",e,t,n),a=C("dataFormat",e,t,n).toUpperCase();return[Jn.n(C("x",e,t,n),r,a)]}case"BroadcastTo":return[er.U(C("x",e,t,n),C("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=C("keyDType",e,t,n),s=C("valueDType",e,t,n),o=new en(a,s);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=C("tableHandle",e,t,n,r),s=C("keys",e,t,n),o=C("values",e,t,n),i=r.getHashTableById(a.id);return[await i.import(s,o)]}case"LookupTableFind":case"LookupTableFindV2":{const a=C("tableHandle",e,t,n,r),s=C("keys",e,t,n),o=C("defaultValue",e,t,n),i=r.getHashTableById(a.id);return[await i.find(s,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=C("tableHandle",e,t,n,r);return[r.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=S(e.op);if(a&&a.customExecutor)return a.customExecutor(new fe(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return N.util.isPromise(a)?a.then((e=>[].concat(e))):[].concat(a)}class nr{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function rr(e,t,n,r){const a=new Set,s=[];let o=null,i=null;const u=new Set,l=Object.keys(e).map((e=>A(e)[0]));let c=[];null!=r&&(c=r.map((e=>A(e.name)[0])));const d=[...t];for(;d.length>0;){const e=d.pop();(ir(e)||ur(e)||lr(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>a.has(e)))),a.add(e.name),null==n[e.name]&&-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),d.push(e))})):s.push(e.name))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:s,dynamicNode:o,syncInputs:i}}const ar=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],sr=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],or=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function ir(e){return ar.indexOf(e.op)>=0}function ur(e){return sr.indexOf(e.op)>=0}function lr(e){return or.indexOf(e.op)>=0}class cr{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new cr(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=rr(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:a,syncInputs:s}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`);if(r.length>0){const n=t.map((e=>e.name)),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:a}=n,s=[],o=Object.keys(a).map((e=>A(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&s.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&s.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&s.push(e)}));const u=new Set,l=[];for(;s.length>0;){const e=s.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&s.push(e)}))}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[A(e)[0]])),a=t.map((e=>A(e)[0]));let s=a.map((e=>this.graph.nodes[e]));0===s.length&&(s=this._outputs);const o=this.getCompilationKey(r,s);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,s),this.compiledMap.set(o,i));const u={},l={};return(0,N.tidy)((()=>{const n=new nr(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,a]=A(t),s=[];s[a]=e[t],r[n]=s}));const s=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=tr(t,r,n,this._resourceManager);if(N.util.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,s,a,o)}}return null==this.parent&&n.dispose(s),t.map((e=>E(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,a,s,o){"control"!==t.category&&-1===s.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[$(e,n.currentContextId)]}(e.name,n,r);null!=t&&t.forEach((e=>{if(e&&!e.kept&&!a.has(e.id)){const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,r={},a={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const s=new nr(this.weightMap,r,a,this.functionExecutorMap),o=await this.executeWithControlFlow(e,s,t,n),i=t.map((e=>E(e,o,s))),u=i.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id)),c=new Set([...u,...l,...this.weightIds]);return Object.keys(o).forEach((e=>{o[e].forEach((e=>{!e||e.kept||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&s.dispose(c),i}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const a=Object.keys(e),s=a.map((e=>this.graph.nodes[A(e)[0]])),o=n.map((e=>A(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:d}=rr(e,i,this.weightMap,this._initNodes),p=[...s,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),h=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=A(t),a=[];a[r]=e[t],h[n]=a}));const f={},m=this.getFrozenTensorIds(h),g={};for(;p.length>0;){const e=this.processStack(s,p,t,h,g,m,o,f,u);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!ir(e)&&!E(e.name,h,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${a}]. Consider providing the following inputs: [${l}]. ${e}`)}return h}processStack(e,t,n,r,a,s,o,i,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&C("isConstant",e.node,r,n)&&([c]=_(e.node.name,n)),null==r[e.node.name]){const d=tr(e.node,r,n,this._resourceManager);c||([c]=_(e.node.name,n));const p=n.currentContext;N.util.isPromise(d)?l.push(d.then((l=>(r[c]=l,n.currentContext=p,this.checkTensorForDisposal(c,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,u),l)))):(r[c]=d,this.checkTensorForDisposal(c,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,u))}else this.processChildNodes(e.node,t,n,r,a,u)}return l}processChildNodes(e,t,n,r,a,s){e.children.forEach((e=>{const[o]=_(e.name,n);!a[o]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!E(e,r,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!E(e,r,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=A(t),a=this.graph.nodes[r];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));N.util.assert(t,(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&N.util.assert(n.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=A(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=A(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class dr{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class pr{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new dr}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=N.io.browserHTTPRequest(e,this.loadOptions);else{const t=N.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(N.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=N.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new cr(J.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=J.Instance.transformGraph(e.modelInitializer);this.initializer=new cr(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=N.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof N.Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function hr(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e+="model.json?tfjs-format=file");const n=new pr(e,t);return await n.load(),n}var fr=function(e,t){return(fr=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function mr(e,t){function n(){this.constructor=e}fr(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var gr=function(){return(gr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};function yr(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){e.done?a(e.value):new n((function(t){t(e.value)})).then(o,i)}u((r=r.apply(e,t||[])).next())}))}function br(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}function xr(e){var t=e.shape[2],n=(0,N.argMax)(e,2),r=(0,N.reshape)(n,[-1]);return(0,N.oneHot)(r,t)}function vr(e,t){return(0,N.tidy)((function(){return(0,N.cast)((0,N.greater)(e,(0,N.scalar)(t)),"int32")}))}function kr(e,t){var n=t.shape,r=n[0],a=n[1],s=n[2];return(0,N.tidy)((function(){var n=xr(t),o=(0,N.expandDims)((0,N.range)(0,s,1,"int32"),1),i=(0,N.cast)((0,N.matMul)(n,o),"int32"),u=(0,N.reshape)(i,[r,a]),l=(0,N.add)(u,(0,N.scalar)(1,"int32"));return(0,N.sub)(function(e,t){return(0,N.mul)(e,t)}(l,e),(0,N.scalar)(1,"int32"))}))}function wr(e){var t=e.shape,n=t[0],r=t[1],a=t[2];return(0,N.tidy)((function(){var t=xr(e),s=(0,N.expandDims)((0,N.range)(0,a,1,"int32"),1),o=(0,N.cast)((0,N.matMul)(t,s),"int32");return(0,N.reshape)(o,[n,r])}))}var Ir=function(){function e(e,t){this.model=e,this.outputStride=t;var n=this.model.inputs[0].shape;N.util.assert(-1===n[1]&&-1===n[2],(function(){return"Input shape ["+n[1]+", "+n[2]+"] must both be equal to or -1"}))}return e.prototype.predict=function(e){var t=this;return(0,N.tidy)((function(){var n=t.preprocessInput((0,N.cast)(e,"float32")),r=(0,N.expandDims)(n,0),a=t.model.predict(r).map((function(e){return(0,N.squeeze)(e,[0])})),s=t.nameOutputResults(a);return{heatmapScores:(0,N.sigmoid)(s.heatmap),offsets:s.offsets,displacementFwd:s.displacementFwd,displacementBwd:s.displacementBwd,segmentation:s.segmentation,partHeatmaps:s.partHeatmaps,longOffsets:s.longOffsets,partOffsets:s.partOffsets}}))},e.prototype.dispose=function(){this.model.dispose()},e}(),Nr=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return mr(t,e),t.prototype.preprocessInput=function(e){return(0,N.tidy)((function(){return(0,N.sub)((0,N.div)(e,127.5),1)}))},t.prototype.nameOutputResults=function(e){return{offsets:e[0],segmentation:e[1],partHeatmaps:e[2],longOffsets:e[3],heatmap:e[4],displacementFwd:e[5],displacementBwd:e[6],partOffsets:e[7]}},t}(Ir),Tr=["nose","leftEye","rightEye","leftEar","rightEar","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle"],Sr=Tr.length,Cr=Tr.reduce((function(e,t,n){return e[t]=n,e}),{});function Er(e,t,n){var r=e[0],a=e[1],s=t[0],o=t[1],i=n.top,u=n.bottom;return[o/(n.left+n.right+a),s/(i+u+r)]}function _r(e,t,n,r){return{y:r.get(e,t,n),x:r.get(e,t,n+Sr)}}function $r(e,t,n){var r=_r(e.heatmapY,e.heatmapX,e.id,n),a=r.y,s=r.x;return{x:e.heatmapX*t+s,y:e.heatmapY*t+a}}function Ar(e,t,n){return e<t?t:e>n?n:e}function Rr(e,t){return{x:e.x+t.x,y:e.y+t.y}}function Fr(e,t,n){void 0===n&&(n=.3);for(var r=0,a=0,s=0;s<e.length;s++)t.keypoints[s].score>n&&(a+=1,r+=Math.pow(e[s].x-t.keypoints[s].position.x,2)+Math.pow(e[s].y-t.keypoints[s].position.y,2));return 0===a?r=1/0:r/=a,r}function Or(e,t,n,r,a,s,o){for(var i=o[0],u=o[1],l=n(e),c=l.y*r+l.x,d=a[Sr*(2*c)+t],p=a[Sr*(2*c+1)+t],h=e.y+d,f=e.x+p,m=0;m<s;m++){h=Math.min(h,i-1);var g=n({x:f=Math.min(f,u-1),y:h}),y=g.y*r+g.x;h+=d=a[Sr*(2*y)+t],f+=p=a[Sr*(2*y+1)+t]}return{x:f,y:h}}function Dr(e,t,n,r,a,s,o,i,u,l){for(var c=a[0],d=a[1],p=s[0],h=s[1],f=i[0],m=i[1],g=[],y=function(e){return function(e,t,n,r){var a=t[0],s=t[1],o=n[0],i=n[1],u=Math.round(((a+e.y+1)*i-1)/r);return{x:Math.round(((s+e.x+1)*o-1)/r),y:u}}(e,[c,d],[p,h],u)},b=0;b<r;b++){var x=Or(e,b,y,o,t,l,[f,m]);g.push(x)}for(var v=-1,k=1/0,w=0;w<n.length;w++){var I=Fr(g,n[w]);I<k&&(v=w,k=I)}return v}function Mr(e,t){var n=e[0],r=e[1];return[Math.round((r-1)/t+1),Math.round((n-1)/t+1)]}function Br(e,t,n,r,a,s,o,i,u,l,c){for(var d=o[0],p=o[1],h=e.shape,f=h[0],m=h[1],g=t.shape.slice(0,2),y=g[0],b=g[1],x=(0,N.reshape)(t,[y,b,2,Sr]),v=new Float32Array(c*Sr*3).fill(0),k=0;k<n.length;k++)for(var w=k*Sr*3,I=n[k],T=0;T<Sr;T++){var S=I.keypoints[T],C=w+3*T;v[C]=S.score,v[C+1]=S.position.y,v[C+2]=S.position.x}var E=Er([r,a],[d,p],i),_=E[0],$=E[1],A=(0,N.tensor)(v,[c,Sr,3]),R=i.top,F=i.left,O={variableNames:["segmentation","longOffsets","poses"],outputShape:[f,m],userCode:"\n    int convertToPositionInOutput(int pos, int pad, float scale, int stride) {\n      return round(((float(pos + pad) + 1.0) * scale - 1.0) / float(stride));\n    }\n\n    float convertToPositionInOutputFloat(\n        int pos, int pad, float scale, int stride) {\n      return ((float(pos + pad) + 1.0) * scale - 1.0) / float(stride);\n    }\n\n    float dist(float x1, float y1, float x2, float y2) {\n      return pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0);\n    }\n\n    float sampleLongOffsets(float h, float w, int d, int k) {\n      float fh = fract(h);\n      float fw = fract(w);\n      int clH = int(ceil(h));\n      int clW = int(ceil(w));\n      int flH = int(floor(h));\n      int flW = int(floor(w));\n      float o11 = getLongOffsets(flH, flW, d, k);\n      float o12 = getLongOffsets(flH, clW, d, k);\n      float o21 = getLongOffsets(clH, flW, d, k);\n      float o22 = getLongOffsets(clH, clW, d, k);\n      float o1 = mix(o11, o12, fw);\n      float o2 = mix(o21, o22, fw);\n      return mix(o1, o2, fh);\n    }\n\n    int findNearestPose(int h, int w) {\n      float prob = getSegmentation(h, w);\n      if (prob < 1.0) {\n        return -1;\n      }\n\n      // Done(Tyler): convert from output space h/w to strided space.\n      float stridedH = convertToPositionInOutputFloat(\n        h, "+R+", "+$+", "+s+");\n      float stridedW = convertToPositionInOutputFloat(\n        w, "+F+", "+_+", "+s+");\n\n      float minDist = 1000000.0;\n      int iMin = -1;\n      for (int i = 0; i < "+c+"; i++) {\n        float curDistSum = 0.0;\n        int numKpt = 0;\n        for (int k = 0; k < "+Sr+"; k++) {\n          float dy = sampleLongOffsets(stridedH, stridedW, 0, k);\n          float dx = sampleLongOffsets(stridedH, stridedW, 1, k);\n\n          float y = float(h) + dy;\n          float x = float(w) + dx;\n\n          for (int s = 0; s < "+u+"; s++) {\n            int yRounded = round(min(y, float("+(r-1)+")));\n            int xRounded = round(min(x, float("+(a-1)+")));\n\n            float yStrided = convertToPositionInOutputFloat(\n              yRounded, "+R+", "+$+", "+s+");\n            float xStrided = convertToPositionInOutputFloat(\n              xRounded, "+F+", "+_+", "+s+");\n\n            float dy = sampleLongOffsets(yStrided, xStrided, 0, k);\n            float dx = sampleLongOffsets(yStrided, xStrided, 1, k);\n\n            y = y + dy;\n            x = x + dx;\n          }\n\n          float poseScore = getPoses(i, k, 0);\n          float poseY = getPoses(i, k, 1);\n          float poseX = getPoses(i, k, 2);\n          if (poseScore > "+l+") {\n            numKpt = numKpt + 1;\n            curDistSum = curDistSum + dist(x, y, poseX, poseY);\n          }\n        }\n        if (numKpt > 0 && curDistSum / float(numKpt) < minDist) {\n          minDist = curDistSum / float(numKpt);\n          iMin = i;\n        }\n      }\n      return iMin;\n    }\n\n    void main() {\n        ivec2 coords = getOutputCoords();\n        int nearestPose = findNearestPose(coords[0], coords[1]);\n        setOutput(float(nearestPose));\n      }\n  "};return(0,N.backend)().compileAndRun(O,[e,x,A])}function Pr(){return"webgl"===(0,N.getBackend)()}function Lr(e,t,n,r,a,s,o,i,u,l,c,d){var p=o[0],h=o[1];return void 0===u&&(u=.2),void 0===l&&(l=8),void 0===c&&(c=.3),void 0===d&&(d=10),yr(this,void 0,void 0,(function(){var o,f,m,g,y;return br(this,(function(b){switch(b.label){case 0:return o=n.filter((function(e){return e.score>=u})),Pr()?(m=(0,N.tidy)((function(){var n=Br(e,t,o,r,a,s,[p,h],i,l,c,d),u=(0,N.engine)().makeTensorFromDataId(n.dataId,n.shape,n.dtype);return o.map((function(e,t){return function(e,t){return(0,N.tidy)((function(){return(0,N.cast)((0,N.equal)(e,(0,N.scalar)(t)),"int32")}))}(u,t)}))})),[4,Promise.all(m.map((function(e){return e.data()})))]):[3,2];case 1:return f=b.sent(),m.forEach((function(e){return e.dispose()})),[3,5];case 2:return[4,e.data()];case 3:return g=b.sent(),[4,t.data()];case 4:y=b.sent(),f=function(e,t,n,r,a,s,o,i,u,l){var c=o[0],d=o[1];void 0===l&&(l=5);for(var p=n.map((function(e){return new Uint8Array(r*a).fill(0)})),h=i.top,f=i.left,m=Er([r,a],[c,d],i),g=m[0],y=m[1],b=Mr([c,d],s)[0],x=0;x<r;x+=1)for(var v=0;v<a;v+=1){var k=x*a+v;if(1===e[k]){var w=Dr({x:v,y:x},t,n,l,[h,f],[g,y],b,[r,a],s,u);w>=0&&(p[w][k]=1)}}return p}(g,y,o,r,a,s,[p,h],i,l),b.label=5;case 5:return[2,f.map((function(e,t){return{data:e,pose:o[t],width:a,height:r}}))]}}))}))}function Vr(e,t,n,r,a,s,o,i,u,l,c,d,p){var h=i[0],f=i[1];return void 0===l&&(l=.2),void 0===c&&(c=8),void 0===d&&(d=.3),void 0===p&&(p=10),yr(this,void 0,void 0,(function(){var i,m,g,y,b,x;return br(this,(function(v){switch(v.label){case 0:return i=r.filter((function(e){return e.score>=l})),Pr()?(g=(0,N.tidy)((function(){var r=Br(e,t,i,a,s,o,[h,f],u,c,d,p),l=(0,N.engine)().makeTensorFromDataId(r.dataId,r.shape,r.dtype);return i.map((function(e,t){return function(e,t,n){return(0,N.tidy)((function(){return(0,N.sub)((0,N.mul)((0,N.cast)((0,N.equal)(e,(0,N.scalar)(n)),"int32"),(0,N.add)(t,1)),1)}))}(l,n,t)}))})),[4,Promise.all(g.map((function(e){return e.data()})))]):[3,2];case 1:return m=v.sent(),g.forEach((function(e){return e.dispose()})),[3,6];case 2:return[4,e.data()];case 3:return y=v.sent(),[4,t.data()];case 4:return b=v.sent(),[4,n.data()];case 5:x=v.sent(),m=function(e,t,n,r,a,s,o,i,u,l,c){var d=i[0],p=i[1];void 0===c&&(c=5);for(var h=r.map((function(e){return new Int32Array(a*s).fill(-1)})),f=u.top,m=u.left,g=Er([a,s],[d,p],u),y=g[0],b=g[1],x=Mr([d,p],o)[0],v=0;v<a;v+=1)for(var k=0;k<s;k+=1){var w=v*s+k;if(1===e[w]){var I=Dr({x:k,y:v},t,r,c,[f,m],[y,b],x,[a,s],o,l);I>=0&&(h[I][w]=n[w])}}return h}(y,b,x,i,a,s,o,[h,f],u,c),v.label=6;case 6:return[2,m.map((function(e,t){return{pose:i[t],data:e,height:a,width:s}}))]}}))}))}function zr(e){return Math.floor(e/2)}[["leftHip","leftShoulder"],["leftElbow","leftShoulder"],["leftElbow","leftWrist"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["rightHip","rightShoulder"],["rightElbow","rightShoulder"],["rightElbow","rightWrist"],["rightHip","rightKnee"],["rightKnee","rightAnkle"],["leftShoulder","rightShoulder"],["leftHip","rightHip"]].map((function(e){var t=e[0],n=e[1];return[Cr[t],Cr[n]]}));var Wr=function(){function e(e,t){this.priorityQueue=new Array(e),this.numberOfElements=-1,this.getElementValue=t}return e.prototype.enqueue=function(e){this.priorityQueue[++this.numberOfElements]=e,this.swim(this.numberOfElements)},e.prototype.dequeue=function(){var e=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,e},e.prototype.empty=function(){return-1===this.numberOfElements},e.prototype.size=function(){return this.numberOfElements+1},e.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},e.prototype.max=function(){return this.priorityQueue[0]},e.prototype.swim=function(e){for(;e>0&&this.less(zr(e),e);)this.exchange(e,zr(e)),e=zr(e)},e.prototype.sink=function(e){for(;2*e<=this.numberOfElements;){var t=2*e;if(t<this.numberOfElements&&this.less(t,t+1)&&t++,!this.less(e,t))break;this.exchange(e,t),e=t}},e.prototype.getValueAt=function(e){return this.getElementValue(this.priorityQueue[e])},e.prototype.less=function(e,t){return this.getValueAt(e)<this.getValueAt(t)},e.prototype.exchange=function(e,t){var n=this.priorityQueue[e];this.priorityQueue[e]=this.priorityQueue[t],this.priorityQueue[t]=n},e}();function Ur(e,t,n,r,a,s){for(var o=s.shape,i=o[0],u=o[1],l=!0,c=Math.max(n-a,0),d=Math.min(n+a+1,i),p=c;p<d;++p){for(var h=Math.max(r-a,0),f=Math.min(r+a+1,u),m=h;m<f;++m)if(s.get(p,m,e)>t){l=!1;break}if(!l)break}return l}var Gr=[["nose","leftEye"],["leftEye","leftEar"],["nose","rightEye"],["rightEye","rightEar"],["nose","leftShoulder"],["leftShoulder","leftElbow"],["leftElbow","leftWrist"],["leftShoulder","leftHip"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["nose","rightShoulder"],["rightShoulder","rightElbow"],["rightElbow","rightWrist"],["rightShoulder","rightHip"],["rightHip","rightKnee"],["rightKnee","rightAnkle"]].map((function(e){var t=e[0],n=e[1];return[Cr[t],Cr[n]]})),Hr=Gr.map((function(e){return e[1]})),Xr=Gr.map((function(e){return e[0]}));function qr(e,t,n,r){return{y:Ar(Math.round(e.y/t),0,n-1),x:Ar(Math.round(e.x/t),0,r-1)}}function jr(e,t,n,r,a,s,o,i){void 0===i&&(i=2);for(var u=r.shape,l=u[0],c=u[1],d=function(e,t,n){var r=n.shape[2]/2;return{y:n.get(t.y,t.x,e),x:n.get(t.y,t.x,r+e)}}(e,qr(t.position,s,l,c),o),p=Rr(t.position,d),h=0;h<i;h++){var f=qr(p,s,l,c),m=_r(f.y,f.x,n,a);p=Rr({x:f.x*s,y:f.y*s},{x:m.x,y:m.y})}var g=qr(p,s,l,c),y=r.get(g.y,g.x,n);return{position:p,part:Tr[n],score:y}}function Kr(e,t,n,r,a,s){var o=t.shape[2],i=Hr.length,u=new Array(o),l=e.part,c=e.score,d=$r(l,r,n);u[l.id]={score:c,part:Tr[l.id],position:d};for(var p=i-1;p>=0;--p){var h=Hr[p],f=Xr[p];u[h]&&!u[f]&&(u[f]=jr(p,u[h],f,t,n,r,s))}for(p=0;p<i;++p)h=Xr[p],f=Hr[p],u[h]&&!u[f]&&(u[f]=jr(p,u[h],f,t,n,r,a));return u}function Yr(e,t,n,r){var a=n.x,s=n.y;return e.some((function(e){var n=e.keypoints[r].position;return function(e,t,n,r){var a=n-e,s=r-t;return a*a+s*s}(s,a,n.y,n.x)<=t}))}function Qr(e,t,n){return n.reduce((function(n,r,a){var s=r.position,o=r.score;return Yr(e,t,s,a)||(n+=o),n}),0)/n.length}function Zr(e,t,n,r,a,s,o,i){void 0===o&&(o=.5),void 0===i&&(i=20);for(var u=[],l=function(e,t,n){for(var r=n.shape,a=r[0],s=r[1],o=r[2],i=new Wr(a*s*o,(function(e){return e.score})),u=0;u<a;++u)for(var l=0;l<s;++l)for(var c=0;c<o;++c){var d=n.get(u,l,c);d<e||Ur(c,d,u,l,1,n)&&i.enqueue({score:d,part:{heatmapY:u,heatmapX:l,id:c}})}return i}(o,0,e),c=i*i;u.length<s&&!l.empty();){var d=l.dequeue();if(!Yr(u,c,$r(d.part,a,t),d.part.id)){var p=Kr(d,e,t,a,n,r),h=Qr(u,c,p);u.push({keypoints:p,score:h})}}return u}var Jr,ea=[-123.15,-115.9,-103.06],ta=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return mr(t,e),t.prototype.preprocessInput=function(e){return(0,N.add)(e,ea)},t.prototype.nameOutputResults=function(e){var t=e[0],n=e[1],r=e[2],a=e[3],s=e[4],o=e[5];return{offsets:s,segmentation:e[6],partHeatmaps:o,longOffsets:a,heatmap:r,displacementFwd:n,displacementBwd:t,partOffsets:e[7]}},t}(Ir),na="https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/resnet50/",ra="https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/mobilenet/";function aa(e){if("undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)return function(e){if(0!==e.offsetHeight&&0!==e.offsetWidth)return[e.offsetHeight,e.offsetWidth];if(null!=e.height&&null!=e.width)return[e.height,e.width];throw new Error("HTMLImageElement must have height and width attributes set.")}(e);if("undefined"!=typeof ImageData&&e instanceof ImageData)return[e.height,e.width];if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)return function(e){return e.hasAttribute("height")&&e.hasAttribute("width")?[e.height,e.width]:[e.videoHeight,e.videoWidth]}(e);if(e instanceof N.Tensor)return[e.shape[0],e.shape[1]];throw new Error("error: Unknown input type: "+e+".")}function sa(e,t){return function(e,t){return(e-1)%t==0}(e,t)?e:Math.floor(e/t)*t+1}var oa={low:"low",medium:"medium",high:"high",full:"full"},ia=((Jr={})[oa.low]=.25,Jr[oa.medium]=.5,Jr[oa.high]=.75,Jr[oa.full]=1,Jr);function ua(e,t,n){var r=n[0],a=n[1],s=function(e){if("string"==typeof e){var t=ia[e];return N.util.assert("number"==typeof t,(function(){return"string value of inputResolution must be one of "+Object.values(oa).join(",")+" but was "+e+"."})),t}return N.util.assert("number"==typeof e&&e<=2&&e>=.1,(function(){return"inputResolution must be a string or number between 0.1 and 2, but was "+e})),e}(e);return[sa(r*s,t),sa(a*s,t)]}function la(e,t,n){var r=t[0],a=t[1];void 0===n&&(n=!1);var s,o,i,u,l,c,d=e.shape,p=d[0],h=d[1]/p;if(h>a/r){s=a;var f=r-(o=Math.ceil(s/h));i=0,u=0,l=Math.floor(f/2),c=r-(o+l)}else{o=r;var m=a-(s=Math.ceil(r*h));i=Math.floor(m/2),u=a-(s+i),l=0,c=0}return{resizedAndPadded:(0,N.tidy)((function(){var t;return t=n?N.image.resizeBilinear((0,N.reverse)(e,1),[o,s]):N.image.resizeBilinear(e,[o,s]),(0,N.pad3d)(t,[[l,c],[i,u],[0,0]])})),paddedBy:[[l,c],[i,u]]}}function ca(e,t,n,r,a){var s=t[0],o=t[1],i=n[0],u=n[1],l=r[0],c=l[0],d=l[1],p=r[1],h=p[0],f=p[1];return void 0===a&&(a=!1),(0,N.tidy)((function(){var t=N.image.resizeBilinear(e,[i,u],!0);return a&&(t=(0,N.sigmoid)(t)),function(e,t,n){var r=t[0],a=t[1],s=n[0],o=s[0],i=s[1],u=n[1],l=u[0],c=u[1];return(0,N.tidy)((function(){var t=(0,N.expandDims)(e);return(0,N.squeeze)(N.image.cropAndResize(t,[[o/(r+o+i-1),l/(a+l+c-1),(o+r-1)/(r+o+i-1),(l+a-1)/(a+l+c-1)]],[0],[r,a]),[0])}))}(t,[s,o],[[c,d],[h,f]])}))}function da(e,t){var n=t[0],r=t[1],a=aa(e),s=a[0],o=a[1],i=r/n,u=[0,0,0,0],l=u[0],c=u[1],d=u[2],p=u[3];return o/s<i?(l=0,c=0,d=Math.round(.5*(i*s-o)),p=Math.round(.5*(i*s-o))):(l=Math.round(.5*(1/i*o-s)),c=Math.round(.5*(1/i*o-s)),d=0,p=0),{resized:(0,N.tidy)((function(){var t=function(e){return e instanceof N.Tensor?e:N.browser.fromPixels(e)}(e);return t=(0,N.pad3d)(t,[[l,c],[d,p],[0,0]]),N.image.resizeBilinear(t,[n,r])})),padding:{top:l,left:d,right:p,bottom:c}}}function pa(e){return yr(this,void 0,void 0,(function(){return br(this,(function(t){return[2,Promise.all(e.map((function(e){return e.buffer()})))]}))}))}function ha(e,t){return{score:e.score,keypoints:e.keypoints.map((function(e){var n=e.score,r=e.part,a=e.position;return{score:n,part:r,position:{x:t-1-a.x,y:a.y}}}))}}function fa(e,t,n,r,a){var s=t[0],o=t[1],i=n[0],u=n[1],l=function(e,t,n,r,a){return void 0===r&&(r=0),void 0===a&&(a=0),1===n&&1===t&&0===r&&0===a?e:e.map((function(e){return function(e,t,n,r,a){return void 0===r&&(r=0),void 0===a&&(a=0),{score:e.score,keypoints:e.keypoints.map((function(e){var s=e.score,o=e.part,i=e.position;return{score:s,part:o,position:{x:i.x*n+a,y:i.y*t+r}}}))}}(e,t,n,r,a)}))}(e,(s+r.top+r.bottom)/i,(o+r.left+r.right)/u,-r.top,-r.left);return a?function(e,t){return t<=0?e:e.map((function(e){return ha(e,t)}))}(l,o):l}var ma=!0,ga=!1,ya={architecture:"MobileNetV1",outputStride:16,quantBytes:4,multiplier:.75},ba=["MobileNetV1","ResNet50"],xa={MobileNetV1:[8,16,32],ResNet50:[32,16]},va={MobileNetV1:[.5,.75,1],ResNet50:[1]},ka=[1,2,4],wa={flipHorizontal:!1,internalResolution:"medium",segmentationThreshold:.7,maxDetections:10,scoreThreshold:.4,nmsRadius:20},Ia={flipHorizontal:!1,internalResolution:"medium",segmentationThreshold:.7,maxDetections:10,scoreThreshold:.4,nmsRadius:20,minKeypointScore:.3,refineSteps:10};function Na(e){var t=e.segmentationThreshold,n=e.maxDetections,r=e.scoreThreshold,a=e.nmsRadius;if(t<0||t>1)throw new Error("segmentationThreshold "+t+". Should be in range [0.0, 1.0]");if(n<=0)throw new Error("Invalid maxDetections "+n+". Should be > 0");if(r<0||r>1)throw new Error("Invalid scoreThreshold "+r+". Should be in range [0.0, 1.0]");if(a<=0)throw new Error("Invalid nmsRadius "+a+".")}function Ta(e){var t=e.segmentationThreshold,n=e.maxDetections,r=e.scoreThreshold,a=e.nmsRadius,s=e.minKeypointScore,o=e.refineSteps;if(t<0||t>1)throw new Error("segmentationThreshold "+t+". Should be in range [0.0, 1.0]");if(n<=0)throw new Error("Invalid maxDetections "+n+". Should be > 0");if(r<0||r>1)throw new Error("Invalid scoreThreshold "+r+". Should be in range [0.0, 1.0]");if(a<=0)throw new Error("Invalid nmsRadius "+a+".");if(s<0||s>1)throw new Error("Invalid minKeypointScore "+s+".Should be in range [0.0, 1.0]");if(o<=0||o>20)throw new Error("Invalid refineSteps "+o+".Should be in range [1, 20]")}var Sa=function(){function e(e){this.baseModel=e}return e.prototype.predictForPersonSegmentation=function(e){var t=this.baseModel.predict(e);return{segmentLogits:t.segmentation,heatmapScores:t.heatmapScores,offsets:t.offsets,displacementFwd:t.displacementFwd,displacementBwd:t.displacementBwd}},e.prototype.predictForPersonSegmentationAndPart=function(e){var t=this.baseModel.predict(e);return{segmentLogits:t.segmentation,partHeatmapLogits:t.partHeatmaps,heatmapScores:t.heatmapScores,offsets:t.offsets,displacementFwd:t.displacementFwd,displacementBwd:t.displacementBwd}},e.prototype.predictForMultiPersonInstanceSegmentationAndPart=function(e){var t=this.baseModel.predict(e);return{segmentLogits:t.segmentation,longOffsets:t.longOffsets,heatmapScores:t.heatmapScores,offsets:t.offsets,displacementFwd:t.displacementFwd,displacementBwd:t.displacementBwd,partHeatmaps:t.partHeatmaps}},e.prototype.segmentPersonActivation=function(e,t,n){var r=this;void 0===n&&(n=.5);var a=aa(e),s=a[0],o=a[1],i=ua(t,this.baseModel.outputStride,[s,o]),u=da(e,i),l=u.resized,c=u.padding,d=(0,N.tidy)((function(){var e=r.predictForPersonSegmentation(l),t=e.segmentLogits,a=e.heatmapScores,i=e.offsets,u=e.displacementFwd,d=e.displacementBwd,p=l.shape,h=p[0],f=p[1],m=ca(t,[s,o],[h,f],[[c.top,c.bottom],[c.left,c.right]],ma);return{segmentation:vr((0,N.squeeze)(m),n),heatmapScores:a,offsets:i,displacementFwd:u,displacementBwd:d}})),p=d.segmentation,h=d.heatmapScores,f=d.offsets,m=d.displacementFwd,g=d.displacementBwd;return l.dispose(),{segmentation:p,heatmapScores:h,offsets:f,displacementFwd:m,displacementBwd:g,padding:c,internalResolutionHeightAndWidth:i}},e.prototype.segmentPerson=function(e,t){return void 0===t&&(t=wa),yr(this,void 0,void 0,(function(){var n,r,a,s,o,i,u,l,c,d,p,h,f,m,g,y,b,x;return br(this,(function(v){switch(v.label){case 0:return Na(t=gr({},wa,t)),n=this.segmentPersonActivation(e,t.internalResolution,t.segmentationThreshold),r=n.segmentation,a=n.heatmapScores,s=n.offsets,o=n.displacementFwd,i=n.displacementBwd,u=n.padding,l=n.internalResolutionHeightAndWidth,c=r.shape,d=c[0],p=c[1],[4,r.data()];case 1:return h=v.sent(),r.dispose(),[4,pa([a,s,o,i])];case 2:return f=v.sent(),m=f[0],g=f[1],y=f[2],b=f[3],x=fa(x=Zr(m,g,y,b,this.baseModel.outputStride,t.maxDetections,t.scoreThreshold,t.nmsRadius),[d,p],l,u,ga),a.dispose(),s.dispose(),o.dispose(),i.dispose(),[2,{height:d,width:p,data:h,allPoses:x}]}}))}))},e.prototype.segmentMultiPerson=function(e,t){return void 0===t&&(t=Ia),yr(this,void 0,void 0,(function(){var n,r,a,s,o,i,u,l,c,d,p,h,f,m,g,y,b,x,v,k,w,I=this;return br(this,(function(T){switch(T.label){case 0:return Ta(t=gr({},Ia,t)),n=aa(e),r=n[0],a=n[1],s=ua(t.internalResolution,this.baseModel.outputStride,[r,a]),o=da(e,s),i=o.resized,u=o.padding,l=(0,N.tidy)((function(){var e,n=I.predictForMultiPersonInstanceSegmentationAndPart(i),o=n.segmentLogits,l=n.longOffsets,c=n.heatmapScores,d=n.offsets,p=n.displacementFwd,h=n.displacementBwd,f=ca(o,[r,a],s,[[u.top,u.bottom],[u.left,u.right]],ma);return e=l,{segmentation:vr((0,N.squeeze)(f),t.segmentationThreshold),longOffsets:e,heatmapScoresRaw:c,offsetsRaw:d,displacementFwdRaw:p,displacementBwdRaw:h}})),c=l.segmentation,d=l.longOffsets,p=l.heatmapScoresRaw,h=l.offsetsRaw,f=l.displacementFwdRaw,m=l.displacementBwdRaw,[4,pa([p,h,f,m])];case 1:return g=T.sent(),y=g[0],b=g[1],x=g[2],v=g[3],k=fa(k=Zr(y,b,x,v,this.baseModel.outputStride,t.maxDetections,t.scoreThreshold,t.nmsRadius),[r,a],s,u,ga),[4,Lr(c,d,k,r,a,this.baseModel.outputStride,s,u,t.scoreThreshold,t.refineSteps,t.minKeypointScore,t.maxDetections)];case 2:return w=T.sent(),i.dispose(),c.dispose(),d.dispose(),p.dispose(),h.dispose(),f.dispose(),m.dispose(),[2,w]}}))}))},e.prototype.segmentPersonPartsActivation=function(e,t,n){var r=this;void 0===n&&(n=.5);var a=aa(e),s=a[0],o=a[1],i=ua(t,this.baseModel.outputStride,[s,o]),u=da(e,i),l=u.resized,c=u.padding,d=(0,N.tidy)((function(){var e=r.predictForPersonSegmentationAndPart(l),t=e.segmentLogits,a=e.partHeatmapLogits,i=e.heatmapScores,u=e.offsets,d=e.displacementFwd,p=e.displacementBwd,h=l.shape,f=h[0],m=h[1],g=ca(t,[s,o],[f,m],[[c.top,c.bottom],[c.left,c.right]],ma),y=ca(a,[s,o],[f,m],[[c.top,c.bottom],[c.left,c.right]],ma);return{partSegmentation:kr(vr((0,N.squeeze)(g),n),y),heatmapScores:i,offsets:u,displacementFwd:d,displacementBwd:p}})),p=d.partSegmentation,h=d.heatmapScores,f=d.offsets,m=d.displacementFwd,g=d.displacementBwd;return l.dispose(),{partSegmentation:p,heatmapScores:h,offsets:f,displacementFwd:m,displacementBwd:g,padding:c,internalResolutionHeightAndWidth:i}},e.prototype.segmentPersonParts=function(e,t){return void 0===t&&(t=wa),yr(this,void 0,void 0,(function(){var n,r,a,s,o,i,u,l,c,d,p,h,f,m,g,y,b,x;return br(this,(function(v){switch(v.label){case 0:return Na(t=gr({},wa,t)),n=this.segmentPersonPartsActivation(e,t.internalResolution,t.segmentationThreshold),r=n.partSegmentation,a=n.heatmapScores,s=n.offsets,o=n.displacementFwd,i=n.displacementBwd,u=n.padding,l=n.internalResolutionHeightAndWidth,c=r.shape,d=c[0],p=c[1],[4,r.data()];case 1:return h=v.sent(),r.dispose(),[4,pa([a,s,o,i])];case 2:return f=v.sent(),m=f[0],g=f[1],y=f[2],b=f[3],x=fa(x=Zr(m,g,y,b,this.baseModel.outputStride,t.maxDetections,t.scoreThreshold,t.nmsRadius),[d,p],l,u,ga),a.dispose(),s.dispose(),o.dispose(),i.dispose(),[2,{height:d,width:p,data:h,allPoses:x}]}}))}))},e.prototype.segmentMultiPersonParts=function(e,t){return void 0===t&&(t=Ia),yr(this,void 0,void 0,(function(){var n,r,a,s,o,i,u,l,c,d,p,h,f,m,g,y,b,x,v,k,w,I,T=this;return br(this,(function(S){switch(S.label){case 0:return Ta(t=gr({},Ia,t)),n=aa(e),r=n[0],a=n[1],s=ua(t.internalResolution,this.baseModel.outputStride,[r,a]),o=da(e,s),i=o.resized,u=o.padding,l=(0,N.tidy)((function(){var e=T.predictForMultiPersonInstanceSegmentationAndPart(i),n=e.segmentLogits,o=e.longOffsets,l=e.heatmapScores,c=e.offsets,d=e.displacementFwd,p=e.displacementBwd,h=e.partHeatmaps,f=ca(n,[r,a],s,[[u.top,u.bottom],[u.left,u.right]],ma),m=ca(h,[r,a],s,[[u.top,u.bottom],[u.left,u.right]],ma),g=o;return{segmentation:vr((0,N.squeeze)(f),t.segmentationThreshold),longOffsets:g,heatmapScoresRaw:l,offsetsRaw:c,displacementFwdRaw:d,displacementBwdRaw:p,partSegmentation:wr(m)}})),c=l.segmentation,d=l.longOffsets,p=l.heatmapScoresRaw,h=l.offsetsRaw,f=l.displacementFwdRaw,m=l.displacementBwdRaw,g=l.partSegmentation,[4,pa([p,h,f,m])];case 1:return y=S.sent(),b=y[0],x=y[1],v=y[2],k=y[3],w=fa(w=Zr(b,x,v,k,this.baseModel.outputStride,t.maxDetections,t.scoreThreshold,t.nmsRadius),[r,a],s,u,ga),[4,Vr(c,d,g,w,r,a,this.baseModel.outputStride,s,u,t.scoreThreshold,t.refineSteps,t.minKeypointScore,t.maxDetections)];case 2:return I=S.sent(),i.dispose(),c.dispose(),d.dispose(),p.dispose(),h.dispose(),f.dispose(),m.dispose(),g.dispose(),[2,I]}}))}))},e.prototype.dispose=function(){this.baseModel.dispose()},e}();function Ca(e){return yr(this,void 0,void 0,(function(){var t,n,r,a,s,o;return br(this,(function(i){switch(i.label){case 0:if(t=e.outputStride,n=e.quantBytes,r=e.multiplier,null==N)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return a=function(e,t,n){var r={1:"100",.75:"075",.5:"050"},a="model-stride"+e+".json";return 4===n?ra+"float/"+r[t]+"/"+a:ra+"quant"+n+"/"+r[t]+"/"+a}(t,r,n),[4,hr(e.modelUrl||a)];case 1:return s=i.sent(),o=new Nr(s,t),[2,new Sa(o)]}}))}))}function Ea(e){return yr(this,void 0,void 0,(function(){var t,n,r,a,s;return br(this,(function(o){switch(o.label){case 0:if(t=e.outputStride,n=e.quantBytes,null==N)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return r=function(e,t){var n="model-stride"+e+".json";return 4===t?na+"float/"+n:na+"quant"+t+"/"+n}(t,n),[4,hr(e.modelUrl||r)];case 1:return a=o.sent(),s=new ta(a,t),[2,new Sa(s)]}}))}))}function _a(e){return void 0===e&&(e=ya),yr(this,void 0,void 0,(function(){return br(this,(function(t){return"ResNet50"===(e=function(e){if(null==(e=e||ya).architecture&&(e.architecture="MobileNetV1"),ba.indexOf(e.architecture)<0)throw new Error("Invalid architecture "+e.architecture+". Should be one of "+ba);if(null==e.outputStride&&(e.outputStride=16),xa[e.architecture].indexOf(e.outputStride)<0)throw new Error("Invalid outputStride "+e.outputStride+". Should be one of "+xa[e.architecture]+" for architecture "+e.architecture+".");if(null==e.multiplier&&(e.multiplier=1),va[e.architecture].indexOf(e.multiplier)<0)throw new Error("Invalid multiplier "+e.multiplier+". Should be one of "+va[e.architecture]+" for architecture "+e.architecture+".");if(null==e.quantBytes&&(e.quantBytes=4),ka.indexOf(e.quantBytes)<0)throw new Error("Invalid quantBytes "+e.quantBytes+". Should be one of "+ka+" for architecture "+e.architecture+".");return e}(e)).architecture?[2,Ea(e)]:"MobileNetV1"===e.architecture?[2,Ca(e)]:[2,null]}))}))}var $a={};function Aa(e,t,n,r){var a=e.width,s=e.height,o=t.width,i=t.height;if(a!==o||s!==i)throw new Error("error: dimensions must match. "+n+" has dimensions "+a+"x"+s+", "+r+" has dimensions "+o+"x"+i)}function Ra(e){var t=e.getContext("2d");t.scale(-1,1),t.translate(-e.width,0)}function Fa(e,t,n){e.globalCompositeOperation=n,e.drawImage(t,0,0)}function Oa(e){return $a[e]||($a[e]=document.createElement("canvas")),$a[e]}function Da(e,t,n){var r=Oa(n);return 0===t?function(e,t){var n=e.width,r=e.height;t.width=n,t.height=r,t.getContext("2d").drawImage(e,0,0,n,r)}(e,r):function(e,t,n){var r=e.height,a=e.width,s=n.getContext("2d");n.width=a,n.height=r,s.clearRect(0,0,a,r),s.save(),/^((?!chrome|android).)*safari/i.test(navigator.userAgent)?function(e,t,n){for(var r=e.getContext("2d"),a=0,s=1/(2*Math.PI*5*5),o=n<3?1:2,i=-n;i<=n;i+=o)for(var u=-n;u<=n;u+=o)a+=s*Math.exp(-(u*u+i*i)/50);for(i=-n;i<=n;i+=o)for(u=-n;u<=n;u+=o)r.globalAlpha=s*Math.exp(-(u*u+i*i)/50)/a*n,r.drawImage(t,u,i);r.globalAlpha=1}(n,e,t):(s.filter="blur("+t+"px)",s.drawImage(e,0,0,a,r)),s.restore()}(e,t,r),r}function Ma(e,t){var n=Oa(t);return function(e,t){t.width=e.width,t.height=e.height,t.getContext("2d").putImageData(e,0,0)}(e,n),n}function Ba(e,t,n,r,a){if(void 0===t&&(t={r:0,g:0,b:0,a:0}),void 0===n&&(n={r:0,g:0,b:0,a:255}),void 0===r&&(r=!1),void 0===a&&(a=[1]),Array.isArray(e)&&0===e.length)return null;var s,o=(s=Array.isArray(e)?e:[e])[0],i=o.width,u=o.height,l=new Uint8ClampedArray(i*u*4);function c(e,t,n,r,a,s){void 0===s&&(s={r:0,g:255,b:255,a:255});for(var o=-a;o<=a;o++)for(var i=-a;i<=a;i++)if(0!==o&&0!==i){var u=(t+o)*r+(n+i);e[4*u+0]=s.r,e[4*u+1]=s.g,e[4*u+2]=s.b,e[4*u+3]=s.a}}function d(e,t,n,r,a,s){void 0===a&&(a=[1]),void 0===s&&(s=1);for(var o=0,i=-s;i<=s;i++)for(var u=function(s){if(0!==i&&0!==s){var u=(t+i)*r+(n+s);a.some((function(t){return t===e[u]}))||(o+=1)}},l=-s;l<=s;l++)u(l);return o>0}for(var p=0;p<u;p+=1)for(var h=function(e){var o=p*i+e;l[4*o+0]=n.r,l[4*o+1]=n.g,l[4*o+2]=n.b,l[4*o+3]=n.a;for(var h=function(n){if(a.some((function(e){return e===s[n].data[o]}))){l[4*o]=t.r,l[4*o+1]=t.g,l[4*o+2]=t.b,l[4*o+3]=t.a;var h=d(s[n].data,p,e,i,a);r&&p-1>=0&&p+1<u&&e-1>=0&&e+1<i&&h&&c(l,p,e,i,1)}},f=0;f<s.length;f++)h(f)},f=0;f<i;f+=1)h(f);return new ImageData(l,i,u)}var Pa=[[110,64,170],[143,61,178],[178,60,178],[210,62,167],[238,67,149],[255,78,125],[255,94,99],[255,115,75],[255,140,56],[239,167,47],[217,194,49],[194,219,64],[175,240,91],[135,245,87],[96,247,96],[64,243,115],[40,234,141],[28,219,169],[26,199,194],[33,176,213],[47,150,224],[65,125,224],[84,101,214],[99,81,195]];function La(e,t){if(void 0===t&&(t=Pa),Array.isArray(e)&&0===e.length)return null;for(var n,r=(n=Array.isArray(e)?e:[e])[0],a=r.width,s=r.height,o=new Uint8ClampedArray(a*s*4),i=0;i<s*a;++i){var u=4*i;o[u+0]=255,o[u+1]=255,o[u+2]=255,o[u+3]=255;for(var l=0;l<n.length;l++){var c=n[l].data[i];if(-1!==c){var d=t[c];if(!d)throw new Error("No color could be found for part id "+c);o[u+0]=d[0],o[u+1]=d[1],o[u+2]=d[2],o[u+3]=255}}}return new ImageData(o,a,s)}var Va="blurred",za="blurred-mask",Wa="mask";function Ua(e,t,n,r,a,s){void 0===r&&(r=.7),void 0===a&&(a=0),void 0===s&&(s=!1);var o=aa(t),i=o[0],u=o[1];e.width=u,e.height=i;var l=e.getContext("2d");if(l.save(),s&&Ra(e),l.drawImage(t,0,0),l.globalAlpha=r,n){Aa({width:u,height:i},n,"image","mask");var c=Da(Ma(n,Wa),a,za);l.drawImage(c,0,0,u,i)}l.restore()}function Ga(e,t,n,r,a,s,o){void 0===r&&(r=.7),void 0===a&&(a=0),void 0===s&&(s=!1),void 0===o&&(o=10);var i=aa(t),u=i[0];Aa({width:i[1],height:u},n,"image","mask");var l=Da(Ma(n,Wa),a,za);e.width=l.width,e.height=l.height;var c=e.getContext("2d");c.save(),s&&Ra(e);var d=Oa("lowres-part-mask"),p=d.getContext("2d");d.width=l.width*(1/o),d.height=l.height*(1/o),p.drawImage(l,0,0,l.width,l.height,0,0,d.width,d.height),c.imageSmoothingEnabled=!1,c.drawImage(d,0,0,d.width,d.height,0,0,e.width,e.height);for(var h=0;h<d.width;h++)c.beginPath(),c.strokeStyle="#ffffff",c.moveTo(o*h,0),c.lineTo(o*h,e.height),c.stroke();for(h=0;h<d.height;h++)c.beginPath(),c.strokeStyle="#ffffff",c.moveTo(0,o*h),c.lineTo(e.width,o*h),c.stroke();c.globalAlpha=1-r,c.drawImage(t,0,0,l.width,l.height),c.restore()}function Ha(e,t,n,r,a,s){void 0===r&&(r=3),void 0===a&&(a=3),void 0===s&&(s=!1);var o=Da(t,r,Va);e.width=o.width,e.height=o.height;var i=e.getContext("2d");if(Array.isArray(n)&&0===n.length)i.drawImage(o,0,0);else{var u=function(e,t){var n=Ma(Ba(e,{r:0,g:0,b:0,a:255},{r:0,g:0,b:0,a:0}),Wa);return 0===t?n:Da(n,t,za)}(n,a);i.save(),s&&Ra(e);var l=aa(t),c=l[0],d=l[1];i.drawImage(t,0,0,d,c),Fa(i,u,"destination-in"),Fa(i,o,"destination-over"),i.restore()}}function Xa(e,t,n,r,a,s,o){void 0===r&&(r=[0,1]),void 0===a&&(a=3),void 0===s&&(s=3),void 0===o&&(o=!1);var i=Da(t,a,Va);e.width=i.width,e.height=i.height;var u=e.getContext("2d");if(Array.isArray(n)&&0===n.length)u.drawImage(i,0,0);else{var l=function(e,t,n){var r=Ma(Ba(e,{r:0,g:0,b:0,a:0},{r:0,g:0,b:0,a:255},!0,t),Wa);return 0===n?r:Da(r,n,za)}(n,r,s);u.save(),o&&Ra(e);var c=aa(t),d=c[0],p=c[1];u.drawImage(t,0,0,p,d),Fa(u,l,"destination-in"),Fa(u,i,"destination-over"),u.restore()}}var qa=["left_face","right_face","left_upper_arm_front","left_upper_arm_back","right_upper_arm_front","right_upper_arm_back","left_lower_arm_front","left_lower_arm_back","right_lower_arm_front","right_lower_arm_back","left_hand","right_hand","torso_front","torso_back","left_upper_leg_front","left_upper_leg_back","right_upper_leg_front","right_upper_leg_back","left_lower_leg_front","left_lower_leg_back","right_lower_leg_front","right_lower_leg_back","left_feet","right_feet"],ja="2.1.0"},8166:(e,t,n)=>{"use strict";n.d(t,{H:()=>a});var r=n(9972);function a(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&r.util.assert("complex64"!==e.dtype,(()=>t+" does not support complex64 tensors in the CPU backend."))}))}},8912:(e,t,n)=>{"use strict";n.r(t),n.d(t,{MathBackendCPU:()=>o,shared:()=>i,version_cpu:()=>u});var r=n(9972),a=n(8166);const s=r.kernel_impls.whereImpl;class o extends r.KernelBackend{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new r.DataStorage(this,(0,r.engine)())}nextDataId(){return o.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,(0,r.env)().get("IS_NODE")&&r.backend_util.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const a={id:this.nextDataId()};return this.data.set(a,{values:e,dtype:n,refCount:1}),a}makeTensorInfo(e,t,n){let a;if("string"===t&&null!=n&&n.length>0&&r.util.isString(n[0])){const s=n.map((e=>r.util.encodeString(e)));a=this.write(s,e,t)}else a=this.write(n,e,t);return{dataId:a,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,r,a){this.data.set(e,{values:t,dtype:r,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return r.backend_util.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>r.util.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,r.buffer)(e.shape,e.dtype,n)}makeOutput(e,t,n){const a=this.write(e,t,n);return(0,r.engine)().makeTensorFromDataId(a,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=r.util.now();return e(),{kernelMs:r.util.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){(0,a.H)([e],"where");const t=this.readSync(e.dataId);return s(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}o.nextDataId=0;var i=n(5226);const u="3.2.0";(0,r.registerBackend)("cpu",(()=>new o),1);var l=n(6738);const c=(0,l.A)(r.Elu,(e=>e>=0?e:Math.exp(e)-1)),d={kernelName:r.Elu,backendName:"cpu",kernelFunc:c};var p=n(1775);function h(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{alpha:i}=s;(0,a.H)([o],"leakyRelu");const u=r.util.sizeFromShape(o.shape),l=n.data.get(o.dataId).values,c=r.util.getTypedArrayFromDType("float32",u);for(let e=0;e<l.length;e++)c[e]=l[e]<0?i*l[e]:l[e];return n.makeTensorInfo(o.shape,"float32",c)}const f={kernelName:r.LeakyRelu,backendName:"cpu",kernelFunc:h};var m=n(3533);const g=(0,m.b)(((e,t)=>e<0?t*e:e));function y(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;(0,a.H)([r,s],"prelu");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[u,l]=g(r.shape,s.shape,o,i,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const b={kernelName:r.Prelu,backendName:"cpu",kernelFunc:y},x=(0,l.A)(r.Relu,(e=>Math.max(0,e))),v={kernelName:r.Relu,backendName:"cpu",kernelFunc:x},k=(0,l.A)(r.Relu6,(e=>Math.min(Math.max(0,e),6))),w={kernelName:r.Relu6,backendName:"cpu",kernelFunc:k};function I(e,t,n,r,a){if("linear"===n)return(0,p.y)({inputs:{x:t},backend:e});if("relu"===n)return x({inputs:{x:t},backend:e});if("elu"===n)return c({inputs:{x:t},backend:e});if("relu6"===n)return k({inputs:{x:t},backend:e});if("prelu"===n)return y({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return h({inputs:{x:t},backend:e,attrs:{alpha:a}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}var N=n(2779);function T(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{shape:o}=a,i=r.util.sizeFromShape(s.shape),u=r.util.inferFromImplicitShape(o,i),l=r.util.sizeFromShape(u);r.util.assert(i===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const c=n.data.get(s.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.real,t=c.complexTensorInfos.imag;e.shape=u,t.shape=u}return{dataId:s.dataId,shape:u,dtype:s.dtype}}const S={kernelName:r.Reshape,backendName:"cpu",kernelFunc:T};function C(e){const{inputs:t,backend:n,attrs:s}=e,{a:o,b:i}=t,{transposeA:u,transposeB:l}=s;(0,a.H)([o,i],"matMul");const c=o.shape.length,d=i.shape.length,p=u?o.shape[c-2]:o.shape[c-1],h=l?i.shape[d-1]:i.shape[d-2],f=u?o.shape[c-1]:o.shape[c-2],m=l?i.shape[d-2]:i.shape[d-1],g=o.shape.slice(0,-2),y=i.shape.slice(0,-2),b=r.util.sizeFromShape(g),x=r.util.sizeFromShape(y),v=b===x||1===b||1===x;r.util.assert(c>=2&&d>=2&&v,(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${y}).`));const k=(b>x?o.shape.slice(0,-2):i.shape.slice(0,-2)).concat([f,m]);r.util.assert(p===h,(()=>`Error in matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${o.shape} and ${i.shape} and transposeA=${u} and transposeB=${l} must match.`));const w=l?[x,m,h]:[x,h,m],I=T({inputs:{x:o},backend:n,attrs:{shape:u?[b,p,f]:[b,f,p]}}),N=T({inputs:{x:i},backend:n,attrs:{shape:w}}),S=u?I.shape[1]:I.shape[2],C=u?I.shape[2]:I.shape[1],E=l?N.shape[1]:N.shape[2],_=Math.max(b,x),$=n.data.get(I.dataId).values,A=n.data.get(N.dataId).values,R=r.util.computeStrides(I.shape),F=r.util.computeStrides(N.shape),[O,D,M]=u?[R[0],1,R[1]]:[R[0],R[1],1],[B,P,L]=l?[1,F[1],F[0]]:[F[1],1,F[0]],V=C*E,z=(0,r.buffer)([_,C,E],I.dtype),W=z.values,U=n.blockSize;for(let e=0;e<_;e++)for(let t=0;t<C;t+=U)for(let n=0;n<E;n+=U)for(let r=0;r<S;r+=U){const a=Math.min(t+U,C),s=Math.min(n+U,E),o=Math.min(r+U,S);for(let i=t;i<a;i++)for(let t=n;t<s;t++){let n=0;for(let a=r;a<o;a++){const r=Math.min(e,b-1)*O,s=Math.min(e,x-1)*L;n+=$[r+i*D+a*M]*A[a*B+t*P+s]}W[e*V+(i*E+t)]+=n}}return n.disposeIntermediateTensorInfo(I),n.disposeIntermediateTensorInfo(N),n.makeTensorInfo(k,z.dtype,z.values)}const E={kernelName:r.BatchMatMul,backendName:"cpu",kernelFunc:C},_={kernelName:r._FusedMatMul,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a,b:s,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:d}=r;let p,h,f;const m=[];p=C({inputs:{a,b:s},attrs:{transposeA:u,transposeB:l},backend:n}),o&&(h=(0,N.IH)({inputs:{a:p,b:o},backend:n}),m.push(p),p=h),c&&(f=I(n,p,c,i,d),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};var $=n(224);const A=(0,l.A)(r.Acos,(e=>Math.acos(e))),R={kernelName:r.Acos,backendName:"cpu",kernelFunc:A},F=(0,l.A)(r.Acosh,(e=>Math.acosh(e))),O={kernelName:r.Acosh,backendName:"cpu",kernelFunc:F},D={kernelName:r.AddN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;(0,a.H)(t,"addN");const o=s.map((e=>n.data.get(e.dataId).values)),i=(0,r.buffer)(s[0].shape,s[0].dtype),u=i.values;for(let e=0;e<s.length;e++){const t=o[e];for(let e=0;e<u.length;e++)u[e]+=t[e]}return n.makeTensorInfo(i.shape,i.dtype,i.values)}};var M=n(4802);const B={kernelName:r.All,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,keepDims:u}=s;(0,a.H)(o,"all");const l=r.util.parseAxisParam(i,o.shape);let c=l;const d=r.backend_util.getAxesPermutation(c,o.shape.length);let p=o;null!=d&&(p=(0,M.p)({inputs:{x:o},backend:n,attrs:{perm:d}}),c=r.backend_util.getInnerMostAxes(c.length,o.shape.length)),r.backend_util.assertAxesAreInnerMostDims("all",c,p.shape.length);const[h,f]=r.backend_util.computeOutAndReduceShapes(p.shape,c),m=r.util.sizeFromShape(f),g=r.util.makeZerosTypedArray(r.util.sizeFromShape(h),p.dtype),y=n.data.get(p.dataId).values;for(let e=0;e<g.length;++e){const t=e*m;let n=y[t];for(let e=0;e<m;++e){const r=y[t+e];n=n&&r}g[e]=n}null!=d&&n.disposeIntermediateTensorInfo(p);const b=n.makeTensorInfo(h,p.dtype,g);if(u){const e=T({inputs:{x:b},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(h,l)}});return n.disposeIntermediateTensorInfo(b),e}return b}},P={kernelName:r.Any,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,keepDims:u}=s;(0,a.H)(o,"any");const l=r.util.parseAxisParam(i,o.shape);let c=l;const d=r.backend_util.getAxesPermutation(c,o.shape.length);let p=o;null!=d&&(p=(0,M.p)({inputs:{x:o},backend:n,attrs:{perm:d}}),c=r.backend_util.getInnerMostAxes(c.length,o.shape.length)),r.backend_util.assertAxesAreInnerMostDims("any",c,p.shape.length);const[h,f]=r.backend_util.computeOutAndReduceShapes(p.shape,c),m=r.util.sizeFromShape(f),g=r.util.makeZerosTypedArray(r.util.sizeFromShape(h),p.dtype),y=n.data.get(p.dataId).values;for(let e=0;e<g.length;++e){const t=e*m;let n=y[t];for(let e=0;e<m;++e){const r=y[t+e];n=n||r}g[e]=n}null!=d&&n.disposeIntermediateTensorInfo(p);const b=n.makeTensorInfo(h,p.dtype,g);if(u){const e=T({inputs:{x:b},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(h,l)}});return n.disposeIntermediateTensorInfo(b),e}return b}},L={kernelName:r.ArgMax,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i}=s;(0,a.H)(o,"argMax");let u=r.util.parseAxisParam(i,o.shape);const l=r.backend_util.getAxesPermutation(u,o.shape.length);let c=o;const d=[];null!=l&&(c=(0,M.p)({inputs:{x:o},backend:n,attrs:{perm:l}}),d.push(c),u=r.backend_util.getInnerMostAxes(u.length,c.shape.length)),u=[u[0]],r.backend_util.assertAxesAreInnerMostDims("argMax",u,c.shape.length);const[p,h]=r.backend_util.computeOutAndReduceShapes(c.shape,u),f=r.util.sizeFromShape(p),m=r.util.makeZerosTypedArray(f,"int32"),g=r.util.sizeFromShape(h),y=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*g;let n=y[t],r=0;for(let e=0;e<g;++e){const a=y[t+e];a>n&&(n=a,r=e)}m[e]=r}return d.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(p,"int32",m)}},V={kernelName:r.ArgMin,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i}=s;(0,a.H)(o,"argMin");let u=r.util.parseAxisParam(i,o.shape);const l=r.backend_util.getAxesPermutation(u,o.shape.length);let c=o;const d=[];null!=l&&(c=(0,M.p)({inputs:{x:o},backend:n,attrs:{perm:l}}),d.push(c),u=r.backend_util.getInnerMostAxes(u.length,c.shape.length)),u=[u[0]],r.backend_util.assertAxesAreInnerMostDims("argMin",u,c.shape.length);const[p,h]=r.backend_util.computeOutAndReduceShapes(c.shape,u),f=r.util.sizeFromShape(p),m=r.util.makeZerosTypedArray(f,"int32"),g=r.util.sizeFromShape(h),y=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*g;let n=y[t],r=0;for(let e=0;e<g;++e){const a=y[t+e];a<n&&(n=a,r=e)}m[e]=r}return d.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(p,"int32",m)}},z=(0,l.A)(r.Asin,(e=>Math.asin(e))),W={kernelName:r.Asin,backendName:"cpu",kernelFunc:z},U=(0,l.A)(r.Asinh,(e=>Math.asinh(e))),G={kernelName:r.Asinh,backendName:"cpu",kernelFunc:U},H=(0,l.A)(r.Atan,(e=>Math.atan(e))),X={kernelName:r.Atan,backendName:"cpu",kernelFunc:H};var q=n(6205);const j=(0,m.b)(((e,t)=>Math.atan2(e,t))),K=(0,q.j)(r.Atan2,j),Y={kernelName:r.Atan2,backendName:"cpu",kernelFunc:K},Q=(0,l.A)(r.Atanh,(e=>Math.atanh(e))),Z={kernelName:r.Atanh,backendName:"cpu",kernelFunc:Q};function J(e,t,n,a,s,o){const i=s.strideHeight,u=s.strideWidth,l=s.dilationHeight,c=s.dilationWidth,d=s.effectiveFilterHeight,p=s.effectiveFilterWidth,h=s.padInfo.top,f=s.padInfo.left,m="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=(0,r.buffer)(s.outShape,n),y=g.values,b=s.outShape[1]*s.outShape[2]*s.outShape[3],x=s.outShape[2]*s.outShape[3],v=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*b,r=t*a[0];for(let t=0;t<s.inChannels;++t)for(let g=0;g<s.outHeight;++g){const b=g*i-h,k=Math.max(0,b),w=Math.min(s.inHeight,d+b),I=n+g*x;for(let n=0;n<s.outWidth;++n){const i=n*u-f,d=Math.max(0,i),h=Math.min(s.inWidth,p+i);let g=m,b=0,x=0;for(let n=k;n<w;n+=l){const s=r+n*a[1];for(let n=d;n<h;n+=c){const r=e[s+n*a[2]+t];"max"===o&&r>g?g=r:"avg"===o&&(b+=r,x++)}if(isNaN(g))break}y[I+n*v+t]="avg"===o?b/x:g}}}return g}function ee(e,t,n,a,s=!1,o=!1){const i=(0,r.buffer)(a.outShape,"int32"),u=a.strideHeight,l=a.strideWidth,c=a.dilationHeight,d=a.dilationWidth,p=a.effectiveFilterHeight,h=a.effectiveFilterWidth,f=a.padInfo.top,m=a.padInfo.left,g=(0,r.buffer)(t,n,e);for(let e=0;e<a.batchSize;++e)for(let t=0;t<a.inChannels;++t)for(let n=0;n<a.outHeight;++n){const r=n*u-f;let y=r;for(;y<0;)y+=c;const b=Math.min(a.inHeight,p+r);for(let u=0;u<a.outWidth;++u){const p=u*l-m;let f=p;for(;f<0;)f+=d;const x=Math.min(a.inWidth,h+p);let v=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=c){const i=n-r;for(let r=f;r<x;r+=d){const u=r-p,l=g.get(e,n,r,t);l>v&&(v=l,k=s?o?((e*a.inHeight+n)*a.inWidth+r)*a.inChannels+t:(n*a.inWidth+r)*a.inChannels+t:i*h+u)}}i.set(k,e,n,u,t)}}return i}function te(e,t,n,a,s,o){const i=s.strideDepth,u=s.strideHeight,l=s.strideWidth,c=s.dilationDepth,d=s.dilationHeight,p=s.dilationWidth,h=s.effectiveFilterDepth,f=s.effectiveFilterHeight,m=s.effectiveFilterWidth,g=s.padInfo.front,y=s.padInfo.top,b=s.padInfo.left,x="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=(0,r.buffer)(s.outShape,n),k=v.values,w=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],I=s.outShape[2]*s.outShape[3]*s.outShape[4],N=s.outShape[3]*s.outShape[4],T=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*w,r=t*a[0];for(let t=0;t<s.inChannels;++t)for(let v=0;v<s.outDepth;++v){const w=v*i-g;let S=w;for(;S<0;)S+=c;const C=Math.min(s.inDepth,h+w),E=n+v*I;for(let n=0;n<s.outHeight;++n){const i=n*u-y;let h=i;for(;h<0;)h+=d;const g=Math.min(s.inHeight,f+i),v=E+n*N;for(let n=0;n<s.outWidth;++n){const i=n*l-b;let u=i;for(;u<0;)u+=p;const f=Math.min(s.inWidth,m+i),y=v+n*T;let w=x,I=0,N=0;for(let n=S;n<C;n+=c){const s=r+n*a[1];for(let n=h;n<g;n+=d){const r=s+n*a[2];for(let n=u;n<f;n+=p){const s=e[r+n*a[3]+t];if("max"===o&&s>w?w=s:"avg"===o&&(I+=s,N++),isNaN(w))break}if(isNaN(w))break}if(isNaN(w))break}k[y+t]="avg"===o?I/N:w}}}}return v}const ne={kernelName:r.AvgPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t;(0,a.H)(o,"avgPool");const{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=s;r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(u,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${u} and dilations '1'`));const d=r.backend_util.computePool2DInfo(o.shape,i,u,1,l,c);let h;if(1===d.filterWidth&&1===d.filterHeight&&r.util.arraysEqual(d.inShape,d.outShape))h=(0,p.y)({inputs:{x:o},backend:n});else{const e=n.data.get(o.dataId).values,t=r.util.computeStrides(o.shape),a=J(e,o.shape,o.dtype,t,d,"avg");h=n.makeTensorInfo(d.outShape,o.dtype,a.values)}return h}},re={kernelName:r.AvgPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{filterSize:i,strides:u,pad:l,dimRoundingMode:c,dataFormat:d}=s;(0,a.H)(o,"avgPool3d");const p=r.backend_util.computePool3DInfo(o.shape,i,u,1,l,c,d),h=te(n.data.get(o.dataId).values,o.shape,o.dtype,r.util.computeStrides(o.shape),p,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}},ae={kernelName:r.AvgPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,input:i}=t,{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=s;(0,a.H)([o,i],"avgPool3DGrad");const p=r.backend_util.computePool3DInfo(i.shape,u,l,1,c,d),h=p.strideDepth,f=p.strideHeight,m=p.strideWidth,g=p.filterDepth,y=p.filterHeight,b=p.filterWidth,x=p.dilationDepth,v=p.dilationHeight,k=p.dilationWidth,w=p.effectiveFilterDepth,I=p.effectiveFilterHeight,N=p.effectiveFilterWidth,T=w-1-p.padInfo.front,S=N-1-p.padInfo.left,C=I-1-p.padInfo.top,E=(0,r.buffer)(i.shape,"float32"),_=1/(g*y*b),$=n.bufferSync(o);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inDepth;++n)for(let r=0;r<p.inHeight;++r)for(let a=0;a<p.inWidth;++a){const s=n-T,o=r-C,i=a-S;let u=0;for(let n=0;n<w;n+=x){const r=(s+n)/h;if(!(r<0||r>=p.outDepth||Math.floor(r)!==r))for(let n=0;n<I;n+=v){const a=(o+n)/f;if(!(a<0||a>=p.outHeight||Math.floor(a)!==a))for(let n=0;n<N;n+=k){const s=(i+n)/m;s<0||s>=p.outWidth||Math.floor(s)!==s||(u+=$.get(e,r,a,s,t))}}}E.set(u*_,e,n,r,a,t)}return n.makeTensorInfo(E.shape,E.dtype,E.values)}},se={kernelName:r.AvgPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,input:i}=t,u=i;(0,a.H)([o,i],"avgPoolGrad");const{filterSize:l,strides:c,pad:d}=s,p=r.backend_util.computePool2DInfo(u.shape,l,c,1,d),h=p.strideHeight,f=p.strideWidth,m=p.filterHeight,g=p.filterWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,v=p.effectiveFilterWidth,k=v-1-p.padInfo.left,w=x-1-p.padInfo.top,I=(0,r.buffer)(u.shape,"float32"),N=1/(m*g),T=n.data.get(o.dataId).values,S=(0,r.buffer)(o.shape,"float32",T);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let r=0;r<p.inWidth;++r){const a=n-w,s=r-k;let o=0;for(let n=0;n<x;n+=y){const r=(a+n)/h;if(!(r<0||r>=p.outHeight||Math.floor(r)!==r))for(let n=0;n<v;n+=b){const a=(s+n)/f;a<0||a>=p.outWidth||Math.floor(a)!==a||(o+=S.get(e,r,a,t))}}I.set(o*N,e,n,r,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},oe={kernelName:r.FusedBatchNorm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,scale:i,offset:u,mean:l,variance:c}=t;r.util.assert(l.shape.length===c.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),r.util.assert(null==u||l.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),r.util.assert(null==i||l.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),(0,a.H)([o,l,c,i,u],"batchNorm");let{varianceEpsilon:d}=s;null==d&&(d=.001);const p=n.data.get(o.dataId).values,h=n.data.get(l.dataId).values,f=n.data.get(c.dataId).values,m=i?n.data.get(i.dataId).values:new Float32Array([1]),g=u?n.data.get(u.dataId).values:new Float32Array([0]),y=new Float32Array(p.length),b=g.length,x=m.length,v=f.length,k=h.length;let w=0,I=0,N=0,T=0;for(let e=0;e<p.length;++e)y[e]=g[w++]+(p[e]-h[I++])*m[N++]/Math.sqrt(f[T++]+d),w>=b&&(w=0),I>=k&&(I=0),N>=x&&(N=0),T>=v&&(T=0);return n.makeTensorInfo(o.shape,o.dtype,y)}};var ie=n(2578);const ue={kernelName:r.BatchToSpaceND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{blockShape:i,crops:u}=s;(0,a.H)([o],"batchToSpaceND");const l=i.reduce(((e,t)=>e*t)),c=r.backend_util.getReshaped(o.shape,i,l),d=r.backend_util.getPermuted(c.length,i.length),p=r.backend_util.getReshapedPermuted(o.shape,i,l),h=r.backend_util.getSliceBeginCoords(u,i.length),f=r.backend_util.getSliceSize(p,u,i.length),m=T({inputs:{x:o},backend:n,attrs:{shape:c}}),g=(0,M.p)({inputs:{x:m},backend:n,attrs:{perm:d}}),y=T({inputs:{x:g},backend:n,attrs:{shape:p}}),b=(0,ie.tP)({inputs:{x:y},backend:n,attrs:{begin:h,size:f}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),b}};var le=n(8607);const ce={kernelName:r.Bincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o}=r,i=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,l=(0,le.W)(i,u,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,l)}};var de=n(9258),pe=n(4769);const he=(0,l.A)(r.ClipByValue,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),fe={kernelName:r.ClipByValue,backendName:"cpu",kernelFunc:he};var me=n(6961);const ge={kernelName:r.ComplexAbs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,a=new Float32Array(r.util.sizeFromShape(t.shape)),s=n.data.get(t.dataId),o=s.complexTensorInfos.real,i=s.complexTensorInfos.imag,u=n.data.get(o.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<u.length;e++){const t=u[e],n=l[e];a[e]=Math.hypot(t,n)}return n.makeOutput(a,t.shape,"float32")}};var ye=n(8926);function be(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.imag,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}const xe={kernelName:r.Imag,backendName:"cpu",kernelFunc:be};var ve=n(2186);function ke(e){const{inputs:t,backend:n,attrs:a}=e,{axis:s}=a,o=r.util.parseAxisParam(s,t[0].shape)[0];let i=r.backend_util.computeOutShape(t.map((e=>e.shape)),o);if(0===r.util.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const u=t.filter((e=>r.util.sizeFromShape(e.shape)>0));if(1===u.length)return(0,p.y)({inputs:{x:u[0]},backend:n});const l=u.map((e=>e.shape));if(r.backend_util.assertParamsConsistent(l,o),"complex64"===u[0].dtype){const e=u.map((e=>(0,ve.k)({inputs:{input:e},backend:n}))),t=u.map((e=>be({inputs:{input:e},backend:n}))),r=ke({inputs:e,backend:n,attrs:{axis:o}}),a=ke({inputs:t,backend:n,attrs:{axis:o}}),s=(0,me.P)({inputs:{real:r,imag:a},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),s}const c=u.map((e=>{const t=r.util.sizeFromShape(e.shape.slice(o));return T({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),d=c.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=r.backend_util.computeOutShape(c.map((e=>e.shape)),1);const h=1===c[0].shape[0],f=(0,ye.j)(d,i,t[0].dtype,h),m=r.backend_util.computeOutShape(u.map((e=>e.shape)),o),g=n.makeTensorInfo(m,t[0].dtype,f);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}const we={kernelName:r.Concat,backendName:"cpu",kernelFunc:ke};function Ie(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,filter:i}=t,{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:p}=s;(0,a.H)([o,i],"conv2d");const h=r.backend_util.convertConv2DDataFormat(c),f=r.backend_util.computeConv2DInfo(o.shape,i.shape,u,d,l,p,!1,h),m=f.filterHeight,g=f.filterWidth,y=f.dilationHeight,b=f.dilationWidth,x=f.padInfo.left,v=f.padInfo.top,k="channelsLast"===f.dataFormat,w=new r.TensorBuffer(f.outShape,o.dtype),I=r.util.computeStrides(o.shape),N=r.util.computeStrides(i.shape),T=I[0],S=k?I[1]:I[2],C=k?I[2]:1,E=k?1:I[1],_=w.strides[0],$=k?w.strides[1]:w.strides[2],A=k?w.strides[2]:1,R=k?1:w.strides[1],F=n.data.get(o.dataId).values,O=n.data.get(i.dataId).values,D=w.values;for(let e=0;e<f.batchSize;++e){const t=e*T,n=e*_;for(let e=0;e<f.outHeight;++e){const r=n+e*$,a=e*f.strideHeight-v;for(let e=0;e<m;++e){const n=a+e*y;if(n<0||n>=f.inHeight)continue;const s=e*N[0],o=t+n*S;for(let e=0;e<f.outWidth;++e){const t=r+e*A,n=e*f.strideWidth-x;for(let e=0;e<g;++e){const r=n+e*b;if(r<0||r>=f.inWidth)continue;const a=o+r*C;let i=s+e*N[1];for(let e=0;e<f.inChannels;++e){const n=F[a+e*E];for(let e=0;e<f.outChannels;++e)D[t+e*R]+=n*O[i+e];i+=f.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const Ne={kernelName:r.Conv2D,backendName:"cpu",kernelFunc:Ie},Te={kernelName:r.Conv2DBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,dy:i}=t,{strides:u,pad:l,dataFormat:c,dimRoundingMode:d,filterShape:p}=s;(0,a.H)([o,i],"conv2dBackpropFilter");const h=r.backend_util.convertConv2DDataFormat(c),f=r.backend_util.computeConv2DInfo(o.shape,p,u,1,l,d,!1,h),{strideHeight:m,strideWidth:g,filterHeight:y,filterWidth:b}=f,x="channelsLast"===f.dataFormat,v=new r.TensorBuffer(f.filterShape,"float32"),k=f.padInfo.left,w=f.padInfo.top,I=n.data.get(o.dataId).values,N=n.data.get(i.dataId).values,T=new r.TensorBuffer(o.shape,o.dtype,I),S=new r.TensorBuffer(i.shape,i.dtype,N);for(let e=0;e<y;++e){const t=Math.max(0,Math.ceil((w-e)/m)),n=Math.min(f.outHeight,(f.inHeight+w-e)/m);for(let r=0;r<b;++r){const a=Math.max(0,Math.ceil((k-r)/g)),s=Math.min(f.outWidth,(f.inWidth+k-r)/g);for(let o=0;o<f.inChannels;++o)for(let i=0;i<f.outChannels;++i){let u=0;for(let l=0;l<f.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*m-w;for(let e=a;e<s;++e){const n=r+e*g-k;u+=x?T.get(l,t,n,o)*S.get(l,c,e,i):T.get(l,o,t,n)*S.get(l,i,c,e)}}v.set(u,e,r,o,i)}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},Se={kernelName:r.Conv2DBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,filter:i}=t,{inputShape:u,strides:l,pad:c,dataFormat:d,dimRoundingMode:p}=s;(0,a.H)([o,i],"conv2dBackpropInput");const h=r.util.computeStrides(i.shape),f=r.util.computeStrides(o.shape);let m=r.backend_util.convertConv2DDataFormat(d);const g=r.backend_util.computeConv2DInfo(u,i.shape,l,1,c,p,!1,m),y=new r.TensorBuffer(g.inShape,"float32"),b=y.values,x=n.data.get(o.dataId).values,v=n.data.get(i.dataId).values,[k,w,I]=h,{batchSize:N,filterHeight:T,filterWidth:S,inChannels:C,inHeight:E,inWidth:_,outChannels:$,outHeight:A,outWidth:R,strideHeight:F,strideWidth:O}=g;m=g.dataFormat;const D=T-1-g.padInfo.top,M=S-1-g.padInfo.left,B="channelsLast"===m,P=y.strides[0],L=B?y.strides[1]:y.strides[2],V=B?y.strides[2]:1,z=B?1:y.strides[1],W=f[0],U=B?f[1]:f[2],G=B?f[2]:1,H=B?1:f[1];for(let e=0;e<N;++e)for(let t=0;t<C;++t)for(let n=0;n<E;++n){const r=n-D,a=Math.max(0,Math.ceil(r/F)),s=Math.min(A,(T+r)/F);for(let o=0;o<_;++o){const i=o-M,u=Math.max(0,Math.ceil(i/O)),l=Math.min(R,(S+i)/O);let c=0;for(let n=a;n<s;++n){const a=n*F-r;for(let r=u;r<l;++r){const s=W*e+U*n+G*r,o=k*(T-1-a)+w*(S-1-(r*O-i))+I*t;for(let e=0;e<$;++e)c+=x[s+H*e]*v[o+e]}}b[P*e+L*n+V*o+z*t]=c}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},Ce={kernelName:r.Conv3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,filter:i}=t,{strides:u,pad:l,dilations:c}=s;(0,a.H)([o,i],"conv3d");const d=r.backend_util.computeConv3DInfo(o.shape,i.shape,u,c,l),{filterDepth:p,filterHeight:h,filterWidth:f,dilationDepth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.front,v=b.left,k=b.top,w=new r.TensorBuffer(d.outShape,o.dtype),I=n.data.get(o.dataId).values,N=n.data.get(i.dataId).values,T=w.values,S=r.util.computeStrides(o.shape),C=r.util.computeStrides(i.shape);for(let e=0;e<d.batchSize;++e){const t=e*S[0],n=e*w.strides[0];for(let e=0;e<d.outDepth;++e){const r=n+e*w.strides[1],a=e*d.strideDepth-x;for(let e=0;e<p;++e){const n=a+e*m;if(n<0||n>=d.inDepth)continue;const s=e*C[0],o=t+n*S[1];for(let e=0;e<d.outHeight;++e){const t=r+e*w.strides[2],n=e*d.strideHeight-k;for(let e=0;e<h;++e){const r=n+e*g;if(r<0||r>=d.inHeight)continue;const a=s+e*C[1],i=o+r*S[2];for(let e=0;e<d.outWidth;++e){const n=t+e*d.outChannels,r=e*d.strideWidth-v;for(let e=0;e<f;++e){const t=r+e*y;if(t<0||t>=d.inWidth)continue;const s=a+e*C[2],o=i+t*d.inChannels;let u=s;for(let e=0;e<d.inChannels;++e){const t=I[o+e];for(let e=0;e<d.outChannels;++e)T[n+e]+=t*N[u+e];u+=d.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},Ee={kernelName:r.Conv3DBackpropFilterV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,dy:i}=t,{strides:u,pad:l,filterShape:c}=s;(0,a.H)([o,i],"conv3dBackpropFilterV2");const d=r.util.computeStrides(o.shape),p=r.util.computeStrides(i.shape),h=r.backend_util.computeConv3DInfo(o.shape,c,u,1,l),f=h.strideDepth,m=h.strideHeight,g=h.strideWidth,y=h.filterDepth,b=h.filterHeight,x=h.filterWidth,v=new r.TensorBuffer(h.filterShape,"float32"),k=v.values,[w,I,N,T]=v.strides,S=n.data.get(i.dataId).values,[C,E,_,$]=p,A=n.data.get(o.dataId).values,[R,F,O,D]=d,M=h.padInfo.front,B=h.padInfo.left,P=h.padInfo.top;for(let e=0;e<y;++e){const t=Math.max(0,Math.ceil((M-e)/f)),n=Math.min(h.outDepth,(h.inDepth+M-e)/f),r=e*w;for(let a=0;a<b;++a){const s=Math.max(0,Math.ceil((P-a)/m)),o=Math.min(h.outHeight,(h.inHeight+P-a)/m),i=a*I+r;for(let r=0;r<x;++r){const u=Math.max(0,Math.ceil((B-r)/g)),l=Math.min(h.outWidth,(h.inWidth+B-r)/g),c=r*N+i;for(let i=0;i<h.inChannels;++i){const d=i*T+c;for(let c=0;c<h.outChannels;++c){let p=0;for(let d=0;d<h.batchSize;++d){const h=d*R,y=d*C;for(let d=t;d<n;++d){const t=(e+d*f-M)*F+h,n=d*E+y;for(let e=s;e<o;++e){const s=(a+e*m-P)*O+t,o=e*_+n;for(let e=u;e<l;++e){const t=e*$+o;p+=A[(r+e*g-B)*D+s+i]*S[t+c]}}}}k[d+c]=p}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},_e={kernelName:r.Conv3DBackpropInputV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,filter:i}=t,{pad:u,strides:l,inputShape:c}=s;(0,a.H)([o],"conv3dBackpropInputV2");const d=r.util.computeStrides(o.shape),p=r.util.computeStrides(i.shape),h=r.backend_util.computeConv3DInfo(c,i.shape,l,1,u),f=new r.TensorBuffer(h.inShape,"float32"),m=f.values,[g,y,b,x]=f.strides,v=n.data.get(o.dataId).values,[k,w,I,N]=d,T=n.data.get(i.dataId).values,[S,C,E,_]=p,{batchSize:$,filterDepth:A,filterHeight:R,filterWidth:F,inChannels:O,inDepth:D,inHeight:M,inWidth:B,outChannels:P,outDepth:L,outHeight:V,outWidth:z,strideDepth:W,strideHeight:U,strideWidth:G}=h,H=A-1-h.padInfo.front,X=R-1-h.padInfo.top,q=F-1-h.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<O;++t)for(let n=0;n<D;++n){const r=n-H,a=Math.max(0,Math.ceil(r/W)),s=Math.min(L,(A+r)/W);for(let o=0;o<M;++o){const i=o-X,u=Math.max(0,Math.ceil(i/U)),l=Math.min(V,(R+i)/U);for(let c=0;c<B;++c){const d=c-q,p=Math.max(0,Math.ceil(d/G)),h=Math.min(z,(F+d)/G);let f=0;for(let n=a;n<s;++n){const a=n*W-r;for(let r=u;r<l;++r){const s=r*U-i;for(let o=p;o<h;++o){const i=k*e+w*n+I*r+N*o,u=S*(A-1-a)+C*(R-1-s)+E*(F-1-(o*G-d))+_*t;for(let e=0;e<P;++e)f+=v[i+e]*T[u+e]}}}m[g*e+y*n+b*o+x*c+t]=f}}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},$e=(0,l.A)(r.Cos,(e=>Math.cos(e))),Ae={kernelName:r.Cos,backendName:"cpu",kernelFunc:$e},Re=(0,l.A)(r.Cosh,(e=>Math.cosh(e))),Fe={kernelName:r.Cosh,backendName:"cpu",kernelFunc:Re},Oe={kernelName:r.CropAndResize,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{image:s,boxes:o,boxInd:i}=t,{cropSize:u,method:l,extrapolationValue:c}=a,[d,p,h,f]=s.shape,m=o.shape[0],[g,y]=u,b=(0,r.buffer)([m,g,y,f],"float32"),x=n.data.get(o.dataId).values,v=n.data.get(i.dataId).values,k=n.data.get(s.dataId).values,w=r.util.computeStrides(s.shape),I=r.util.computeStrides(b.shape);for(let e=0;e<m;e++){const t=4*e,n=x[t],r=x[t+1],a=x[t+2],s=x[t+3],o=v[e];if(o>=d)continue;const i=g>1?(a-n)*(p-1)/(g-1):0,u=y>1?(s-r)*(h-1)/(y-1):0;for(let t=0;t<g;t++){const d=g>1?n*(p-1)+t*i:.5*(n+a)*(p-1);if(d<0||d>p-1)for(let n=0;n<y;n++)for(let r=0;r<f;r++){const a=r+n*I[2]+t*I[1]+e*I[0];b.values[a]=c}else if("bilinear"===l){const n=Math.floor(d),a=Math.ceil(d),i=d-n;for(let l=0;l<y;l++){const d=y>1?r*(h-1)+l*u:.5*(r+s)*(h-1);if(d<0||d>h-1){for(let n=0;n<f;n++){const r=n+l*I[2]+t*I[1]+e*I[0];b.values[r]=c}continue}const p=Math.floor(d),m=Math.ceil(d),g=d-p;for(let r=0;r<f;r++){let s=r+p*w[2]+n*w[1]+o*w[0];const u=k[s];s=r+m*w[2]+n*w[1]+o*w[0];const c=k[s];s=r+p*w[2]+a*w[1]+o*w[0];const d=k[s];s=r+m*w[2]+a*w[1]+o*w[0];const h=u+(c-u)*g,f=d+(k[s]-d)*g;s=r+l*I[2]+t*I[1]+e*I[0],b.values[s]=h+(f-h)*i}}}else for(let n=0;n<y;++n){const a=y>1?r*(h-1)+n*u:.5*(r+s)*(h-1);if(a<0||a>h-1){for(let r=0;r<f;r++){const a=r+n*I[2]+t*I[1]+e*I[0];b.values[a]=c}continue}const i=Math.round(a),l=Math.round(d);for(let r=0;r<f;r++){const a=r+i*w[2]+l*w[1]+o*w[0],s=r+n*I[2]+t*I[1]+e*I[0];b.values[s]=k[a]}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},De={kernelName:r.Cumsum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,exclusive:u,reverse:l}=s;(0,a.H)(o,"cumsum");const c=r.backend_util.getAxesPermutation([i],o.shape.length);let d=o;null!=c&&(d=(0,M.p)({inputs:{x:o},backend:n,attrs:{perm:c}}));const p=r.backend_util.getInnerMostAxes(1,o.shape.length)[0];if(p!==d.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${d.shape.length-1} but got axis=${p}`);const h=(0,r.upcastType)(d.dtype,"int32"),f=r.util.makeZerosTypedArray(r.util.sizeFromShape(d.shape),h),m=n.data.get(d.dataId).values,g=d.shape[d.shape.length-1],y=l?(e,t)=>e+g-t-1:(e,t)=>e+t;for(let e=0;e<m.length;e+=g)for(let t=0;t<g;t++){const n=y(e,t);if(0===t)f[n]=u?0:m[n];else{const r=y(e,t-1);f[n]=u?m[r]+f[r]:m[n]+f[r]}}const b=n.makeTensorInfo(d.shape,h,f);if(null!=c){const e=r.backend_util.getUndoAxesPermutation(c),t=(0,M.p)({inputs:{x:b},backend:n,attrs:{perm:e}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(d),t}return b}},Me={kernelName:r.DenseBincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o,binaryOutput:i}=r;if(1===a.shape.length){const e=n.data.get(a.dataId).values,t=n.data.get(s.dataId).values,r=(0,le.W)(e,t,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,r)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(s),r=(0,le.i)(e,t,o,i);return n.makeTensorInfo(r.shape,s.dtype,r.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+a.shape.length+".")}},Be={kernelName:r.DepthToSpace,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{blockSize:o,dataFormat:i}=a;r.util.assert("NHWC"===i,(()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+i)),r.util.assert(o>1,(()=>"blockSize should be > 1 for depthToSpace, but was: "+o));const u=s.shape[0],l=s.shape[1],c=s.shape[2],d=s.shape[3],p=l*o,h=c*o,f=d/(o*o),m=n.data.get(s.dataId).values,g=new Float32Array(u*p*h*f);let y=0;for(let e=0;e<u;++e)for(let t=0;t<p;++t){const n=Math.floor(t/o),r=t%o;for(let t=0;t<h;++t){const a=Math.floor(t/o),s=(r*o+t%o)*f;for(let t=0;t<f;++t){const r=t+s+d*(a+c*(n+l*e));g[y++]=m[r]}}}return n.makeTensorInfo([u,p,h,f],s.dtype,g)}};function Pe(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,filter:i}=t,{strides:u,pad:l,dilations:c,dimRoundingMode:d}=s;(0,a.H)([o,i],"depthwiseConv2DNative");const p=r.util.computeStrides(o.shape),h=r.util.computeStrides(i.shape);let f=c;null==f&&(f=[1,1]),r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(u,f),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${f}'`));const m=r.backend_util.computeConv2DInfo(o.shape,i.shape,u,f,l,d,!0),{filterHeight:g,filterWidth:y,dilationHeight:b,dilationWidth:x,padInfo:v}=m,k=v.left,w=v.top,I=m.outChannels/m.inChannels,N=new r.TensorBuffer(m.outShape,o.dtype),T=n.data.get(o.dataId).values,S=n.data.get(i.dataId).values,C=N.values;for(let e=0;e<m.batchSize;++e){const t=e*p[0],n=e*N.strides[0];for(let e=0;e<m.outHeight;++e){const r=n+e*N.strides[1],a=e*m.strideHeight-k;for(let e=0;e<g;++e){const n=a+e*b;if(n<0||n>=m.inHeight)continue;const s=e*h[0],o=t+n*p[1];for(let e=0;e<m.outWidth;++e){const t=r+e*N.strides[2],n=e*m.strideWidth-w;for(let e=0;e<y;++e){const r=n+e*x;if(r<0||r>=m.inWidth)continue;const a=s+e*h[1],i=o+r*m.inChannels;let u=t,l=a;for(let e=0;e<m.inChannels;++e){const t=T[i+e];for(let e=0;e<I;++e)C[u+e]+=t*S[l+e];u+=I,l+=I}}}}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}const Le={kernelName:r.DepthwiseConv2dNative,backendName:"cpu",kernelFunc:Pe},Ve={kernelName:r.DepthwiseConv2dNativeBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,dy:i}=t,{strides:u,dilations:l,pad:c,dimRoundingMode:d,filterShape:p}=s;(0,a.H)([o,i],"depthwiseConv2dNativeBackpropFilter");const h=r.backend_util.computeConv2DInfo(o.shape,p,u,l,c,d,!0),{strideHeight:f,strideWidth:m,filterHeight:g,filterWidth:y}=h,b=new r.TensorBuffer(h.filterShape,"float32"),x=h.padInfo.left,v=h.padInfo.top,k=h.outChannels/h.inChannels,w=n.data.get(o.dataId).values,I=new r.TensorBuffer(o.shape,o.dtype,w),N=n.data.get(i.dataId).values,T=new r.TensorBuffer(i.shape,i.dtype,N);for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((v-e)/f)),n=Math.min(h.outHeight,(h.inHeight+v-e)/f);for(let r=0;r<y;++r){const a=Math.max(0,Math.ceil((x-r)/m)),s=Math.min(h.outWidth,(h.inWidth+x-r)/m);for(let o=0;o<h.outChannels;++o){const i=Math.trunc(o/k),u=o%k;let l=0;for(let u=0;u<h.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*f-v;for(let e=a;e<s;++e){const n=r+e*m-x;l+=I.get(u,t,n,i)*T.get(u,c,e,o)}}b.set(l,e,r,i,u)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},ze={kernelName:r.DepthwiseConv2dNativeBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,filter:i}=t,{strides:u,dilations:l,pad:c,dimRoundingMode:d,inputShape:p}=s;(0,a.H)([o,i],"depthwiseConv2DNativeBackpropInput");const h=r.util.computeStrides(o.shape),f=r.util.computeStrides(i.shape),m=r.backend_util.computeConv2DInfo(p,i.shape,u,l,c,d,!0),g=new r.TensorBuffer(m.inShape,"float32"),y=g.values,[b,x,v]=g.strides,k=n.data.get(o.dataId).values,[w,I,N]=h,T=n.data.get(i.dataId).values,[S,C,E]=f,{batchSize:_,filterHeight:$,filterWidth:A,inChannels:R,inHeight:F,inWidth:O,outChannels:D,outHeight:M,outWidth:B,strideHeight:P,strideWidth:L}=m,V=$-1-m.padInfo.top,z=A-1-m.padInfo.left,W=D/R;for(let e=0;e<_;++e)for(let t=0;t<R;++t)for(let n=0;n<F;++n){const r=n-V,a=Math.max(0,Math.ceil(r/P)),s=Math.min(M,($+r)/P);for(let o=0;o<O;++o){const i=o-z,u=Math.max(0,Math.ceil(i/L)),l=Math.min(B,(A+i)/L);let c=0;for(let n=a;n<s;++n){const a=n*P-r;for(let r=u;r<l;++r){const s=w*e+I*n+N*r,o=S*($-1-a)+C*(A-1-(r*L-i))+E*t;for(let e=0;e<W;++e)c+=k[s+(t*W+e)]*T[o+e]}}y[b*e+x*n+v*o+t]=c}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},We={kernelName:r.Diag,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t,s=r.util.sizeFromShape(a.shape),o=n.data.get(a.dataId).values,i=(0,r.buffer)([s,s],a.dtype),u=i.values;for(let e=0;e<o.length;e++)u[e*s+e]=o[e];const l=[...a.shape,...a.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},Ue={kernelName:r.Dilation2D,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:s}=e,{strides:o,pad:i,dilations:u}=n,l=t,c=l.data.get(a.dataId).values,d=a.shape.length,p=l.data.get(s.dataId).values,h=s.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:v,strideHeight:k,strideWidth:w,filterHeight:I,filterWidth:N,dilationHeight:T,dilationWidth:S,outShape:C}=r.backend_util.computeDilation2DInfo(a.shape,s.shape,o,i,"NHWC",u),E=r.util.sizeFromShape(C),_=C.length,$=r.util.getArrayFromDType(a.dtype,E);for(let e=0;e<f;++e)for(let t=0;t<b;++t){const n=t*k-v.top;for(let o=0;o<x;++o){const i=o*w-v.left;for(let u=0;u<y;++u){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<I;++t){const o=n+t*T;if(o>=0&&o<m)for(let n=0;n<N;++n){const f=i+n*S;if(f>=0&&f<g){const i=r.util.locToIndex([e,o,f,u],d,r.util.computeStrides(a.shape)),m=r.util.locToIndex([t,n,u],h,r.util.computeStrides(s.shape)),g=c[i]+p[m];g>l&&(l=g)}}}$[r.util.locToIndex([e,t,o,u],_,r.util.computeStrides(C))]=l}}}return{dataId:l.write(r.util.toTypedArray($,a.dtype),C,a.dtype),shape:C,dtype:a.dtype}}},Ge={kernelName:r.Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:s,dy:o}=e,{strides:i,pad:u,dilations:l}=n,c=t,d=r.util.toNestedArray(a.shape,c.data.get(a.dataId).values),p=r.util.toNestedArray(s.shape,c.data.get(s.dataId).values),{batchSize:h,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:v,strideWidth:k,filterHeight:w,filterWidth:I,dilationHeight:N,dilationWidth:T,outShape:S}=r.backend_util.computeDilation2DInfo(a.shape,s.shape,i,u,"NHWC",l);r.util.assert(o.rank===S.length,(()=>`Error in ${r.Dilation2DBackpropFilter}, dy must have the same rank as output ${S.length}, but got `+o.rank));const C=r.util.toNestedArray(S,c.data.get(o.dataId).values),E=r.util.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<h;++e)for(let t=0;t<y;++t){const n=t*v-x.top;for(let r=0;r<b;++r){const a=r*k-x.left;for(let s=0;s<g;++s){let o=Number.MIN_SAFE_INTEGER,i=0,u=0;for(let t=0;t<w;++t){const r=n+t*N;if(r>=0&&r<f)for(let n=0;n<I;++n){const l=a+n*T;if(l>=0&&l<m){const a=d[e][r][l][s]+p[t][n][s];a>o&&(o=a,i=t,u=n)}}}E[i][u][s]+=C[e][t][r][s]}}}return{dataId:c.write(r.util.toTypedArray(E,a.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},He={kernelName:r.Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:s,dy:o}=e,{strides:i,pad:u,dilations:l}=n,c=t,d=r.util.toNestedArray(a.shape,c.data.get(a.dataId).values),p=r.util.toNestedArray(s.shape,c.data.get(s.dataId).values),{batchSize:h,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:v,strideWidth:k,filterHeight:w,filterWidth:I,dilationHeight:N,dilationWidth:T,outShape:S}=r.backend_util.computeDilation2DInfo(a.shape,s.shape,i,u,"NHWC",l);r.util.assert(o.rank===S.length,(()=>`Error in ${r.Dilation2DBackpropInput}, dy must have the same rank as output ${S.length}, but got `+o.rank));const C=r.util.toNestedArray(S,c.data.get(o.dataId).values),E=r.util.makeZerosNestedTypedArray(a.shape,a.dtype);for(let e=0;e<h;++e)for(let t=0;t<y;++t){const n=t*v-x.top;for(let r=0;r<b;++r){const a=r*k-x.left;for(let s=0;s<g;++s){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,u=a<0?0:a;for(let t=0;t<w;++t){const r=n+t*N;if(r>=0&&r<f)for(let n=0;n<I;++n){const l=a+n*T;if(l>=0&&l<m){const a=d[e][r][l][s]+p[t][n][s];a>o&&(o=a,i=r,u=l)}}}E[e][i][u][s]+=C[e][t][r][s]}}}return{dataId:c.write(r.util.toTypedArray(E,a.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},Xe={kernelName:r.EluGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:o}=t;(0,a.H)([s,o],"eluGrad");const i=new Float32Array(r.util.sizeFromShape(o.shape)),u=n.data.get(o.dataId).values,l=n.data.get(s.dataId).values;for(let e=0;e<u.length;++e){const t=u[e];i[e]=t>=1?l[e]:l[e]*(t+1)}return n.makeTensorInfo(o.shape,"float32",i)}},qe=(0,m.b)(((e,t)=>e===t?1:0)),je=(0,q.j)(r.Equal,qe,null,"bool"),Ke={kernelName:r.Equal,backendName:"cpu",kernelFunc:je},Ye=r.backend_util.ERF_P,Qe=r.backend_util.ERF_A1,Ze=r.backend_util.ERF_A2,Je=r.backend_util.ERF_A3,et=r.backend_util.ERF_A4,tt=r.backend_util.ERF_A5,nt=(0,l.A)(r.Erf,(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+Ye*n);return t*(1-((((tt*r+et)*r+Je)*r+Ze)*r+Qe)*r*Math.exp(-n*n))})),rt={kernelName:r.Erf,backendName:"cpu",kernelFunc:nt};var at=n(1211);function st(e){const{inputs:t,backend:n,attrs:a}=e,{input:s}=t,{dim:o}=a,i=s.shape.length,u=s.shape.slice();let l=o;return o<0&&(r.util.assert(-(i+1)<=o,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+o+1),u.splice(l,0,1),T({inputs:{x:s},backend:n,attrs:{shape:u}})}const ot={kernelName:r.ExpandDims,backendName:"cpu",kernelFunc:st};var it=n(969),ut=n(1917);const lt=(0,m.b)(((e,t)=>e/t)),ct=(0,q.j)(r.RealDiv,lt),dt={kernelName:r.RealDiv,backendName:"cpu",kernelFunc:ct};var pt=n(1649);function ht(e,t,n){const a=e.shape,s=a[0],o=a[1],i=n.data.get(e.dataId),u=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,c=[s,o],d=r.util.sizeFromShape(c),p=r.util.getTypedArrayFromDType("float32",d),h=r.util.getTypedArrayFromDType("float32",d);for(let e=0;e<s;e++){const a=(0,ie.tP)({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,o]}}),s=(0,ie.tP)({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,o]}}),i=(0,me.P)({inputs:{real:a,imag:s},backend:n}),{real:c,imag:d}=ft(i,t,n),f=r.backend_util.mergeRealAndImagArrays(c,d);for(let t=0;t<o;t++){const n=r.backend_util.getComplexWithIndex(f,t);p[e*o+t]=n.real,h[e*o+t]=n.imag}n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i)}const f=n.makeTensorInfo(c,"float32",p),m=n.makeTensorInfo(c,"float32",h),g=(0,me.P)({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function ft(e,t,n){const a=r.util.sizeFromShape(e.shape),s=n.data.get(e.dataId),o=n.data.get(s.complexTensorInfos.real.dataId).values,i=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((u=a)&u-1)){const s=mt(o,i,a,t,n),u=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(u,"float32",s.real),t=n.makeTensorInfo(u,"float32",s.imag),o=n.makeTensorInfo([],"float32",r.util.createScalarValue(a,"float32")),i=(0,p.y)({inputs:{x:o},backend:n}),l=dt.kernelFunc({inputs:{a:e,b:o},backend:n}),c=dt.kernelFunc({inputs:{a:t,b:i},backend:n}),d=n.data.get(l.dataId).values,h=n.data.get(c.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),{real:d,imag:h}}return s}{const e=function(e,t,n){const a=new Float32Array(2*t);for(let s=0;s<t;s++){let o=0,i=0;for(let a=0;a<t;a++){const u=r.backend_util.exponent(s*a,t,n),l=r.backend_util.getComplexWithIndex(e,a);o+=l.real*u.real-l.imag*u.imag,i+=l.real*u.imag+l.imag*u.real}n&&(o/=t,i/=t),r.backend_util.assignToTypedArray(a,o,i,s)}return a}(r.backend_util.mergeRealAndImagArrays(o,i),a,t);return r.backend_util.splitRealAndImagArrays(e)}var u}function mt(e,t,n,a,s){if(1===n)return{real:e,imag:t};const o=r.backend_util.mergeRealAndImagArrays(e,t),i=n/2,u=r.backend_util.complexWithEvenIndex(o),l=u.real,c=u.imag,d=[l.length],p=s.makeTensorInfo(d,"float32",l),h=s.makeTensorInfo(d,"float32",c),f=(0,me.P)({inputs:{real:p,imag:h},backend:s}),m=r.backend_util.complexWithOddIndex(o),g=m.real,y=m.imag,b=[g.length],x=s.makeTensorInfo(b,"float32",g),v=s.makeTensorInfo(b,"float32",y),k=(0,me.P)({inputs:{real:x,imag:v},backend:s}),w=mt(l,c,i,a,s),I=w.real,T=w.imag,S=[I.length],C=s.makeTensorInfo(S,"float32",I),E=s.makeTensorInfo(S,"float32",T),_=(0,me.P)({inputs:{real:C,imag:E},backend:s}),$=mt(g,y,i,a,s),A=$.real,R=$.imag,F=[A.length],O=s.makeTensorInfo(F,"float32",A),D=s.makeTensorInfo(F,"float32",R),M=(0,me.P)({inputs:{real:O,imag:D},backend:s}),B=r.backend_util.exponents(n,a),P=[B.real.length],L=s.makeTensorInfo(P,"float32",B.real),V=s.makeTensorInfo(P,"float32",B.imag),z=(0,me.P)({inputs:{real:L,imag:V},backend:s}),W=(0,ut.Jp)({inputs:{a:z,b:M},backend:s}),U=(0,N.IH)({inputs:{a:_,b:W},backend:s}),G=(0,pt.lu)({inputs:{a:_,b:W},backend:s}),H=(0,ve.k)({inputs:{input:U},backend:s}),X=(0,ve.k)({inputs:{input:G},backend:s}),q=be({inputs:{input:U},backend:s}),j=be({inputs:{input:G},backend:s}),K=ke({inputs:[H,X],backend:s,attrs:{axis:0}}),Y=ke({inputs:[q,j],backend:s,attrs:{axis:0}}),Q=s.data.get(K.dataId).values,Z=s.data.get(Y.dataId).values;return s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(f),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(v),s.disposeIntermediateTensorInfo(k),s.disposeIntermediateTensorInfo(C),s.disposeIntermediateTensorInfo(E),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(O),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(M),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(X),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(K),s.disposeIntermediateTensorInfo(Y),{real:Q,imag:Z}}const gt={kernelName:r.FFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t,s=r.util.sizeFromShape(a.shape),o=a.shape[a.shape.length-1],i=T({inputs:{x:a},backend:n,attrs:{shape:[s/o,o]}}),u=ht(i,!1,n),l=T({inputs:{x:u},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),l}};function yt(e){const{backend:t,attrs:n}=e,{shape:a,value:s,dtype:o}=n,i=o||r.util.inferDtype(s),u=r.util.getArrayFromDType(i,r.util.sizeFromShape(a));return function(e,t,n){e.fill(t)}(u,s),t.makeTensorInfo(a,i,u)}const bt={kernelName:r.Fill,backendName:"cpu",kernelFunc:yt},xt={kernelName:r.FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,s=n,o=r.util.getTypedArrayFromDType(a.dtype,r.util.sizeFromShape(a.shape)),[i,u,l,c]=a.shape,d=s.data.get(a.dataId).values;for(let e=0;e<i;e++){const t=e*l*u*c;for(let e=0;e<u;e++){const n=e*(l*c);for(let r=0;r<l;r++){const a=r*c;for(let s=0;s<c;s++){const u=[i,e,r,s][2],p=Math.round(l-u),h=t+n+a+s;let f=d[h];p>=0&&p<l&&(f=d[t+n+p*c+s]),o[h]=f}}}}return{dataId:s.write(o,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}};var vt=n(6574);const kt=(0,m.b)(((e,t)=>Math.floor(e/t))),wt=(0,q.j)(r.FloorDiv,kt,null,"int32"),It={kernelName:r.FloorDiv,backendName:"cpu",kernelFunc:wt},Nt={kernelName:r.FusedConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:p,activation:h,leakyreluAlpha:f}=r;let m=Ie({inputs:{x:a,filter:s},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:p}});if(o){const e=m;m=(0,N.IH)({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(h){const e=m;m=I(n,m,h,i,f),n.disposeIntermediateTensorInfo(e)}return m}},Tt={kernelName:r.FusedDepthwiseConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:p,activation:h,leakyreluAlpha:f}=r;let m=Pe({inputs:{x:a,filter:s},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:p}});if(o){const e=m;m=(0,N.IH)({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(h){const e=m;m=I(n,m,h,i,f),n.disposeIntermediateTensorInfo(e)}return m}},St={kernelName:r.GatherNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:a,indices:s}=t,o=r.util.sizeFromShape(a.shape),i=s.shape,u=i[i.length-1],[l,c,d,p]=r.backend_util.prepareAndValidate(a,s);if(0===c)return n.makeTensorInfo(l,a.dtype,[]);const h=(0,r.buffer)([c,d],a.dtype),f=n.data.get(s.dataId).values,m=n.data.get(a.dataId).values;for(let e=0;e<c;e++){const t=[];let n=0;for(let r=0;r<u;r++){const a=f[e*u+r];n+=a*p[r],t.push(a)}if(n<0||n>=o/d)throw new Error(`Invalid indices: ${t} does not index into ${a.shape}`);for(let t=0;t<d;t++)h.values[e*d+t]=m[n*d+t]}return n.makeTensorInfo(l,h.dtype,h.values)}};var Ct=n(4468);const Et={kernelName:r.GatherV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,indices:i}=t,{axis:u,batchDims:l}=s;(0,a.H)([o,i],"gatherV2");let c=l;null==l&&(c=0);const d=r.util.sizeFromShape(i.shape),p=r.util.parseAxisParam(u,o.shape)[0],h=r.backend_util.segment_util.collectGatherOpShapeInfo(o,i,p,c),f=T({inputs:{x:o},backend:n,attrs:{shape:[h.batchSize,h.outerSize,h.dimSize,h.sliceSize]}}),m=T({inputs:{x:i},backend:n,attrs:{shape:[h.batchSize,d/h.batchSize]}}),g=[h.batchSize,h.outerSize,d/h.batchSize,h.sliceSize],y=n.bufferSync(m),b=n.bufferSync(f),x=(0,Ct.i)(b,y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(h.outputShape,x.dtype,x.values)}};var _t=n(6272);const $t=(0,m.b)(((e,t)=>e>=t?1:0)),At=(0,q.j)(r.GreaterEqual,$t,null,"bool"),Rt={kernelName:r.GreaterEqual,backendName:"cpu",kernelFunc:At},Ft={kernelName:r.IFFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t,s=r.util.sizeFromShape(a.shape),o=a.shape[a.shape.length-1],i=T({inputs:{x:a},backend:n,attrs:{shape:[s/o,o]}}),u=ht(i,!0,n),l=T({inputs:{x:u},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),l}},Ot=(0,l.A)(r.IsFinite,(e=>Number.isFinite(e)?1:0),"bool"),Dt={kernelName:r.IsFinite,backendName:"cpu",kernelFunc:Ot},Mt=(0,l.A)(r.IsInf,(e=>Math.abs(e)===1/0?1:0),"bool"),Bt={kernelName:r.IsInf,backendName:"cpu",kernelFunc:Mt},Pt=(0,l.A)(r.IsNan,(e=>Number.isNaN(e)?1:0),"bool"),Lt={kernelName:r.IsNan,backendName:"cpu",kernelFunc:Pt};var Vt=n(8405);const zt=(0,m.b)(((e,t)=>e<=t?1:0)),Wt=(0,q.j)(r.LessEqual,zt,null,"bool"),Ut={kernelName:r.LessEqual,backendName:"cpu",kernelFunc:Wt};var Gt=n(1325);const Ht={kernelName:r.LinSpace,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,o=(0,Gt.b)(r,a,s);return t.makeTensorInfo([o.length],"float32",o)}};var Xt=n(5223);const qt=(0,l.A)(r.Log1p,(e=>Math.log1p(e))),jt={kernelName:r.Log1p,backendName:"cpu",kernelFunc:qt},Kt=(0,m.b)(((e,t)=>e&&t)),Yt=(0,q.j)(r.LogicalAnd,Kt,null,"bool"),Qt={kernelName:r.LogicalAnd,backendName:"cpu",kernelFunc:Yt},Zt=(0,l.A)(r.LogicalNot,(e=>e?0:1),"bool"),Jt={kernelName:r.LogicalNot,backendName:"cpu",kernelFunc:Zt},en=(0,m.b)(((e,t)=>e||t)),tn=(0,q.j)(r.LogicalOr,en,null,"bool"),nn={kernelName:r.LogicalOr,backendName:"cpu",kernelFunc:tn},rn={kernelName:r.LRN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=s;(0,a.H)(o,"LRN");const d=o.shape[3],p=d-1,h=n.data.get(o.dataId).values,f=r.util.sizeFromShape(o.shape),m=new Float32Array(f);function g(e){const t=e%d;let n=e-t+Math.max(0,t-i);const r=e-t+Math.min(t+i,p);let a=0;for(;n<=r;n++){const e=h[n];a+=e*e}return a}for(let e=0;e<f;e++){const t=g(e),n=h[e]*Math.pow(u+l*t,-c);m[e]=n}return n.makeTensorInfo(o.shape,o.dtype,m)}},an={kernelName:r.LRNGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,y:i,dy:u}=t,{depthRadius:l,bias:c,alpha:d,beta:p}=s;(0,a.H)(u,"LRNGrad");const h=r.util.sizeFromShape(u.shape),f=u.shape[3],m=n.data.get(u.dataId).values,g=n.data.get(o.dataId).values,y=n.data.get(i.dataId).values,b=new Float32Array(h),x=h;for(let e=0;e<x;e++){const t=e%f,n=e-t+Math.max(0,t-l),r=e-t+Math.min(f,t+l+1);let a=0;for(let e=n;e<r;e++)a+=Math.pow(g[e],2);a=d*a+c;for(let t=n;t<r;t++){let n=-2*d*p*g[t]*y[e]/a;e===t&&(n+=Math.pow(a,-p)),n*=m[e],b[t]+=n}}return n.makeTensorInfo(u.shape,o.dtype,b)}};var sn=n(5126),on=n(7107);function un(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{reductionIndices:i,keepDims:u}=s,l=n;let c=o.shape;const d=c.length,p=r.util.parseAxisParam(i,c);let h=p;const f=r.backend_util.getAxesPermutation(h,d);let m=l.data.get(o.dataId).values;if(null!=f){const e=new Array(d);for(let t=0;t<e.length;t++)e[t]=c[f[t]];m=(0,on.H)(m,c,o.dtype,f,e),h=r.backend_util.getInnerMostAxes(h.length,d),c=e}(0,a.H)(o,"max"),r.backend_util.assertAxesAreInnerMostDims("max",h,d);const[g,y]=r.backend_util.computeOutAndReduceShapes(c,h),b=r.util.sizeFromShape(y),x=(0,sn.B)(m,b,g,o.dtype),v=l.write(x,g,o.dtype);let k=g;return u&&(k=r.backend_util.expandShapeToKeepDim(g,p)),{dataId:v,shape:k,dtype:o.dtype}}const ln={kernelName:r.Max,backendName:"cpu",kernelFunc:un};var cn=n(1717);const dn={kernelName:r.MaxPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t;(0,a.H)(o,"maxPool");const{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=s;r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(u,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${u} and dilations '1'`));const d=r.backend_util.computePool2DInfo(o.shape,i,u,1,l,c);let h;if(1===d.filterWidth&&1===d.filterHeight&&r.util.arraysEqual(d.inShape,d.outShape))h=(0,p.y)({inputs:{x:o},backend:n});else{const e=n.data.get(o.dataId).values,t=r.util.computeStrides(o.shape),a=J(e,o.shape,o.dtype,t,d,"max");h=n.makeTensorInfo(d.outShape,o.dtype,a.values)}return h}},pn={kernelName:r.MaxPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{filterSize:i,strides:u,pad:l,dimRoundingMode:c,dataFormat:d}=s;(0,a.H)(o,"maxPool3d");const p=r.backend_util.computePool3DInfo(o.shape,i,u,1,l,c,d),h=te(n.data.get(o.dataId).values,o.shape,o.dtype,r.util.computeStrides(o.shape),p,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}},hn={kernelName:r.MaxPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,input:i}=t,{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=s;(0,a.H)([o,i],"maxPool3DGrad");const p=r.backend_util.computePool3DInfo(i.shape,u,l,1,c,d),h=function(e,t){const n=(0,r.buffer)(t.outShape,"int32"),a=t.strideDepth,s=t.strideHeight,o=t.strideWidth,i=t.dilationDepth,u=t.dilationHeight,l=t.dilationWidth,c=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth,h=t.padInfo.front,f=t.padInfo.top,m=t.padInfo.left;for(let r=0;r<t.batchSize;++r)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*a-h;let x=b;for(;x<0;)x+=i;const v=Math.min(t.inDepth,c+b);for(let a=0;a<t.outHeight;++a){const c=a*s-f;let h=c;for(;h<0;)h+=u;const k=Math.min(t.inHeight,d+c);for(let s=0;s<t.outWidth;++s){const f=s*o-m;let w=f;for(;w<0;)w+=l;const I=Math.min(t.inWidth,p+f);let N=Number.NEGATIVE_INFINITY,T=-1;for(let t=x;t<v;t+=i){const n=t-b;for(let a=h;a<k;a+=u){const s=a-c;for(let o=w;o<I;o+=l){const i=o-f,u=e.get(r,t,a,o,g);u>=N&&(N=u,T=n*d*p+s*d+i)}}}n.set(T,r,y,a,s,g)}}}return n}(n.bufferSync(i),p),f=p.strideDepth,m=p.strideHeight,g=p.strideWidth,y=p.dilationDepth,b=p.dilationHeight,x=p.dilationWidth,v=p.effectiveFilterDepth,k=p.effectiveFilterHeight,w=p.effectiveFilterWidth,I=v-1-p.padInfo.front,N=w-1-p.padInfo.left,T=k-1-p.padInfo.top,S=(0,r.buffer)(i.shape,"float32"),C=n.bufferSync(o);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inDepth;++n)for(let r=0;r<p.inHeight;++r)for(let a=0;a<p.inWidth;++a){const s=n-I,o=r-T,i=a-N;let u=0;for(let n=0;n<v;n+=y){const r=(s+n)/f;if(!(r<0||r>=p.outDepth||Math.floor(r)!==r))for(let a=0;a<k;a+=b){const s=(o+a)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let o=0;o<w;o+=x){const l=(i+o)/g;if(l<0||l>=p.outWidth||Math.floor(l)!==l)continue;const c=v*k*w-1-h.get(e,r,s,l,t)===n*k*w+a*w+o?1:0;0!==c&&(u+=C.get(e,r,s,l,t)*c)}}}S.set(u,e,n,r,a,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}},fn={kernelName:r.MaxPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,input:i,output:u}=t,l=i;(0,a.H)([i,u],"maxPoolGrad");const{filterSize:c,strides:d,pad:p,dimRoundingMode:h}=s,f=r.backend_util.computePool2DInfo(l.shape,c,d,1,p,h),m=n.data.get(l.dataId).values,g=(0,r.buffer)(f.outShape,l.dtype,ee(m,l.shape,l.dtype,f).values),y=f.strideHeight,b=f.strideWidth,x=f.dilationHeight,v=f.dilationWidth,k=f.effectiveFilterHeight,w=f.effectiveFilterWidth,I=w-1-f.padInfo.left,N=k-1-f.padInfo.top,T=(0,r.buffer)(l.shape,"float32"),S=n.data.get(o.dataId).values,C=(0,r.buffer)(o.shape,"float32",S);for(let e=0;e<f.batchSize;++e)for(let t=0;t<f.inChannels;++t)for(let n=0;n<f.inHeight;++n)for(let r=0;r<f.inWidth;++r){const a=n-N,s=r-I;let o=0;for(let n=0;n<k;n+=x){const r=(a+n)/y;if(!(r<0||r>=f.outHeight||Math.floor(r)!==r))for(let a=0;a<w;a+=v){const i=(s+a)/b;if(i<0||i>=f.outWidth||Math.floor(i)!==i)continue;const u=k*w-1-g.get(e,r,i,t)===n*w+a?1:0;0!==u&&(o+=C.get(e,r,i,t)*u)}}T.set(o,e,n,r,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}},mn={kernelName:r.MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:o,strides:i,pad:u,includeBatchInIndex:l}=t,c=n;(0,a.H)(s,"MaxPoolWithArgmax");const d=c.data.get(s.dataId).values,p=r.backend_util.computePool2DInfo(s.shape,o,i,[1,1],u),[h,f]=function(e,t,n,a,s){const o=J(e,0,n,r.util.computeStrides(t),s,"max"),i=ee(e,t,n,s,!0,a);return[o.values,i.values]}(d,s.shape,s.dtype,l,p),m=c.write(h,p.outShape,s.dtype),g=c.write(f,p.outShape,s.dtype);return[{dataId:m,shape:p.outShape,dtype:s.dtype},{dataId:g,shape:p.outShape,dtype:"int32"}]}};var gn=n(4391);function yn(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,keepDims:u}=s;let l;(0,a.H)(o,"sum"),l="bool"===o.dtype?(0,de.p)({inputs:{x:o},backend:n,attrs:{dtype:"int32"}}):(0,p.y)({inputs:{x:o},backend:n});const c=l.shape.length,d=r.util.parseAxisParam(i,l.shape),h=r.backend_util.getAxesPermutation(d,c);let f=d,m=l;null!=h&&(m=(0,M.p)({inputs:{x:l},backend:n,attrs:{perm:h}}),f=r.backend_util.getInnerMostAxes(f.length,c)),r.backend_util.assertAxesAreInnerMostDims("sum",f,m.shape.length);const[g,y]=r.backend_util.computeOutAndReduceShapes(m.shape,f),b=r.backend_util.upcastType(m.dtype,"int32");let x=(0,gn.l)(n,g,b);const v=r.util.sizeFromShape(y),k=n.data.get(x.dataId).values,w=n.data.get(m.dataId).values;for(let e=0;e<k.length;++e){const t=e*v;let n=0;for(let e=0;e<v;++e)n+=w[t+e];k[e]=n}if(u){const e=x;x=T({inputs:{x},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(x.shape,d)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(l),null!=h&&n.disposeIntermediateTensorInfo(m),x}const bn={kernelName:r.Sum,backendName:"cpu",kernelFunc:yn},xn={kernelName:r.Mean,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{axis:o,keepDims:i}=a,u=r.util.parseAxisParam(o,s.shape),l=r.backend_util.computeOutAndReduceShapes(s.shape,u)[1],c=r.util.sizeFromShape(l),d=[],p=n.makeTensorInfo([],"float32",new Float32Array([c]));d.push(p);const h=(0,de.p)({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});d.push(h);const f=ct({inputs:{a:h,b:p},backend:n});d.push(f);const m=yn({inputs:{x:f},backend:n,attrs:{axis:o,keepDims:i}});return d.forEach((e=>n.disposeIntermediateTensorInfo(e))),m}},vn={kernelName:r.Min,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,keepDims:u}=s;(0,a.H)(o,"min");const l=r.util.parseAxisParam(i,o.shape);let c=l;const d=r.backend_util.getAxesPermutation(c,o.shape.length);let p=o;null!=d&&(p=(0,M.p)({inputs:{x:o},backend:n,attrs:{perm:d}}),c=r.backend_util.getInnerMostAxes(c.length,o.shape.length)),r.backend_util.assertAxesAreInnerMostDims("min",c,p.shape.length);const[h,f]=r.backend_util.computeOutAndReduceShapes(p.shape,c),m=r.util.sizeFromShape(f),g=r.util.makeZerosTypedArray(r.util.sizeFromShape(h),p.dtype),y=n.data.get(p.dataId).values;for(let e=0;e<g.length;++e){const t=e*m;let n=y[t];for(let e=0;e<m;++e){const r=y[t+e];r<n&&(n=r)}g[e]=n}null!=d&&n.disposeIntermediateTensorInfo(p);const b=n.makeTensorInfo(h,p.dtype,g);if(u){const e=T({inputs:{x:b},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(h,l)}});return n.disposeIntermediateTensorInfo(b),e}return b}};var kn=n(612);const wn={kernelName:r.MirrorPad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{paddings:i,mode:u}=s;(0,a.H)(o,"mirrorPad");const l=i.map(((e,t)=>e[0]+o.shape[t]+e[1])),c=i.map((e=>e[0])),d=i.map(((e,t)=>e[0]+o.shape[t])),p="reflect"===u?0:1,h=n.data.get(o.dataId).values,f=o.shape.length,m=r.util.computeStrides(o.shape),g=r.util.sizeFromShape(l),y=l.length,b=r.util.computeStrides(l),x=r.util.getTypedArrayFromDType(o.dtype,g);for(let e=0;e<g;e++){let t=r.util.indexToLoc(e,y,b);for(let e=0;e<y;e++)t[e]<c[e]?t[e]=2*c[e]-t[e]-p:t[e]>=d[e]&&(t[e]=2*(d[e]-1)-t[e]+p);t=t.map(((e,t)=>e-c[t]));const n=r.util.locToIndex(t,f,m);x[e]=h[n]}return{dataId:n.write(x,l,o.dtype),shape:l,dtype:o.dtype}}},In=(0,m.b)(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),Nn=(0,q.j)(r.Mod,In),Tn={kernelName:r.Mod,backendName:"cpu",kernelFunc:Nn};var Sn=n(6377);function Cn(e){const{inputs:t,backend:n,attrs:a}=e,{logits:s}=t,{dim:o}=a,i=s.shape.length;let u=o;if(-1===u&&(u=i-1),u!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${u}`);const l=r.util.parseAxisParam([u],s.shape),c=un({inputs:{x:s},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),d=r.backend_util.expandShapeToKeepDim(c.shape,l),p=T({inputs:{x:c},backend:n,attrs:{shape:d}}),h=(0,pt.lu)({inputs:{a:s,b:p},backend:n}),f=(0,at.Qq)({inputs:{x:h},backend:n}),m=yn({inputs:{x:f},backend:n,attrs:{axis:l,keepDims:!1}}),g=T({inputs:{x:m},backend:n,attrs:{shape:d}}),y=ct({inputs:{a:f,b:g},backend:n});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}const En={kernelName:r.Softmax,backendName:"cpu",kernelFunc:Cn},_n={kernelName:r.Multinomial,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:o}=t,{numSamples:i,seed:u,normalized:l}=s;(0,a.H)(o,"multinomial");const c=l?o:Cn({inputs:{logits:o},backend:n,attrs:{dim:-1}}),d=c.shape[0],p=c.shape[1],h=n.data.get(c.dataId).values,f=[d,i],m=r.util.makeZerosTypedArray(r.util.sizeFromShape(f),"int32");for(let e=0;e<d;++e){const t=e*p,n=new Float32Array(p-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const r=Sn.alea(u.toString()),a=e*i;for(let e=0;e<i;++e){const t=r();m[a+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){m[a+e]=r;break}}}return l||n.disposeIntermediateTensorInfo(c),n.makeTensorInfo(f,"int32",m)}};var $n=n(854);const An=r.kernel_impls.nonMaxSuppressionV3Impl,Rn={kernelName:r.NonMaxSuppressionV3,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l}=r;(0,a.H)(s,"NonMaxSuppression");const c=n.data.get(s.dataId).values,d=n.data.get(o.dataId).values,{selectedIndices:p}=An(c,d,i,u,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},Fn=r.kernel_impls.nonMaxSuppressionV4Impl,On={kernelName:r.NonMaxSuppressionV4,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,padToMaxOutputSize:c}=r;(0,a.H)(s,"NonMaxSuppressionPadded");const d=n.data.get(s.dataId).values,p=n.data.get(o.dataId).values,{selectedIndices:h,validOutputs:f}=Fn(d,p,i,u,l,c);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},Dn=r.kernel_impls.nonMaxSuppressionV5Impl,Mn={kernelName:r.NonMaxSuppressionV5,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,softNmsSigma:c}=r;(0,a.H)(s,"NonMaxSuppressionWithScore");const d=n.data.get(s.dataId).values,p=n.data.get(o.dataId).values,h=i,f=u,m=l,g=c,{selectedIndices:y,selectedScores:b}=Dn(d,p,h,f,m,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};var Bn=n(8584);const Pn={kernelName:r.OneHot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:o}=t,{depth:i,onValue:u,offValue:l}=s;(0,a.H)(o,"oneHot");const c=r.util.sizeFromShape(o.shape),d=new Float32Array(c*i);d.fill(l);const p=n.data.get(o.dataId).values;for(let e=0;e<c;++e)p[e]>=0&&p[e]<i&&(d[e*i+p[e]]=u);return n.makeTensorInfo([...o.shape,i],"int32",d)}};function Ln(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=(0,ve.k)({inputs:{input:r},backend:n}),t=Ln({inputs:{x:e},backend:n}),a=be({inputs:{input:r},backend:n}),s=Ln({inputs:{x:a},backend:n}),o=(0,me.P)({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}return yt({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const Vn={kernelName:r.ZerosLike,backendName:"cpu",kernelFunc:Ln},zn={kernelName:r.OnesLike,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===a.dtype){const t=(0,ve.k)({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r}),s=be({inputs:{input:a},backend:r}),o=Ln({inputs:{x:s},backend:r}),i=(0,me.P)({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),i}return yt({backend:r,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function Wn(e){const{inputs:t,backend:n,attrs:a}=e,{axis:s}=a;if(1===t.length)return st({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const o=t[0].shape,i=t[0].dtype;t.forEach((e=>{r.util.assertShapesMatch(o,e.shape,"All tensors passed to stack must have matching shapes"),r.util.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],l=ke({inputs:t.map((e=>{const t=st({inputs:{input:e},backend:n,attrs:{dim:s}});return u.push(t),t})),backend:n,attrs:{axis:s}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const Un={kernelName:r.Pack,backendName:"cpu",kernelFunc:Wn},Gn={kernelName:r.PadV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{paddings:i,constantValue:u}=s;(0,a.H)(o,"pad");const l=i.map(((e,t)=>e[0]+o.shape[t]+e[1])),c=i.map((e=>e[0])),d=n.data.get(o.dataId).values,p=r.util.sizeFromShape(o.shape),h=o.shape.length,f=r.util.computeStrides(o.shape),m=r.util.sizeFromShape(l),g=l.length,y=r.util.computeStrides(l),b=r.util.getTypedArrayFromDType(o.dtype,m);0!==u&&b.fill(u);for(let e=0;e<p;e++){const t=r.util.indexToLoc(e,h,f).map(((e,t)=>e+c[t]));b[r.util.locToIndex(t,g,y)]=d[e]}return{dataId:n.write(b,l,o.dtype),shape:l,dtype:o.dtype}}},Hn=(0,m.b)(((e,t)=>Math.pow(e,t))),Xn=(0,q.j)(r.Pow,Hn),qn={kernelName:r.Pow,backendName:"cpu",kernelFunc:Xn};var jn=n(9560),Kn=n(9230);const Yn={kernelName:r.Range,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:a,dtype:s,step:o}=n,i=(0,Kn.b)(r,a,o,s);return t.makeTensorInfo([i.length],s,i)}},Qn=(0,l.A)(r.Reciprocal,(e=>1/e)),Zn={kernelName:r.Reciprocal,backendName:"cpu",kernelFunc:Qn},Jn={kernelName:r.ResizeBilinear,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:o}=t,{alignCorners:i,halfPixelCenters:u,size:l}=s;(0,a.H)(o,"resizeBilinear");const c=r.util.computeStrides(o.shape),[d,p]=l,[h,f,m,g]=o.shape,y=n.data.get(o.dataId).values,b=new Float32Array(r.util.sizeFromShape([h,d,p,g])),x=[i&&d>1?f-1:f,i&&p>1?m-1:m],v=[i&&d>1?d-1:d,i&&p>1?p-1:p];let k=0;const w=x[0]/v[0],I=x[1]/v[1];for(let e=0;e<h;e++)for(let t=0;t<d;t++){let n;n=u?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),a=n-r,s=Math.min(f-1,Math.ceil(n)),o=e*c[0]+r*c[1],i=e*c[0]+s*c[1];for(let e=0;e<p;e++){let t;t=u?I*(e+.5)-.5:I*e;const n=Math.max(0,Math.floor(t)),r=t-n,s=Math.min(m-1,Math.ceil(t)),l=o+n*c[2],d=i+n*c[2],p=o+s*c[2],h=i+s*c[2];for(let e=0;e<g;e++){const t=y[l+e],n=y[d+e],s=t+(y[p+e]-t)*r,o=s+(n+(y[h+e]-n)*r-s)*a;b[k++]=o}}}return n.makeTensorInfo([h,d,p,g],"float32",b)}},er={kernelName:r.ResizeBilinearGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:o,dy:i}=t,{alignCorners:u}=s;(0,a.H)([i,o],"resizeBilinearGrad");const l=r.util.computeStrides(o.shape),[c,d,p,h]=o.shape,[,f,m]=i.shape,g=new Float32Array(c*d*p*h),y=[u&&f>1?d-1:d,u&&m>1?p-1:p],b=[u&&f>1?f-1:f,u&&m>1?m-1:m],x=y[0]/b[0],v=y[1]/b[1],k=n.data.get(i.dataId).values;let w=0;for(let e=0;e<c;e++){const t=e*l[0];for(let e=0;e<f;e++){const n=e*x,r=Math.floor(n),a=Math.min(Math.ceil(n),d-1),s=t+r*l[1],o=t+a*l[1],i=n-r,u=1-i;for(let e=0;e<m;e++){const t=e*v,n=Math.floor(t),r=Math.min(Math.ceil(t),p-1),a=t-n,c=1-a,d=s+n*l[2],f=s+r*l[2],m=o+n*l[2],y=o+r*l[2],b=u*c,x=u*a,I=i*c,N=i*a;for(let e=0;e<h;e++){const t=k[w++];g[d+e]+=t*b,g[f+e]+=t*x,g[m+e]+=t*I,g[y+e]+=t*N}}}}return n.makeTensorInfo([c,p,d,h],"float32",g)}},tr={kernelName:r.ResizeNearestNeighbor,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:o}=t,{alignCorners:i,halfPixelCenters:u,size:l}=s;(0,a.H)(o,"resizeNearestNeighbor");const c=r.util.computeStrides(o.shape),[d,p]=l,[h,f,m,g]=o.shape,y=n.data.get(o.dataId).values,b=new Float32Array(h*d*p*g),x=[i&&d>1?f-1:f,i&&p>1?m-1:m],v=[i&&d>1?d-1:d,i&&p>1?p-1:p],k=x[0]/v[0],w=x[1]/v[1];let I=0;for(let e=0;e<h;e++){const t=e*c[0];for(let e=0;e<d;e++){const n=u?k*(e+.5):k*e;let r=Math.min(f-1,i?Math.round(n):Math.floor(n));u&&(r=Math.max(0,r));const a=t+r*c[1];for(let e=0;e<p;e++){const t=u?w*(e+.5):w*e;let n=Math.min(m-1,i?Math.round(t):Math.floor(t));u&&(n=Math.max(0,n));const r=a+n*c[2];for(let e=0;e<g;e++){const t=y[r+e];b[I++]=t}}}}return n.makeTensorInfo([h,d,p,g],o.dtype,b)}},nr={kernelName:r.ResizeNearestNeighborGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:o,dy:i}=t,{alignCorners:u}=s;(0,a.H)([i,o],"resizeNearestNeighborGrad");const l=r.util.computeStrides(o.shape),c=r.util.computeStrides(i.shape),[d,p,h,f]=o.shape,[,m,g]=i.shape,y=new Float32Array(d*p*h*f),b=n.data.get(i.dataId).values,x=[u&&m>1?p-1:p,u&&g>1?h-1:h],v=[u&&m>1?m-1:m,u&&g>1?g-1:g],k=x[0]/v[0],w=x[1]/v[1],I=1/k,N=1/w,T=2*Math.ceil(I)+2,S=2*Math.ceil(N)+2;for(let e=0;e<d;e++){const t=e*l[0];for(let e=0;e<p;e++){const n=t+e*l[1],r=Math.floor(e*I),a=Math.floor(r-T/2);for(let r=0;r<h;r++){const s=n+r*l[2],o=Math.floor(r*N),i=Math.floor(o-S/2);for(let n=0;n<f;n++){let o=0;for(let s=0;s<T;s++){const l=s+a;if(l<0||l>=m)continue;const d=t+l*c[1],f=l*k;if(e===Math.min(p-1,u?Math.round(f):Math.floor(f)))for(let e=0;e<S;e++){const t=e+i;if(t<0||t>=g)continue;const a=d+t*c[2],s=t*w;r===Math.min(h-1,u?Math.round(s):Math.floor(s))&&(o+=b[a+n])}}y[s+n]=o}}}}return n.makeTensorInfo(o.shape,o.dtype,y)}},rr={kernelName:r.Reverse,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{dims:i}=s;(0,a.H)(o,"reverse");const u=o.shape.length,l=r.util.parseAxisParam(i,o.shape);if(0===u)return(0,p.y)({inputs:{x:o},backend:n});const c=new r.TensorBuffer(o.shape,o.dtype),d=n.bufferSync(o);for(let e=0;e<c.size;e++){const t=c.indexToLoc(e),n=t.slice();l.forEach((e=>n[e]=o.shape[e]-1-n[e])),c.set(d.get(...n),...t)}return n.makeTensorInfo(c.shape,c.dtype,c.values)}},ar={kernelName:r.RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,{radians:s,fillValue:o,center:i}=t,u=n,l=r.util.getTypedArrayFromDType(a.dtype,r.util.sizeFromShape(a.shape)),[c,d,p,h]=a.shape,[f,m]=r.backend_util.getImageCenter(i,d,p),g=Math.sin(s),y=Math.cos(s),b=u.data.get(a.dataId).values;for(let e=0;e<c;e++){const t=e*p*d*h;for(let e=0;e<d;e++){const n=e*(p*h);for(let r=0;r<p;r++){const a=r*h;for(let s=0;s<h;s++){const i=[c,e,r,s],u=i[2],x=i[1];let v=(u-f)*y-(x-m)*g,k=(u-f)*g+(x-m)*y;v=Math.round(v+f),k=Math.round(k+m);let w=o;"number"!=typeof o&&(w=3===s?255:o[s]),v>=0&&v<p&&k>=0&&k<d&&(w=b[t+k*(p*h)+v*h+s]),l[t+n+a+s]=w}}}}return{dataId:u.write(l,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},sr=(0,l.A)(r.Round,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),or={kernelName:r.Round,backendName:"cpu",kernelFunc:sr};var ir=n(7742);function ur(e,t,n,a,s,o,i,u,l,c){const d=[a/s,s],p=e.values,h=t.values;if(0===a)return(0,r.buffer)(n,t.dtype);const f=(0,r.buffer)(d,t.dtype);f.values.fill(l);for(let e=0;e<o;e++){const r=[];let o=0;for(let t=0;t<i;t++){const n=p[e*i+t];r.push(n),o+=n*u[t]}if(o<0||o>=a/s)throw new Error(`Invalid indices: ${r} does not index into ${n}`);for(let n=0;n<s;n++)c?f.values[o*s+n]+=h[e*s+n]:f.values[o*s+n]=0===t.rank?h[0]:h[e*s+n]}return f}const lr={kernelName:r.ScatterNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{indices:s,updates:o}=t,{shape:i}=a,{sliceRank:u,numUpdates:l,sliceSize:c,strides:d,outputSize:p}=r.backend_util.calculateShapes(o,s,i),h=ur(n.bufferSync(s),n.bufferSync(o),i,p,c,l,u,d,0,!0);return n.makeTensorInfo(i,h.dtype,h.values)}},cr={kernelName:r.Select,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:o,e:i}=t;(0,a.H)([s,o,i],"select");const u=s.shape.length,l=n.data.get(s.dataId).values,c=n.data.get(o.dataId).values,d=n.data.get(i.dataId).values,p=(0,r.upcastType)(o.dtype,i.dtype),h=r.util.makeZerosTypedArray(r.util.sizeFromShape(o.shape),p);let f=0;const m=0===u||u>1||1===o.shape.length?1:r.util.sizeFromShape(o.shape.slice(1));for(let e=0;e<l.length;e++)for(let t=0;t<m;t++)1===l[e]?h[f++]=c[e]:h[f++]=d[e];return n.makeTensorInfo(o.shape,p,h)}},dr=r.backend_util.SELU_SCALEALPHA,pr=r.backend_util.SELU_SCALE,hr=(0,l.A)(r.Selu,(e=>e>=0?pr*e:dr*(Math.exp(e)-1))),fr={kernelName:r.Selu,backendName:"cpu",kernelFunc:hr},mr=(0,l.A)(r.Sigmoid,(e=>1/(1+Math.exp(-e)))),gr={kernelName:r.Sigmoid,backendName:"cpu",kernelFunc:mr},yr=(0,l.A)(r.Sign,(e=>e<0?-1:e>0?1:0)),br={kernelName:r.Sign,backendName:"cpu",kernelFunc:yr},xr=(0,l.A)(r.Sin,(e=>Math.sin(e))),vr={kernelName:r.Sin,backendName:"cpu",kernelFunc:xr},kr=(0,l.A)(r.Sinh,(e=>Math.sinh(e))),wr={kernelName:r.Sinh,backendName:"cpu",kernelFunc:kr},Ir=Math.log(1.1920928955078125e-7)+2,Nr=(0,l.A)(r.Softplus,(e=>{const t=e>-Ir,n=e<Ir,r=Math.exp(e);let a;return a=n?r:t?e:Math.log(1+r),a})),Tr={kernelName:r.Softplus,backendName:"cpu",kernelFunc:Nr},Sr={kernelName:r.SpaceToBatchND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{blockShape:i,paddings:u}=s;(0,a.H)([o],"spaceToBatchND");const l=r.util.sizeFromShape(i),c=[[0,0]];c.push(...u);for(let e=1+i.length;e<o.shape.length;++e)c.push([0,0]);const d=Gn.kernelFunc({inputs:{x:o},backend:n,attrs:{paddings:c,constantValue:0}}),p=r.backend_util.getReshaped(d.shape,i,l,!1),h=r.backend_util.getPermuted(p.length,i.length,!1),f=r.backend_util.getReshapedPermuted(d.shape,i,l,!1),m=T({inputs:{x:d},backend:n,attrs:{shape:p}}),g={x:m},y={perm:h},b=(0,M.p)({inputs:g,backend:n,attrs:y}),x=T({inputs:{x:b},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),x}},Cr={kernelName:r.SparseToDense,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sparseIndices:s,sparseValues:o,defaultValue:i}=t,{outputShape:u}=a,{sliceRank:l,numUpdates:c,sliceSize:d,strides:p,outputSize:h}=r.backend_util.calculateShapes(o,s,u),f=ur(n.bufferSync(s),n.bufferSync(o),u,h,d,c,l,p,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(u,f.dtype,f.values)}},Er={kernelName:r.SplitV,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{numOrSizeSplits:o,axis:i}=a,u=r.util.parseAxisParam(i,s.shape)[0],l=r.backend_util.prepareSplitSize(s,o,u),c=new Array(s.shape.length).fill(0),d=s.shape.slice();return l.map((e=>{const t=[...d];t[u]=e;const r=(0,ie.tP)({inputs:{x:s},backend:n,attrs:{begin:c,size:t}});return c[u]+=e,r}))}},_r=(0,l.A)(r.Sqrt,(e=>Math.sqrt(e))),$r={kernelName:r.Sqrt,backendName:"cpu",kernelFunc:_r},Ar={kernelName:r.Square,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;(0,a.H)(n,"square");const s=r.data.get(n.dataId).values,o=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];o[e]=t*t}return{dataId:r.write(o,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var Rr=n(212);const Fr=(0,l.A)(r.Step,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),Or={kernelName:r.Step,backendName:"cpu",kernelFunc:Fr};var Dr=n(2210);const Mr={kernelName:r.StridedSlice,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{begin:i,end:u,strides:l,beginMask:c,endMask:d,ellipsisMask:p,newAxisMask:h,shrinkAxisMask:f}=s;(0,a.H)(o,"stridedSlice");const{nonStrided:m,$begin:g,$strides:y,size:b,newShape:x,outShape:v}=r.slice_util.sliceInfo(o.shape,i,u,l,c,d,p,h,f),k=T({inputs:{x:o},backend:n,attrs:{shape:x}});let w;if(m){const e=(0,ie.tP)({inputs:{x:k},backend:n,attrs:{begin:g,size:b}});w=T({inputs:{x:e},backend:n,attrs:{shape:v}}),n.disposeIntermediateTensorInfo(e)}else if(v.some((e=>0===e)))w=n.makeTensorInfo(v,o.dtype,[]);else{const e=n.bufferSync(k),t=(0,Dr.t)(v,e,y,g);w=n.makeTensorInfo(t.shape,t.dtype,t.values)}const I=T({inputs:{x:w},backend:n,attrs:{shape:v}});return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(w),I}},Br=(0,l.A)(r.Tan,(e=>Math.tan(e))),Pr={kernelName:r.Tan,backendName:"cpu",kernelFunc:Br},Lr=(0,l.A)(r.Tanh,(e=>Math.tanh(e))),Vr={kernelName:r.Tanh,backendName:"cpu",kernelFunc:Lr};var zr=n(7723);const Wr={kernelName:r.Tile,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:o}=r;(0,a.H)(s,"tile");const i=(0,zr.R)(n.bufferSync(s),o);return n.makeTensorInfo(i.shape,i.dtype,i.values)}};var Ur=n(9556);const Gr={kernelName:r.TopK,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:o,sorted:i}=r;(0,a.H)(s,"topk");const u=n.data.get(s.dataId).values,[l,c]=(0,Ur.W)(u,s.shape,s.dtype,o,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(c.shape,c.dtype,c.values)]}};var Hr=n(5638);const Xr={kernelName:r.Unique,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:o}=t;(0,a.H)(o,"unique");const i=r.data.get(o.dataId).values,{outputValues:u,outputShape:l,indices:c}=(0,Hr.S)(i,s,o.shape,o.dtype);return[r.makeTensorInfo(l,o.dtype,u),r.makeTensorInfo([c.length],"int32",c)]}},qr={kernelName:r.Unpack,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:a}=t;let{axis:s}=r;s<0&&(s+=a.shape.length);const o=a.shape.length,i=a.shape[s],u=new Array(o-1);let l=0;for(let e=0;e<o;e++)e!==s&&(u[l++]=a.shape[e]);const c=new Array(o).fill(0),d=a.shape.slice();d[s]=1;const p=new Array(i);for(let e=0;e<p.length;e++){c[s]=e;const t=(0,ie.tP)({inputs:{x:a},backend:n,attrs:{begin:c,size:d}});p[e]=T({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return p}},jr={kernelName:r.UnsortedSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,segmentIds:i}=t,{numSegments:u}=s;(0,a.H)(o,"unsortedSegmentSum");const l=[],c=[],d=o.shape.length-i.shape.length;let p=i;for(let e=0;e<d;++e){const t=st({inputs:{input:p},backend:n,attrs:{dim:e+1}});p=t,c.push(t)}for(let e=0;e<u;++e){const t=r.util.createScalarValue(e,"int32"),a=n.makeTensorInfo([],"int32",t),s=je({inputs:{a,b:p},backend:n}),i=(0,de.p)({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),u=(0,ut.Jp)({inputs:{a:i,b:o},backend:n}),d=yn({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});l.push(d),c.push(a),c.push(s),c.push(i),c.push(u),c.push(d)}const h=Wn({inputs:l,backend:n,attrs:{axis:0}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},Kr=[_,$.fC,R,O,N.j4,D,B,P,L,V,W,G,X,Y,Z,ne,re,ae,se,E,oe,ue,ce,de.M,pe.y2,fe,me.z,ge,we,Te,Se,Ne,Ee,_e,Ce,Ae,Fe,Oe,De,Me,Be,Le,Ve,ze,We,Ue,He,Ge,dt,d,Xe,Ke,rt,at.SX,ot,it.Vu,gt,bt,xt,vt.Ao,It,Nt,Tt,St,Et,_t.Ce,Rt,p.I,Ft,xe,Dt,Bt,Lt,f,Vt.zh,Ut,Ht,Xt.xM,jt,Qt,Jt,nn,rn,an,cn.eJ,dn,pn,hn,fn,mn,ln,xn,vn,kn.u0,wn,Tn,_n,ut.f$,$n.AF,Rn,On,Mn,Bn.nP,Pn,zn,Un,Gn,qn,b,jn.Iz,Yn,ve.O,Zn,v,w,S,Jn,er,tr,nr,rr,ar,or,ir.FY,lr,cr,fr,gr,br,vr,wr,ie.C6,En,Tr,Sr,Cr,Er,$r,Ar,Rr.MS,Or,Mr,pt.GR,bn,Pr,Vr,Wr,Gr,M.b,Xr,qr,jr,Vn];for(const e of Kr)(0,r.registerKernel)(e)},224:(e,t,n)=>{"use strict";n.d(t,{bk:()=>s,fC:()=>o});var r=n(9972),a=n(8166);function s(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const o={kernelName:r.Abs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;(0,a.H)(t,"abs");let o=new Float32Array(r.util.sizeFromShape(t.shape));return o=s(n.data.get(t.dataId).values),n.makeOutput(o,t.shape,"float32")}}},2779:(e,t,n)=>{"use strict";n.d(t,{EH:()=>o,IH:()=>u,j4:()=>l});var r=n(9972),a=n(3533),s=n(6205);const o=(0,a.b)(((e,t)=>e+t)),i=(0,s.H)(((e,t,n,r)=>({real:e+n,imag:t+r}))),u=(0,s.j)(r.Add,o,i),l={kernelName:r.Add,backendName:"cpu",kernelFunc:u}},8607:(e,t,n)=>{"use strict";n.d(t,{W:()=>a,i:()=>s});var r=n(9972);function a(e,t,n,a,s){const o=r.util.sizeFromShape(a),i=r.util.makeZerosTypedArray(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(i[r]+=o>0?t[n]:1)}return i}function s(e,t,n,a=!1){const s=e.shape[0],o=e.shape[1],i=(0,r.buffer)([s,n],t.dtype);for(let r=0;r<s;r++)for(let s=0;s<o;s++){const o=e.get(r,s);if(o<0)throw new Error("Input x must be non-negative!");o>=n||(a?i.set(1,r,o):t.size>0?i.set(i.get(r,o)+t.get(r,s),r,o):i.set(i.get(r,o)+1,r,o))}return i}},9258:(e,t,n)=>{"use strict";n.d(t,{p:()=>l,M:()=>c});var r=n(9972),a=n(3533),s=n(4391),o=n(6961),i=n(1775),u=n(2186);function l(e){const{inputs:t,backend:n,attrs:c}=e,{x:d}=t,{dtype:p}=c;if("complex64"===p){if("complex64"===d.dtype)return(0,i.y)({inputs:{x:d},backend:n});const e=(0,s.l)(n,d.shape,d.dtype),t=l({inputs:{x:d},backend:n,attrs:{dtype:"float32"}}),r=(0,o.P)({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===d.dtype){const e=(0,u.k)({inputs:{input:d},backend:n}),t=l({inputs:{x:e},backend:n,attrs:{dtype:p}});return n.disposeIntermediateTensorInfo(e),t}if(!r.util.hasEncodingLoss(d.dtype,p)){const e=(0,i.y)({inputs:{x:d},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:p}}if("int32"===p){const e=n.data.get(d.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(d.shape,"int32",t)}if("bool"===p){const e=n.data.get(d.dataId).values,t=r.util.toTypedArray([0],d.dtype),[s,o]=(0,a.b)(((e,t)=>e!==t?1:0))(d.shape,[],e,t,"bool");return n.makeTensorInfo(o,"bool",s)}throw new Error(`Error in Cast: failed to cast ${d.dtype} to ${p}`)}const c={kernelName:r.Cast,backendName:"cpu",kernelFunc:l}},4769:(e,t,n)=>{"use strict";n.d(t,{__:()=>o,y2:()=>u});var r=n(9972),a=n(8029),s=n(6738);const o=(0,a.a)((e=>Math.ceil(e))),i=(0,s.O)(r.Ceil,o),u={kernelName:r.Ceil,backendName:"cpu",kernelFunc:i}},6961:(e,t,n)=>{"use strict";function r(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",s),imag:n.makeTensorInfo(a.shape,"float32",o)},i}n.d(t,{P:()=>r,z:()=>a});const a={kernelName:n(9972).Complex,backendName:"cpu",kernelFunc:r}},8926:(e,t,n)=>{"use strict";n.d(t,{j:()=>a});var r=n(9972);function a(e,t,n,a){const s=r.util.getArrayFromDType(n,r.util.sizeFromShape(t));if(a&&"string"!==n){let t=0;e.forEach((e=>{const n=r.util.sizeFromShape(e.shape);s.set(e.vals,t),t+=n}))}else{let a=0;e.forEach((e=>{const o="string"===n?r.backend_util.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const r=n*t[1]+a;for(let t=0;t<e.shape[1];++t)s[r+t]=o[i++]}a+=e.shape[1]}))}return s}},1211:(e,t,n)=>{"use strict";n.d(t,{Ro:()=>o,Qq:()=>i,SX:()=>u});var r=n(9972),a=n(8029),s=n(6738);const o=(0,a.a)((e=>Math.exp(e))),i=(0,s.O)(r.Exp,o),u={kernelName:r.Exp,backendName:"cpu",kernelFunc:i}},969:(e,t,n)=>{"use strict";n.d(t,{OF:()=>o,Vu:()=>u});var r=n(9972),a=n(8029),s=n(6738);const o=(0,a.a)((e=>Math.expm1(e))),i=(0,s.O)(r.Expm1,o),u={kernelName:r.Expm1,backendName:"cpu",kernelFunc:i}},6574:(e,t,n)=>{"use strict";n.d(t,{r6:()=>o,Ao:()=>u});var r=n(9972),a=n(8029),s=n(6738);const o=(0,a.a)((e=>Math.floor(e))),i=(0,s.O)(r.Floor,o),u={kernelName:r.Floor,backendName:"cpu",kernelFunc:i}},4468:(e,t,n)=>{"use strict";n.d(t,{i:()=>a});var r=n(9972);function a(e,t,n){const a=(0,r.buffer)(n,e.dtype);for(let n=0;n<a.size;++n){const r=a.indexToLoc(n).slice(),s=r[0],o=r[2],i=t.locToIndex([s,o]);r[2]=t.values[i];const u=e.locToIndex(r);a.values[n]=e.values[u]}return a}},6272:(e,t,n)=>{"use strict";n.d(t,{o:()=>o,Ce:()=>u});var r=n(9972),a=n(3533),s=n(6205);const o=(0,a.b)(((e,t)=>e>t?1:0)),i=(0,s.j)(r.Greater,o,null,"bool"),u={kernelName:r.Greater,backendName:"cpu",kernelFunc:i}},1775:(e,t,n)=>{"use strict";function r(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}n.d(t,{y:()=>r,I:()=>a});const a={kernelName:n(9972).Identity,backendName:"cpu",kernelFunc:r}},8405:(e,t,n)=>{"use strict";n.d(t,{rO:()=>o,zh:()=>u});var r=n(9972),a=n(3533),s=n(6205);const o=(0,a.b)(((e,t)=>e<t?1:0)),i=(0,s.j)(r.Less,o,null,"bool"),u={kernelName:r.Less,backendName:"cpu",kernelFunc:i}},1325:(e,t,n)=>{"use strict";n.d(t,{b:()=>a});var r=n(9972);function a(e,t,n){const a=(t-e)/(n-1),s=r.util.makeZerosTypedArray(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+a;return s}},5223:(e,t,n)=>{"use strict";n.d(t,{vX:()=>o,xM:()=>u});var r=n(9972),a=n(8029),s=n(6738);const o=(0,a.a)((e=>Math.log(e))),i=(0,s.O)(r.Log,o),u={kernelName:r.Log,backendName:"cpu",kernelFunc:i}},5126:(e,t,n)=>{"use strict";n.d(t,{B:()=>a});var r=n(9972);function a(e,t,n,a){const s=r.util.getTypedArrayFromDType(a,r.util.sizeFromShape(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];t>a&&(a=t)}s[n]=a}return s}},1717:(e,t,n)=>{"use strict";n.d(t,{wS:()=>o,eJ:()=>u});var r=n(9972),a=n(3533),s=n(6205);const o=(0,a.b)(((e,t)=>Math.max(e,t))),i=(0,s.j)(r.Maximum,o),u={kernelName:r.Maximum,backendName:"cpu",kernelFunc:i}},612:(e,t,n)=>{"use strict";n.d(t,{vP:()=>o,u0:()=>u});var r=n(9972),a=n(3533),s=n(6205);const o=(0,a.b)(((e,t)=>Math.min(e,t))),i=(0,s.j)(r.Minimum,o),u={kernelName:r.Minimum,backendName:"cpu",kernelFunc:i}},1917:(e,t,n)=>{"use strict";n.d(t,{$3:()=>o,Jp:()=>u,f$:()=>l});var r=n(9972),a=n(3533),s=n(6205);const o=(0,a.b)(((e,t)=>e*t)),i=(0,s.H)(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),u=(0,s.j)(r.Multiply,o,i),l={kernelName:r.Multiply,backendName:"cpu",kernelFunc:u}},854:(e,t,n)=>{"use strict";n.d(t,{uC:()=>o,AF:()=>i});var r=n(9972),a=n(8166),s=n(1917);function o(e,t,n){const a=r.util.createScalarValue(-1,n);return(0,s.$3)([],t,a,e,n)}const i={kernelName:r.Neg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;(0,a.H)(r,"neg");const s=n.data.get(r.dataId).values,[i,u]=o(s,r.shape,r.dtype);return n.makeTensorInfo(u,r.dtype,i)}}},8584:(e,t,n)=>{"use strict";n.d(t,{Gj:()=>o,nP:()=>u});var r=n(9972),a=n(3533),s=n(6205);const o=(0,a.b)(((e,t)=>e!==t?1:0)),i=(0,s.j)(r.NotEqual,o,null,"bool"),u={kernelName:r.NotEqual,backendName:"cpu",kernelFunc:i}},9560:(e,t,n)=>{"use strict";n.d(t,{Qg:()=>o,Iz:()=>i});var r=n(9972),a=n(8166),s=n(4802);function o(e,t,n,a){const[s,o]=r.backend_util.computeOutAndReduceShapes(e,a),i=(0,r.upcastType)(t,"int32"),u=r.util.makeZerosTypedArray(r.util.sizeFromShape(s),i),l=r.util.sizeFromShape(o);for(let e=0;e<u.length;++e){const t=e*l;let r=1;for(let e=0;e<l;++e)r*=n[t+e];u[e]=r}return{outVals:u,outShape:s,outDtype:i}}const i={kernelName:r.Prod,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:u}=t,{axis:l,keepDims:c}=i;(0,a.H)(u,"prod");const d=u.shape.length,p=r.util.parseAxisParam(l,u.shape),h=r.backend_util.getAxesPermutation(p,d);let f=p,m=u;const g=[];null!=h&&(m=(0,s.p)({inputs:{x:u},backend:n,attrs:{perm:h}}),g.push(m),f=r.backend_util.getInnerMostAxes(f.length,d));const y=n.data.get(m.dataId).values,{outVals:b,outShape:x,outDtype:v}=o(m.shape,m.dtype,y,f);let k=x;return c&&(k=r.backend_util.expandShapeToKeepDim(x,p)),g.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(k,v,b)}}},9230:(e,t,n)=>{"use strict";n.d(t,{b:()=>a});var r=n(9972);function a(e,t,n,a){if(e===t||e<t&&n<0||t<e&&n>1)return r.util.makeZerosTypedArray(0,a);const s=Math.abs(Math.ceil((t-e)/n)),o=r.util.makeZerosTypedArray(s,a);t<e&&1===n&&(n=-1),o[0]=e;for(let e=1;e<o.length;e++)o[e]=o[e-1]+n;return o}},2186:(e,t,n)=>{"use strict";function r(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.real,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}n.d(t,{k:()=>r,O:()=>a});const a={kernelName:n(9972).Real,backendName:"cpu",kernelFunc:r}},7742:(e,t,n)=>{"use strict";n.d(t,{zd:()=>o,FY:()=>u});var r=n(9972),a=n(8029),s=n(6738);const o=(0,a.a)((e=>1/Math.sqrt(e))),i=(0,s.O)(r.Rsqrt,o),u={kernelName:r.Rsqrt,backendName:"cpu",kernelFunc:i}},2578:(e,t,n)=>{"use strict";n.d(t,{rT:()=>s,tP:()=>o,C6:()=>i});var r=n(9972),a=n(8166);function s(e,t,n,a,s){const o=r.slice_util.isSliceContinous(a,t,n),i=r.util.sizeFromShape(n),u=r.util.computeStrides(a);if(o){const n=r.slice_util.computeFlatOffset(t,u);return"string"===s?e.slice(n,n+i):e.subarray(n,n+i)}const l="string"===s?r.backend_util.fromUint8ToStringArray(e):e,c=(0,r.buffer)(a,s,l),d=(0,r.buffer)(n,s);for(let e=0;e<d.size;++e){const n=d.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));d.set(c.get(...r),...n)}return"string"===s?r.backend_util.fromStringArrayToUint8(d.values):d.values}function o(e){const{inputs:t,backend:n,attrs:o}=e,{x:i}=t,{begin:u,size:l}=o;(0,a.H)(i,"slice");const[c,d]=r.slice_util.parseSliceParams(i,u,l);r.slice_util.assertParamsValid(i,c,d);const p=s(n.data.get(i.dataId).values,c,d,i.shape,i.dtype);return n.makeTensorInfo(d,i.dtype,p)}const i={kernelName:r.Slice,backendName:"cpu",kernelFunc:o}},212:(e,t,n)=>{"use strict";n.d(t,{Hz:()=>o,MS:()=>u});var r=n(9972),a=n(3533),s=n(6205);const o=(0,a.b)(((e,t)=>{const n=e-t;return n*n})),i=(0,s.j)(r.SquaredDifference,o),u={kernelName:r.SquaredDifference,backendName:"cpu",kernelFunc:i}},2210:(e,t,n)=>{"use strict";n.d(t,{t:()=>a});var r=n(9972);function a(e,t,n,a){const s=(0,r.buffer)(e,t.dtype);for(let e=0;e<s.size;e++){const r=s.indexToLoc(e),o=new Array(r.length);for(let e=0;e<o.length;e++)o[e]=r[e]*n[e]+a[e];s.set(t.get(...o),...r)}return s}},1649:(e,t,n)=>{"use strict";n.d(t,{VY:()=>o,lu:()=>u,GR:()=>l});var r=n(9972),a=n(3533),s=n(6205);const o=(0,a.b)(((e,t)=>e-t)),i=(0,s.H)(((e,t,n,r)=>({real:e-n,imag:t-r}))),u=(0,s.j)(r.Sub,o,i),l={kernelName:r.Sub,backendName:"cpu",kernelFunc:u}},7723:(e,t,n)=>{"use strict";n.d(t,{R:()=>a});var r=n(9972);function a(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const a=(0,r.buffer)(n,e.dtype);for(let t=0;t<a.values.length;++t){const n=a.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const s=e.locToIndex(r);a.values[t]=e.values[s]}return a}},9556:(e,t,n)=>{"use strict";n.d(t,{W:()=>a});var r=n(9972);function a(e,t,n,a,s){const o=t[t.length-1],[i,u]=[e.length/o,o],l=r.util.getTypedArrayFromDType(n,i*a),c=r.util.getTypedArrayFromDType("int32",i*a);for(let t=0;t<i;t++){const n=t*u,r=e.subarray(n,n+u),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value));const o=t*a,i=l.subarray(o,o+a),d=c.subarray(o,o+a);for(let e=0;e<a;e++)i[e]=s[e].value,d[e]=s[e].index}const d=t.slice();return d[d.length-1]=a,[(0,r.buffer)(d,n,l),(0,r.buffer)(d,"int32",c)]}},4802:(e,t,n)=>{"use strict";n.d(t,{p:()=>o,b:()=>i});var r=n(9972),a=n(8166),s=n(7107);function o(e){const{inputs:t,attrs:n,backend:r}=e,{x:o}=t,{perm:i}=n;(0,a.H)(o,"transpose");const u=o.shape.length,l=new Array(u);for(let e=0;e<l.length;e++)l[e]=o.shape[i[e]];const c=r.data.get(o.dataId).values,d=(0,s.H)(c,o.shape,o.dtype,i,l);return{dataId:r.write(d,l,o.dtype),shape:l,dtype:o.dtype}}const i={kernelName:r.Transpose,backendName:"cpu",kernelFunc:o}},7107:(e,t,n)=>{"use strict";n.d(t,{H:()=>a});var r=n(9972);function a(e,t,n,a,s){const o=t.length,i=r.util.sizeFromShape(t),u=r.util.computeStrides(t),l=r.util.computeStrides(s),c=r.util.getTypedArrayFromDType(n,r.util.sizeFromShape(s));for(let t=0;t<i;++t){const n=r.util.indexToLoc(t,o,u),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[a[e]];c[r.util.locToIndex(s,o,l)]=e[t]}return c}},5638:(e,t,n)=>{"use strict";n.d(t,{S:()=>a});var r=n(9972);function a(e,t,n,a){const s=r.util.parseAxisParam(t,n)[0],o=[1,n[0],1];for(let e=0;e<s;e++)o[0]*=n[e];o[1]=n[s];for(let e=s+1;e<n.length;e++)o[2]*=n[e];const i={},u=new Int32Array(n[s]),l=new r.TensorBuffer(o,a,e),c=[],d=1===o[0]&&1===o[2];for(let t=0;t<n[s];t++){let n;if(d)n=e[t].toString();else{const e=[];for(let n=0;n<o[0];n++)for(let r=0;r<o[2];r++)e.push(l.get(n,t,r));n=e.join(",")}if(void 0!==i[n])u[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,u[t]=e,c.push(t)}}const p=o.slice();p[1]=Object.keys(i).length;const h=new r.TensorBuffer(p,a);c.forEach(((e,t)=>{for(let n=0;n<o[0];n++)for(let r=0;r<o[2];r++)h.set(l.get(n,e,r),n,t,r)}));const f=n.slice();return f[s]=p[1],{outputValues:h.values,outputShape:f,indices:u}}},5226:(e,t,n)=>{"use strict";n.r(t),n.d(t,{simpleAbsImpl:()=>r.bk,addImpl:()=>a.EH,bincountImpl:()=>s.W,bincountReduceImpl:()=>s.i,ceilImpl:()=>o.__,concatImpl:()=>i.j,expImpl:()=>u.Ro,expm1Impl:()=>l.OF,floorImpl:()=>c.r6,gatherV2Impl:()=>d.i,greaterImpl:()=>p.o,lessImpl:()=>h.rO,linSpaceImpl:()=>f.b,logImpl:()=>m.vX,maxImpl:()=>g.B,maximumImpl:()=>y.wS,minimumImpl:()=>b.vP,multiplyImpl:()=>x.$3,negImpl:()=>v.uC,notEqualImpl:()=>k.Gj,prodImpl:()=>w.Qg,rangeImpl:()=>I.b,rsqrtImpl:()=>N.zd,sliceImpl:()=>T.rT,squaredDifferenceImpl:()=>S.Hz,stridedSliceImpl:()=>C.t,subImpl:()=>E.VY,tileImpl:()=>_.R,topKImpl:()=>$.W,transposeImpl:()=>A.H,uniqueImpl:()=>R.S});var r=n(224),a=n(2779),s=n(8607),o=n(4769),i=n(8926),u=n(1211),l=n(969),c=n(6574),d=n(4468),p=n(6272),h=n(8405),f=n(1325),m=n(5223),g=n(5126),y=n(1717),b=n(612),x=n(1917),v=n(854),k=n(8584),w=n(9560),I=n(9230),N=n(7742),T=n(2578),S=n(212),C=n(2210),E=n(1649),_=n(7723),$=n(9556),A=n(7107),R=n(5638)},3533:(e,t,n)=>{"use strict";n.d(t,{b:()=>a});var r=n(9972);function a(e){return(t,n,a,s,o)=>{const i=r.backend_util.assertAndGetBroadcastShape(t,n),u=i.length,l=r.util.computeStrides(i),c=r.util.sizeFromShape(i),d=r.util.getTypedArrayFromDType(o,c),p=t.length,h=n.length,f=r.util.computeStrides(t),m=r.util.computeStrides(n),g=r.backend_util.getBroadcastDims(t,i),y=r.backend_util.getBroadcastDims(n,i);if(g.length+y.length===0)for(let t=0;t<d.length;++t)d[t]=e(a[t%a.length],s[t%s.length]);else for(let t=0;t<d.length;++t){const n=r.util.indexToLoc(t,u,l),o=n.slice(-p);g.forEach((e=>o[e]=0));const i=r.util.locToIndex(o,p,f),c=n.slice(-h);y.forEach((e=>c[e]=0));const b=r.util.locToIndex(c,h,m);d[t]=e(a[i],s[b])}return[d,i]}}},6205:(e,t,n)=>{"use strict";n.d(t,{j:()=>i,H:()=>u});var r=n(9972),a=n(8166),s=n(9258),o=n(6961);function i(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a:o,b:i}=n,u=s;(0,a.H)([o,i],e);const l=u.data.get(o.dataId).values,c=u.data.get(i.dataId).values,d=r||o.dtype,[p,h]=t(o.shape,i.shape,l,c,d);return u.makeTensorInfo(h,d,p)}:({inputs:e,backend:a})=>{const{a:i,b:u}=e,l=a;if("complex64"===i.dtype||"complex64"===u.dtype){const e=(0,s.p)({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),t=l.data.get(e.dataId),r=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,c=l.data.get(r.dataId).values,d=l.data.get(a.dataId).values,p=(0,s.p)({inputs:{x:u},backend:l,attrs:{dtype:"complex64"}}),h=l.data.get(p.dataId),f=h.complexTensorInfos.real,m=h.complexTensorInfos.imag,g=l.data.get(f.dataId).values,y=l.data.get(m.dataId).values,[b,x,v]=n(i.shape,u.shape,c,d,g,y),k=l.makeTensorInfo(v,"float32",b),w=l.makeTensorInfo(v,"float32",x),I=(0,o.P)({inputs:{real:k,imag:w},backend:l});return l.disposeIntermediateTensorInfo(e),l.disposeIntermediateTensorInfo(p),l.disposeIntermediateTensorInfo(k),l.disposeIntermediateTensorInfo(w),I}{const e=l.data.get(i.dataId).values,n=l.data.get(u.dataId).values,a=r||i.dtype,[s,o]=t(i.shape,u.shape,e,n,a);return l.makeTensorInfo(o,a,s)}}}function u(e){return(t,n,a,s,o,i)=>{const u=r.backend_util.assertAndGetBroadcastShape(t,n),l=r.util.sizeFromShape(u),c=u.length,d=r.util.computeStrides(u),p=r.util.getTypedArrayFromDType("float32",l),h=r.util.getTypedArrayFromDType("float32",l),f=r.backend_util.getBroadcastDims(t,u),m=r.backend_util.getBroadcastDims(n,u),g=r.backend_util.mergeRealAndImagArrays(a,s),y=r.backend_util.mergeRealAndImagArrays(o,i),b=t.length,x=r.util.computeStrides(t),v=n.length,k=r.util.computeStrides(n);if(f.length+m.length===0)for(let t=0;t<p.length;t++){const n=t%g.length,r=t%y.length,a=e(g[2*n],g[2*n+1],y[2*r],y[2*r+1]);p[t]=a.real,h[t]=a.imag}else for(let t=0;t<p.length;t++){const n=r.util.indexToLoc(t,c,d),a=n.slice(-b);f.forEach((e=>a[e]=0));const s=r.util.locToIndex(a,b,x),o=n.slice(-v);m.forEach((e=>o[e]=0));const i=r.util.locToIndex(o,v,k),u=e(g[2*s],g[2*s+1],y[2*i],y[2*i+1]);p[t]=u.real,h[t]=u.imag}return[p,h,u]}}},8029:(e,t,n)=>{"use strict";n.d(t,{a:()=>a});var r=n(9972);function a(e){return(t,n,a)=>{const s=r.util.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],a);return s}}},6738:(e,t,n)=>{"use strict";n.d(t,{A:()=>s,O:()=>o});var r=n(9972),a=n(8166);function s(e,t,n){return({inputs:s,attrs:o,backend:i})=>{const{x:u}=s;if((0,a.H)(u,e),"string"===u.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const l=i,c=l.data.get(u.dataId).values,d=r.util.sizeFromShape(u.shape),p=n||u.dtype,h=r.util.getArrayFromDType(p,d);for(let e=0;e<d;++e)h[e]=t(c[e],o);return l.makeTensorInfo(u.shape,p,h)}}function o(e,t,n){return({inputs:r,attrs:s,backend:o})=>{const{x:i}=r;if((0,a.H)(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const u=o,l=u.data.get(i.dataId).values,c=n||i.dtype,d=t(l,c,s);return u.makeTensorInfo(i.shape,c,d)}}},4391:(e,t,n)=>{"use strict";n.d(t,{l:()=>s});var r=n(9972),a=n(6961);function s(e,t,n="float32"){if("complex64"===n){const n=s(e,t,"float32"),r=s(e,t,"float32");return(0,a.P)({inputs:{real:n,imag:r},backend:e})}const o=r.util.makeZerosTypedArray(r.util.sizeFromShape(t),n);return e.makeTensorInfo(t,n,o)}},9731:(e,t,n)=>{"use strict";n.r(t),n.d(t,{GPGPUContext:()=>He,MathBackendWebGL:()=>Qt,forceHalfFloat:()=>Jt,gpgpu_util:()=>a,setWebGLContext:()=>u,version_webgl:()=>Zt,webgl:()=>en,webgl_util:()=>r});var r={};n.r(r),n.d(r,{assertNotComplex:()=>de,bindCanvasToFramebuffer:()=>L,bindColorTextureToFramebuffer:()=>V,bindTextureToProgramUniformSampler:()=>P,bindTextureUnit:()=>O,bindVertexBufferToProgramAttribute:()=>F,callAndCheck:()=>y,canBeRepresented:()=>b,createFragmentShader:()=>w,createFramebuffer:()=>R,createProgram:()=>N,createStaticIndexBuffer:()=>E,createStaticVertexBuffer:()=>C,createTexture:()=>$,createVertexShader:()=>k,getBatchDim:()=>X,getExtensionOrThrow:()=>v,getFramebufferErrorMessage:()=>U,getMaxTexturesInShader:()=>re,getNumChannels:()=>_,getProgramUniformLocation:()=>B,getProgramUniformLocationOrThrow:()=>M,getRowsCols:()=>q,getShapeAs3D:()=>j,getTextureShapeFromLogicalShape:()=>K,getWebGLDisjointQueryTimerVersion:()=>ae,getWebGLErrorMessage:()=>x,getWebGLMaxTextureSize:()=>ee,hasExtension:()=>se,isCapableOfRenderingToFloatTexture:()=>ie,isDownloadFloatTextureEnabled:()=>ue,isReshapeFree:()=>Q,isWebGLFenceEnabled:()=>ce,isWebGLVersionEnabled:()=>oe,linkProgram:()=>T,resetMaxTextureSize:()=>te,resetMaxTexturesInShader:()=>ne,unbindColorTextureFromFramebuffer:()=>z,unbindTextureUnit:()=>D,validateFramebuffer:()=>W,validateProgram:()=>S,validateTextureSize:()=>A});var a={};n.r(a),n.d(a,{bindVertexProgramAttributeStreams:()=>Be,createBufferFromOutputTexture:()=>Ve,createFloat16MatrixTexture:()=>$e,createFloat16PackedMatrixTexture:()=>Me,createFloat32MatrixTexture:()=>Ee,createIndexBuffer:()=>Te,createPackedMatrixTexture:()=>Oe,createUnsignedBytesMatrixTexture:()=>Re,createVertexBuffer:()=>Ne,createVertexShader:()=>Ie,downloadByteEncodedFloatMatrixFromOutputTexture:()=>We,downloadFloat32MatrixFromBuffer:()=>ze,downloadMatrixFromPackedOutputTexture:()=>Ge,downloadPackedMatrixFromBuffer:()=>Ue,getInternalFormatForFloat16MatrixTexture:()=>_e,getInternalFormatForFloat16PackedMatrixTexture:()=>De,getInternalFormatForFloat32MatrixTexture:()=>Ce,getInternalFormatForPackedMatrixTexture:()=>Fe,getInternalFormatForUnsignedBytesMatrixTexture:()=>Ae,uploadDenseMatrixToTexture:()=>Pe,uploadPixelDataToTexture:()=>Le});var s=n(9972);const o={},i={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function u(e,t){o[e]=t}function l(e){if(!(e in o)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete o[e]}),!1),1===e?t.getContext("webgl",i)||t.getContext("experimental-webgl",i):t.getContext("webgl2",i)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;o[e]=t}const t=o[e];return t.isContextLost()?(delete o[e],l(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),o[e])}var c,d,p;function h(e,t){return[t,e]}function f(e){const t=s.util.sizeFromShape(e),n=Math.ceil(t/4);return s.util.sizeToSquarishShape(n)}function m(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function g(e,t){const n=e;let r,a,o,i,u,l,c,d,p,h;return 2===(0,s.env)().getNumber("WEBGL_VERSION")?(r=n.R32F,a=n.R16F,o=n.RGBA16F,i=n.RGBA32F,u=n.RED,c=4,d=1,p=n.HALF_FLOAT,h=n.FLOAT):(r=e.RGBA,a=e.RGBA,o=e.RGBA,i=n.RGBA,u=e.RGBA,c=4,d=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT),l=e.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:u,downloadTextureFormat:l,downloadUnpackNumChannels:c,defaultNumChannels:d,textureTypeHalfFloat:p,textureTypeFloat:h}}function y(e,t){const n=t();return(0,s.env)().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+x(e,t))}(e),n}function b(e){return!!((0,s.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function x(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+t}}function v(e,t){return G(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function k(e,t){const n=G(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(y(e,(()=>e.shaderSource(n,t))),y(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function w(e,t){const n=G(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(y(e,(()=>e.shaderSource(n,t))),y(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=I.exec(t);if(null==n)return console.log("Couldn't parse line number in error: "+t),void console.log(e);const r=+n[1],a=e.split("\n"),o=a.length.toString().length+2,i=a.map(((e,t)=>s.util.rightPad((t+1).toString(),o)+e));let u=0;for(let e=0;e<i.length;e++)u=Math.max(i[e].length,u);const l=i.slice(0,r-1),c=i.slice(r-1,r),d=i.slice(r);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log("%c "+s.util.rightPad(c[0],u),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(d.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(c||(c={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(d||(d={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(p||(p={}));const I=/ERROR: [0-9]+:([0-9]+):/g;function N(e){return G(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}function T(e,t){if(y(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function S(e,t){if(y(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function C(e,t){const n=G(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return y(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),y(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function E(e,t){const n=G(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return y(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),y(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function _(){return 2===(0,s.env)().getNumber("WEBGL_VERSION")?1:4}function $(e){return G(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}function A(e,t){const n=(0,s.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}function R(e){return G(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}function F(e,t,n,r,a,s,o){const i=e.getAttribLocation(t,n);return-1!==i&&(y(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),y(e,(()=>e.vertexAttribPointer(i,a,e.FLOAT,!1,s,o))),y(e,(()=>e.enableVertexAttribArray(i))),!0)}function O(e,t,n){H(e,n),y(e,(()=>e.activeTexture(e.TEXTURE0+n))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}function D(e,t){H(e,t),y(e,(()=>e.activeTexture(e.TEXTURE0+t))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function M(e,t,n){return G(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}function B(e,t,n){return e.getUniformLocation(t,n)}function P(e,t,n,r){y(e,(()=>O(e,t,r))),y(e,(()=>e.uniform1i(n,r)))}function L(e){y(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),y(e,(()=>e.viewport(0,0,e.canvas.width,e.canvas.height))),y(e,(()=>e.scissor(0,0,e.canvas.width,e.canvas.height)))}function V(e,t,n){y(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),y(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function z(e,t){y(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),y(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function W(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+U(e,t))}function U(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+t}}function G(e,t,n){const r=y(e,(()=>t()));if(null==r)throw new Error(n);return r}function H(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)}function X(e,t=2){return s.util.sizeFromShape(e.slice(0,e.length-t))}function q(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function j(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[X(e),...q(e)]),t}function K(e,t=!1){let n=(0,s.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?s.util.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=s.util.squeezeShape(e);e=t.newShape}let r=s.util.sizeFromShape(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=X(e);let n=2,a=2;return e.length&&([n,a]=q(e)),r=t*(n/2)*(a/2),s.util.sizeToSquarishShape(r).map((e=>2*e))}return s.util.sizeToSquarishShape(r)}function Y(e){return e%2==0}function Q(e,t){if(e=e.slice(-2),t=t.slice(-2),s.util.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(Y(n)&&Y(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Y(e[0])&&Y(t[0])}let Z,J;function ee(e){if(null==Z){const t=l(e);Z=t.getParameter(t.MAX_TEXTURE_SIZE)}return Z}function te(){Z=null}function ne(){J=null}function re(e){if(null==J){const t=l(e);J=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,J)}function ae(e){if(0===e)return 0;let t;const n=l(e);return t=se(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:se(n,"EXT_disjoint_timer_query")?1:0,t}function se(e,t){return null!=e.getExtension(t)}function oe(e){try{if(null!=l(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function ie(e){if(0===e)return!1;const t=l(e);if(1===e){if(!se(t,"OES_texture_float"))return!1}else if(!se(t,"EXT_color_buffer_float"))return!1;return le(t)}function ue(e){if(0===e)return!1;const t=l(e);if(1!==e){if(se(t,"EXT_color_buffer_float"))return le(t);const e="EXT_color_buffer_half_float";if(se(t,e)){const n=t.getExtension(e);return function(e,t){const n=g(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(a),s}(t,n)}return!1}return!!se(t,"OES_texture_float")&&(!!se(t,"WEBGL_color_buffer_float")&&le(t))}function le(e){const t=g(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),a}function ce(e){return 2===e&&null!=l(e).fenceSync}function de(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&s.util.assert("complex64"!==e.dtype,(()=>t+" does not support complex64 tensors in the WebGL backend."))}))}const pe=(0,s.env)();function he(){let e,t,n,r,a,o,i,u,l,c;return 2===(0,s.env)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",a="texture",o="outputColor",i="out vec4 outputColor;",u="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",a="texture2D",o="gl_FragColor",i="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:a,output:o,defineOutput:i,defineSpecialNaN:u,defineSpecialInf:l,defineRound:c}}function fe(e,t,n="index"){const r=s.util.computeStrides(t);return r.map(((t,a)=>`int ${e[a]} = ${n} / ${t}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`)).join("")}function me(e){const t=s.util.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}pe.registerFlag("HAS_WEBGL",(()=>pe.getNumber("WEBGL_VERSION")>0)),pe.registerFlag("WEBGL_VERSION",(()=>oe(2)?2:oe(1)?1:0)),pe.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),pe.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===pe.get("WEBGL_VERSION"))),pe.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),pe.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),pe.registerFlag("WEBGL_PACK",(()=>pe.getBool("HAS_WEBGL"))),pe.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_PACK_CLIP",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),pe.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_PACK_REDUCE",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_LAZILY_UNPACK",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_CONV_IM2COL",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>ee(pe.getNumber("WEBGL_VERSION")))),pe.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>re(pe.getNumber("WEBGL_VERSION")))),pe.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=pe.getNumber("WEBGL_VERSION");return 0===e?0:ae(e)})),pe.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>pe.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!s.device_util.isMobile())),pe.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>ie(pe.getNumber("WEBGL_VERSION")))),pe.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!pe.getBool("WEBGL_FORCE_F16_TEXTURES")&&pe.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),pe.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>ue(pe.getNumber("WEBGL_VERSION")))),pe.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>ce(pe.getNumber("WEBGL_VERSION")))),pe.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>pe.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),pe.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),pe.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}));const ge="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class ye{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=c.DENSE;const t=f(e),n=he();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${fe(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class be{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=c.DENSE;const t=f(e),n=he();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${fe(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class xe{constructor(e){this.variableNames=["A"],this.outTexUsage=d.DOWNLOAD;const t=he();this.outputShape=e,this.userCode=`\n      ${ge}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class ve{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=d.DOWNLOAD;const t=he();this.outputShape=e,this.userCode=`\n      ${ge}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class ke{constructor(e,t,n=!1){this.variableNames=["A"];const r=he(),[a,s]=t;this.outputShape=e;let o="result";n&&(o="floor(result * 255. + 0.5)"),this.userCode=`\n      ${me(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${s};\n        int c = imod(flatIndex, ${s});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${s}.0, ${a}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${o}, 0., 0., 0.);\n      }\n    `}}class we{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=he(),[a,s]=t;this.outputShape=e;let o="",i="result";n&&(i="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const i=2*t+n;o+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${s};\n              c = imod(flatIndex, ${s});\n              uv = (vec2(c, r) + halfCR) / vec2(${s}.0, ${a}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${i}] = values[0];\n              } else if(offset == 1) {\n                result[${i}] = values[1];\n              } else if(offset == 2) {\n                result[${i}] = values[2];\n              } else {\n                result[${i}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${me(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${o}\n\n        ${r.output} = ${i};\n      }\n    `}}function Ie(e){const t=he();return k(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Ne(e){return C(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Te(e){return E(e,new Uint16Array([0,1,2,2,1,3]))}function Se(e,t,n,r,a,s){A(t,n);const o=$(e),i=e.TEXTURE_2D;return y(e,(()=>e.bindTexture(i,o))),y(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),y(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),y(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),y(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),y(e,(()=>e.texImage2D(i,0,r,t,n,0,a,s,null))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),o}function Ce(e){return e.internalFormatFloat}function Ee(e,t,n,r){const[a,s]=h(t,n);return Se(e,a,s,Ce(r),r.textureFormatFloat,e.FLOAT)}function _e(e){return e.internalFormatHalfFloat}function $e(e,t,n,r){const[a,s]=h(t,n);return Se(e,a,s,_e(r),r.textureFormatFloat,r.textureTypeHalfFloat)}function Ae(e){return e.downloadTextureFormat}function Re(e,t,n,r){const[a,s]=h(t,n);return Se(e,a,s,Ae(r),e.RGBA,e.UNSIGNED_BYTE)}function Fe(e){return e.internalFormatPackedFloat}function Oe(e,t,n,r){const[a,s]=m(t,n);return Se(e,a,s,Fe(r),e.RGBA,e.FLOAT)}function De(e){return e.internalFormatPackedHalfFloat}function Me(e,t,n,r){const[a,s]=m(t,n);return Se(e,a,s,De(r),e.RGBA,r.textureTypeHalfFloat)}function Be(e,t,n){return y(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),F(e,t,"clipSpacePos",n,3,20,0)&&F(e,t,"uv",n,2,20,12)}function Pe(e,t,n,r,a,s){let o,i,u;y(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),a instanceof Uint8Array?(o=new Uint8Array(n*r*4),i=e.UNSIGNED_BYTE,u=e.RGBA):(o=new Float32Array(n*r*4),i=e.FLOAT,u=s.internalFormatPackedFloat),o.set(a),y(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,i,o))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function Le(e,t,n){y(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?y(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):y(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function Ve(e,t,n,r){const a=e.createBuffer();y(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a)));const s=16*t*n;return y(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,s,e.STREAM_READ))),y(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),y(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),a}function ze(e,t,n){const r=e,a=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,a),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),a}function We(e,t,n,r){const[a,s]=h(t,n),o=new Uint8Array(t*n*4);return y(e,(()=>e.readPixels(0,0,a,s,r.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}function Ue(e,t,n,r,a,s,o,i){const u=e,l=new Float32Array(function(e,t){const[n,r]=m(e,t);return n*r*4}(s,o));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}function Ge(e,t,n){const r=new Float32Array(t*n*4);return y(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}class He{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=(0,s.env)().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,u(t,e)):this.gl=l(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===(0,s.env)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=v(this.gl,e),se(this.gl,t))this.textureHalfFloatExtension=v(this.gl,t);else if((0,s.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),se(this.gl,r))this.colorBufferHalfFloatExtension=v(this.gl,r);else if((0,s.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",se(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!se(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=Ne(this.gl),this.indexBuffer=Te(this.gl),this.framebuffer=R(this.gl),this.textureConfig=g(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,s.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;y(e,(()=>e.finish())),y(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),y(e,(()=>e.deleteFramebuffer(this.framebuffer))),y(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),y(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),y(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),Ee(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),$e(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),Re(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),Le(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),Pe(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),Me(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),Oe(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(z(this.gl,this.framebuffer),this.outputTexture=null),y(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>We(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,a,s){return Ue(this.gl,e,0,0,0,a,s,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return ze(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=Ve(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if((0,s.env)().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,a=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(a,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=a}else(0,s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,(0,s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>Ge(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=w(t,e),r=Ie(t),a=N(t);return y(t,(()=>t.attachShader(a,r))),y(t,(()=>t.attachShader(a,n))),T(t,a),this.debug&&S(t,a),this.vertexAttrsAreBound||(this.setProgram(a),this.vertexAttrsAreBound=Be(t,this.program,this.vertexBuffer)),a}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&y(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&S(this.gl,this.program),y(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?M(this.gl,e,t):B(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),y(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),P(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,a]=m(t,n);this.setOutputMatrixTextureDriver(e,r,a)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&S(this.gl,this.program),W(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),y(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),y(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=v(this.gl,2===(0,s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===(0,s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await s.util.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,(0,s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,(0,s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||s.util.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),V(this.gl,e,this.framebuffer),this.debug&&W(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(V(this.gl,this.outputTexture,this.framebuffer),this.debug&&W(this.gl)):z(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;V(r,e,this.framebuffer),this.debug&&W(r),this.outputTexture=e,y(r,(()=>r.viewport(0,0,t,n))),y(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),y(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:Xe}=s.backend_util;function qe(e,t,n,r){const a=[];e.forEach((e=>{const t=s.util.sizeFromShape(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?a.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(a.push(`uniform sampler2D ${e.name};`),a.push(`uniform int offset${e.name};`))}));const o=a.join("\n"),i=e.map((e=>function(e,t,n=!1){let r="";r+=n?Ke(e):je(e);const a=e.shapeInfo.logicalShape,o=t.logicalShape;return a.length<=o.length&&(r+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),a="get"+r+"AtOutCoords",o=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,u=Xe(e.shapeInfo.logicalShape,t.logicalShape),l=nt(i),c=i-o;let d;const p=["x","y","z","w","u","v"];d=0===o?"":i<2&&u.length>=1?"coords = 0;":u.map((e=>`coords.${p[e+c]} = 0;`)).join("\n");let h="";h=i<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>"coords."+p[t+c])).join(", ");let f="return outputValue;";const m=1===s.util.sizeFromShape(e.shapeInfo.logicalShape),g=1===s.util.sizeFromShape(t.logicalShape);if(1!==o||m||g){if(m&&!g)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){const e=o-2,t=o-1;u.indexOf(e)>-1&&u.indexOf(t)>-1?f="return vec4(outputValue.x);":u.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${l} coords = getOutputCoords();\n      ${d}\n      vec4 outputValue = get${r}(${h});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),a="get"+r+"AtOutCoords",o=t.texShape,i=e.shapeInfo.texShape,u=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&u===l&&null==e.shapeInfo.flatOffset&&s.util.arraysEqual(i,o))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const c=nt(l),d=Xe(e.shapeInfo.logicalShape,t.logicalShape),p=l-u;let h;const f=["x","y","z","w","u","v"];h=0===u?"":l<2&&d.length>=1?"coords = 0;":d.map((e=>`coords.${f[e+p]} = 0;`)).join("\n");let m="";return m=l<2&&u>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>"coords."+f[t+p])).join(", "),`\n    float ${a}() {\n      ${c} coords = getOutputCoords();\n      ${h}\n      return get${r}(${m});\n    }\n  `}(e,t)),r}(e,t,r))).join("\n"),u=t.texShape,l=he(),c=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let d,p,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Ye}\n    ${Qe}\n    ${Ze}\n  `}(l);return t.isPacked?(d=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(s.util.arraysEqual(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let s=a,o="",i="b, r, c";for(let t=2;t<e.length-1;t++)s*=e[e.length-t-1],o=`\n      int b${t} = index / ${s};\n      index -= b${t} * ${s};\n    `+o,i=`b${t}, `+i;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${i});\n    }\n  `}(e,t)}}(t.logicalShape,u),p=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(l)):(d=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=t)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(e,t){return s.util.arraysEqual(e,t)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=fe(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=fe(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=fe(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=fe(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(e.length+"-D output sampling is not yet supported")}var n}(t.logicalShape,u),p=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),r&&(h+=Je),[h,c,p,o,d,i,n].join("\n")}function je(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[s,o]=e.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${s}, ${o}, ${et(t)});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${tt(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],s=r[1];if(1===s&&1===a)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const o=et(t);return 1===s?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `:1===a?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${s}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${s}, index + ${o});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape;if(null!=a&&s.util.arraysEqual(t,a)){const e=a[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:o,keptDims:i}=s.util.squeezeShape(t),u=o;if(u.length<t.length){const t=["row","col"];return`\n      ${je(rt(e,u))}\n      float ${r}(int row, int col) {\n        return ${r}(${at(t,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${tt(e)}\n      }\n    `;const l=a[0],c=a[1],d=et(n);return 1===c?`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${d}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:1===l?`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${d}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${d};\n    vec2 uv = uvFromFlat(${l}, ${c}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[1]*t[2],o=t[2],{newShape:i,keptDims:u}=s.util.squeezeShape(t),l=i;if(l.length<t.length){const t=["row","col","depth"];return`\n        ${je(rt(e,l))}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${at(t,u)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${o}, 1)));\n        ${tt(e)}\n      }\n    `;const c=e.shapeInfo.texShape,d=c[0],p=c[1],h=e.shapeInfo.flatOffset;if(p===a&&null==h)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${d}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(p===o&&null==h)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${d}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${o} + depth + ${et(n)};\n        vec2 uv = uvFromFlat(${d}, ${p}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[3],o=t[2]*a,i=t[1]*o,{newShape:u,keptDims:l}=s.util.squeezeShape(t);if(u.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${je(rt(e,u))}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${at(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${a}, 1)));\n        ${tt(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],h=d[1];if(h===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${h}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(h===a&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${h}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${h}, index + ${et(n)});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],o=t[3]*a,i=t[2]*o,u=t[1]*i,{newShape:l,keptDims:c}=s.util.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${je(rt(e,l))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${at(t,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${u}, ${i}, ${o}, ${a})) +\n          depth3;\n        ${tt(e)}\n      }\n    `;const d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],f=p[1];if(f===u&&null==d)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===a&&null==d)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${i} + depth * ${o} +\n          depth2 * ${a} + depth3 + ${et(n)};\n      vec2 uv = uvFromFlat(${h}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:o}=s.util.squeezeShape(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${je(rt(e,a))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${at(t,o)});\n      }\n    `}const i=t[5],u=t[4]*i,l=t[3]*u,c=t[2]*l,d=t[1]*c;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${d}, ${c}, ${l}, ${u})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${tt(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,f=h[0],m=h[1];if(m===d&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${l}, ${u}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(m===i&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${d} + col * ${c} + depth * ${l} +\n          depth2 * ${u} + depth3 * ${i} + depth4 + ${et(n)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(t.length+"-D input sampling is not yet supported")}}function Ke(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${he().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=e.shapeInfo.texShape,a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],s=he();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${a[0]}, ${a[1]}, index);\n      return ${s.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,o=a[0],i=a[1],u=he();if(null!=a&&s.util.arraysEqual(t,a))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${u.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(t[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${u.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,s=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===t[0]){const n=[1,2],a=["b","row","col"];return`\n        ${Ke(rt(e,t.slice(1)))}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${at(a,n)});\n        }\n      `}const o=s[0],i=s[1],u=Math.ceil(t[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${o}, ${i}, ${u*Math.ceil(t[1]/2)}, ${u}, b, row, col);\n      return ${he().texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape,o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],i=o[0],u=o[1],l=Math.ceil(t[n-1]/2);let c=l*Math.ceil(t[n-2]/2),d="int b, int row, int col",p=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let e=2;e<n-1;e++)d=`int b${e}, `+d,c*=t[n-e-1],p=`b${e} * ${c} + `+p;return`\n    vec4 ${a}(${d}) {\n      int index = ${p};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${i});\n      return ${he().texture2D}(${r}, uv);\n    }\n  `}(e)}}const Ye="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Qe="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Ze="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Je="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function et(e){return"offset"+e}function tt(e){const t=e.name,n=s.util.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function nt(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function rt(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function at(e,t){return t.map((t=>e[t])).join(", ")}function st(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,a=t[n],o=a.shape;if(!s.util.arraysEqual(r,o))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${o} must match`);if(e.isUniform&&a.isUniform)return;const i=e.texShape,u=a.isUniform?null:a.texData.texShape;if(!s.util.arraysEqual(i,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${u} must match`)}))}var ot=n(5226);const{addImpl:it,bincountImpl:ut,bincountReduceImpl:lt,ceilImpl:ct,concatImpl:dt,expImpl:pt,expm1Impl:ht,floorImpl:ft,gatherV2Impl:mt,greaterImpl:gt,lessImpl:yt,linSpaceImpl:bt,logImpl:xt,maxImpl:vt,maximumImpl:kt,minimumImpl:wt,multiplyImpl:It,negImpl:Nt,prodImpl:Tt,rangeImpl:St,rsqrtImpl:Ct,simpleAbsImpl:Et,sliceImpl:_t,stridedSliceImpl:$t,subImpl:At,tileImpl:Rt,topKImpl:Ft,transposeImpl:Ot,uniqueImpl:Dt}=ot;function Mt(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function Bt(e,t){return 1===t?[e]:Mt(e,t)}class Pt{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=Bt("rc",t),r=nt(t),a=function(e,t,n){if(1===e)return"rc > "+t[0];let r="";for(let a=e-2;a<e;a++)r+=`${n[a]} >= ${t[a]}`,a<e-1&&(r+="||");return r}(t,e,n),s=function(e,t,n,r){if(1===e)return"";const a=r.slice(-2);return`\n    int r = ${a[0]};\n    int c = ${a[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),o=function(e,t){const n=e.length,r=function(e,t){const n=[];for(let r=0;r<=1;r++)for(let a=0;a<=1;a++){let s=`${0===r?"r":"rp1"}, ${0===a?"c":"cp1"}`;for(let n=2;n<e;n++)s=t[t.length-1-n]+","+s;n.push(s)}return n}(n,t);return 1===n?`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${a}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${o}));\n          }\n        }\n      `}}}class Lt{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${fe(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${me(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Vt{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=Wt(t,n),a=Ut(e,r,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const s=zt(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();const e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}let o;return r===p.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===p.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===p.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===p.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===p.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(o),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const a=Wt(n,r),o=Ut(t,a,r);o in this.freeTextures||(this.freeTextures[o]=[]);const i=zt(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,r),u=(0,s.env)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==u&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[o].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[o],c=l.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function zt(e,t,n,r,a){const s=function(e,t){switch(e){case p.PACKED_2X2_FLOAT32:return Fe(t);case p.PACKED_2X2_FLOAT16:return De(t);case p.UNPACKED_FLOAT32:return Ce(t);case p.UNPACKED_FLOAT16:return _e(t);case p.PACKED_4X1_UNSIGNED_BYTE:return Ae(t);default:throw new Error("Unknown physical texture type "+e)}}(t,r);let o;if(a){const[t,n]=m(e[0],e[1]);o=t*n}else{const[t,n]=h(e[0],e[1]);o=t*n}return o*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error("Unknown internal format "+t)}(n,s)}function Wt(e,t){if(e===d.UPLOAD)return p.PACKED_2X2_FLOAT32;if(e===d.RENDER||null==e)return function(e){return(0,s.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?p.PACKED_2X2_FLOAT32:p.UNPACKED_FLOAT32:e?p.PACKED_2X2_FLOAT16:p.UNPACKED_FLOAT16}(t);if(e===d.DOWNLOAD||e===d.PIXELS)return p.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+e)}function Ut(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Gt{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Ht="return abs(x);",Xt="return x;";class qt{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class jt{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=Bt("rc",t),r=nt(t),a=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),s=n.slice(-2),o=t<=1?"rc":`vec2(${s.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const Kt=s.kernel_impls.whereImpl,Yt={};class Qt extends s.KernelBackend{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!(0,s.env)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=l((0,s.env)().getNumber("WEBGL_VERSION"));this.binaryCache=((t=(0,s.env)().getNumber("WEBGL_VERSION"))in Yt||(Yt[t]={}),Yt[t]),this.gpgpu=new He(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new Vt(this.gpgpu),this.numMBBeforeWarning=null==(0,s.env)().global.screen?1024:(0,s.env)().global.screen.height*(0,s.env)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new s.DataStorage(this,(0,s.engine)())}nextDataId(){return Qt.nextDataId++}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if(((0,s.env)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,s.env)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:d.UPLOAD,refCount:1}),r}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,r,a){if((0,s.env)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:d.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:a,slice:o,shape:i,isPacked:u}=t;if(null!=o){let t;t=u?new qt(i,Xt):new Gt(i,Xt);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:r}],r),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const l=null!=this.activeTimers;let c,d;if(l&&(c=s.util.now()),"complex64"===r){const e=this.readSync(a.real.dataId),t=this.readSync(a.imag.dataId);d=s.backend_util.mergeRealAndImagArrays(e,t)}else d=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=s.util.now()-c),this.convertAndCacheOnCPU(e,d)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:a,dtype:o,complexTensorInfos:i,isPacked:u}=t;if(null!=a){let t;t=u?new qt(r,Xt):new Gt(r,Xt);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:o}],o),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if(!(0,s.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,s.env)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,c,d=null;if("complex64"!==o&&(0,s.env)().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);d=this.gpgpu.createBufferFromTexture(t.texture,...f(r))}if(this.pendingRead.set(e,[]),"complex64"!==o&&await this.gpgpu.createAndWaitForFence(),"complex64"===o){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),t=e[0],n=e[1];c=s.backend_util.mergeRealAndImagArrays(t,n)}else if(null==d)c=this.getValuesFromTexture(e);else{const e=s.util.sizeFromShape(r);c=this.gpgpu.downloadFloat32MatrixFromBuffer(d,e)}null!=l&&this.disposeIntermediateTensorInfo(l);const p=this.convertAndCacheOnCPU(e,c),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&(0,s.engine)().removeDataId(e,this),this.pendingDeletes--),p}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>s.util.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,s.buffer)(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!b(n)){if((0,s.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),a=s.util.sizeFromShape(t);if((0,s.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...f(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),s}const o=(0,s.env)().getBool("WEBGL_PACK")&&!0===r,i=o?j(t):t,u=o?new ve(i):new xe(i),l=this.runWebGLProgram(u,[{shape:i,dtype:n,dataId:e}],"float32"),c=this.texData.get(l.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),d}timerAvailable(){return(0,s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=s.util.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),o=s.util.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if((0,s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);i.kernelMs=s.util.sum(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:o[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:s.util.now(),endMs:null}}endTimer(e){return(0,s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=s.util.now(),e)}async getQueryTime(e){if((0,s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:a,isPacked:s,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,a,s)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return(0,s.env)().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=(0,s.engine)().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return(0,s.env)().getBool("IS_TEST")||this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every((e=>null==this.texData.get(e.dataId).texture&&s.util.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){s.backend_util.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Kt(e.shape,t)}packedUnaryOp(e,t,n){const r=new qt(e.shape,t),a=this.compileAndRun(r,[e],n);return(0,s.engine)().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=Et(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if((0,s.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Ht,e.dtype);const t=new Gt(e.shape,Ht),n=this.compileAndRun(t,[e]);return(0,s.engine)().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&s.util.isString(n[0])){const a=n.map((e=>s.util.encodeString(e)));r=this.write(a,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:r}=this.makeTensorInfo(e,t,n);return(0,s.engine)().makeTensorFromDataId(r,e,t,this)}unpackTensor(e){const t=new jt(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Pt(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[X(e.shape),...q(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},a=[X(t),...q(t)],s=new Lt(a,n),o=this.runWebGLProgram(s,[r],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:r,dtype:a}=t,s=j(r);let o;return o=n?new be(s):new ye(s),{dtype:a,shape:r,dataId:this.runWebGLProgram(o,[{shape:s,dtype:a,dataId:e}],a,null,!0).dataId}}runWebGLProgram(e,t,n,r,a=!1){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===c.DENSE){const t=f(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===s.util.sizeFromShape(o.shape))return i.values=s.util.getTypedArrayFromDType(o.dtype,0),o;const u=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&s.util.sizeFromShape(t.shape)<=(0,s.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Q(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),u.push(t),n=this.texData.get(t.dataId),e.shape=r}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const d={shape:o.shape,texData:i,isUniform:!1},p=function(e,t,n){let r="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;r+=`${e.shape}_${n}_${t}`}));const a=e.userCode;let s=e.constructor.name;return s+="_"+r+"_"+a,s}(e,l,d),h=this.getAndSaveBinary(p,(()=>function(e,t,n,r){const a=t.userCode,o=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),i=o.map((e=>e.shapeInfo)),u={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},l=qe(o,u,a,t.packedInputs),c=e.createProgram(l);let d=null;const p=e.getUniformLocation(c,"NAN",!1);1===(0,s.env)().getNumber("WEBGL_VERSION")&&(d=e.getUniformLocation(c,"INFINITY",!1));const h={};for(let n=0;n<t.variableNames.length;n++){const r=t.variableNames[n],a=!1;h[r]=e.getUniformLocation(c,r,a),h["offset"+r]=e.getUniformLocation(c,"offset"+r,a)}return{program:t,source:l,webGLProgram:c,uniformLocations:h,inShapeInfos:i,outShapeInfo:u,infLoc:d,nanLoc:p}}(this.gpgpu,e,l,d))),m=null!=this.activeTimers;let g;m&&(g=this.startTimer()),function(e,t,n,r,a){st(t.inShapeInfos,n),st([t.outShapeInfo],[r]);const o=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(o,i[0],i[1]):e.setOutputMatrixTexture(o,i[0],i[1]),e.setProgram(t.webGLProgram),1===(0,s.env)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const a=t.program.variableNames[r],o=t.uniformLocations[a],i=t.uniformLocations["offset"+a];if(null!=o)if(n.isUniform)if(s.util.sizeFromShape(n.shape)<2)e.gl.uniform1f(o,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(o,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,o,r)})),null!=a&&a(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,h,l,d,r),u.forEach((e=>this.disposeIntermediateTensorInfo(e))),m&&(g=this.endTimer(g),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(g)}));const y=(0,s.env)().get("WEBGL_FLUSH_THRESHOLD");if(y>0){const e=s.util.now();e-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!(0,s.env)().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===a){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,r,a=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,r,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||((0,s.env)().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,s.tidy)((()=>{if(!(0,s.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=(0,s.env)().getBool("DEBUG");(0,s.env)().set("DEBUG",!1);const t=this.abs((0,s.scalar)(1e-8)).dataSync()[0];if((0,s.env)().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:a,texture:o,usage:i,isPacked:u}=t;if(null!=o)return;const l=null!=this.activeTimers;let c;l&&(c=s.util.now());let p=t.texShape;if(null==p&&(p=K(n,u),t.texShape=p),null!=a){const e=j(n);let o,i=p[1],h=p[0];const f=a instanceof Uint8Array;u?([i,h]=m(p[0],p[1]),o=new we(e,[h,i],f)):o=new ke(e,[h,i],f);const g=this.makeTensorInfo([h,i],r);this.texData.get(g.dataId).usage=f?d.PIXELS:d.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId),i,h,a);const y=!0,b=this.runWebGLProgram(o,[g],r,null,y),x=this.texData.get(b.dataId);t.texture=x.texture,t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,this.disposeIntermediateTensorInfo(g),this.texData.delete(b.dataId),t.values=null,l&&(this.uploadWaitMs+=s.util.now()-c)}else{const e=this.acquireTexture(p,i,r,u);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error("Unknown dtype "+t)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*s.util.bytesPerElement(t)}}Qt.nextDataId=0;const Zt="3.2.0";function Jt(){(0,s.env)().set("WEBGL_FORCE_F16_TEXTURES",!0)}s.device_util.isBrowser()&&(0,s.registerBackend)("webgl",(()=>new Qt),2);const en={forceHalfFloat:Jt};class tn{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=s.backend_util.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class nn{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s.backend_util.assertAndGetBroadcastShape(t,n);const a=this.outputShape.length;let o="";if(r)if(0===a||1===s.util.sizeFromShape(this.outputShape))o="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(o=`\n          ${nt(a)} coords = getOutputCoords();\n        `,1===a)o+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=Bt("coords",a);o+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${o}\n\n        setOutput(result);\n      }\n    `}}function rn(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const an={kernelName:s.Identity,backendName:"webgl",kernelFunc:rn};function sn(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(s.dataId),i=rn({inputs:{x:r},backend:n}),u=rn({inputs:{x:a},backend:n});return o.complexTensorInfos={real:i,imag:u},s}const on={kernelName:s.Complex,backendName:"webgl",kernelFunc:sn},un="return (a < 0.) ? b * a : a;",ln="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",cn={kernelName:s.LeakyRelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:o}=r,i=n.makeTensorInfo([],"float32",s.util.createScalarValue(o,"float32")),u=(0,s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nn(ln,a.shape,i.shape):new tn(un,a.shape,i.shape),l=n.runWebGLProgram(u,[a,i],a.dtype);return n.disposeIntermediateTensorInfo(i),l}},dn="return (a < 0.) ? b * a : a;",pn="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",hn={kernelName:s.Prelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:a}=t,o=(0,s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nn(pn,r.shape,a.shape):new tn(dn,r.shape,a.shape);return n.runWebGLProgram(o,[r,a],r.dtype)}};function fn({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:a,backend:o})=>{const{x:i}=a,u=o,l=r||i.dtype;if(u.shouldExecuteOnCPU([i])&&null!=n){const e=u.texData.get(i.dataId),t=n(e.values,l);return u.makeTensorInfo(i.shape,l,t)}let c;return c=(0,s.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new qt(i.shape,t):new Gt(i.shape,e),u.runWebGLProgram(c,[i],l)}}function mn({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:a,dtype:o}){return({inputs:i,backend:u})=>{const{a:l,b:c}=i,d=u;if(r&&"complex64"===l.dtype){const t=d.texData.get(l.dataId),n=d.texData.get(c.dataId),[r,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,a={dataId:n.dataId,dtype:n.dtype,shape:l.shape},o={dataId:r.dataId,dtype:r.dtype,shape:c.shape},i=new tn(e,l.shape,c.shape);return d.runWebGLProgram(i,[a,o],(0,s.upcastType)(n.dtype,r.dtype))})),o=sn({inputs:{real:r,imag:a},backend:d});return d.disposeIntermediateTensorInfo(r),d.disposeIntermediateTensorInfo(a),o}const p=o||(0,s.upcastType)(l.dtype,c.dtype);if(d.shouldExecuteOnCPU([l,c])&&null!=a){const e=d.texData.get(l.dataId),t=d.texData.get(c.dataId),[n,r]=a(l.shape,c.shape,e.values,t.values,p),s=d.makeTensorInfo(r,p);return d.texData.get(s.dataId).values=n,s}let h;return h=(0,s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new nn(t,l.shape,c.shape,n):new tn(e,l.shape,c.shape),d.runWebGLProgram(h,[l,c],p)}}function gn(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?pn:dn;if("leakyrelu"===e)return t?ln:un;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class yn{constructor(e,t,n,r=!1,a=!1,s=!1,o=null,i=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const l=r?e[1]:e[2],c=Math.ceil(l/2),d=r?"i * 2, rc.y":"rc.y, i * 2",p=a?"rc.z, i * 2":"i * 2, rc.z",h=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const y=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${f[0]});\n          result += (${h[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class bn{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=s.backend_util.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const xn="return a * b;";function vn(e){const{inputs:t,backend:n}=e,{a:r,b:a}=t,o=s.backend_util.upcastType(r.dtype,a.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(a.dataId),s=new bn("return areal * breal - aimag * bimag;",r.shape,a.shape),o=new bn("return areal * bimag + aimag * breal;",r.shape,a.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],u=n.runWebGLProgram(s,i,"float32"),l=n.runWebGLProgram(o,i,"float32"),c=sn({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,a])){const e=n.texData.get(r.dataId),t=n.texData.get(a.dataId),[s,i]=It(r.shape,a.shape,e.values,t.values,o),u=n.makeTensorInfo(i,o);return n.texData.get(u.dataId).values=s,u}let i;return i=(0,s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nn(xn,r.shape,a.shape):new tn(xn,r.shape,a.shape),n.runWebGLProgram(i,[r,a],o)}const kn={kernelName:s.Multiply,backendName:"webgl",kernelFunc:vn};function wn(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:o}=r,i=n,u=s.util.sizeFromShape(a.shape),l=s.util.inferFromImplicitShape(o,u),c=s.util.sizeFromShape(l);s.util.assert(u===c,(()=>`The new shape (${l}) has ${c} elements and the old shape (${a.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`));const d=i.texData.get(a.dataId);return!d.isPacked||Q(a.shape,l)||null!==d.texture&&Q(d.shape,l)?(i.incRef(a.dataId),{dataId:a.dataId,shape:l,dtype:a.dtype}):function(e,t,n){const r=[X(e.shape),...q(e.shape)],a={dtype:e.dtype,shape:r,dataId:e.dataId},s=[X(t),...q(t)],o=new Lt(s,r),i=n.runWebGLProgram(o,[a],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}(a,l,i)}const In={kernelName:s.Reshape,backendName:"webgl",kernelFunc:wn};class Nn{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:o}=e;this.outputShape=[r,o];const i=4*Math.floor(n/4),u=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${s.util.isInt(e)?e.toPrecision(2):e}, ones);`}let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Tn{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let d=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(o="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(o="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let h="";a%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${h}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function Sn(e,t,n,r){const a=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=s.backend_util.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let o=e;for(let s=0;s<a.length;s++){const{inSize:i,windowSize:u,outSize:l}=a[s];let c,d;c="mean"===n?0===s?new Nn({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},i):new Nn({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l}):new Tn({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},n),d=o,o=r.runWebGLProgram(c,[o],t),d.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(d)}return o}class Cn{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=nt(this.rank),a=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class En{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=nt(this.rank),a=Mt("rc",this.rank),s=new Array(this.rank);for(let e=0;e<t.length;e++)s[t[e]]=a[e];const o=`vec2(${s.slice(-2).join()})`,i=`++${a[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${s.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function _n(e,t,n){const r=(0,s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new En(e.shape,t):new Cn(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function $n(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o,keepDims:i}=r;return function(e,t,n,r){const a=t,o=e.shape.length,i=s.util.parseAxisParam(a,e.shape);let u=i;const l=s.backend_util.getAxesPermutation(u,o),c=null!=l;let d=e;c&&(d=_n(e,l,r),u=s.backend_util.getInnerMostAxes(u.length,o)),s.backend_util.assertAxesAreInnerMostDims("sum",u,o);const[p,h]=s.backend_util.computeOutAndReduceShapes(d.shape,u);let f=p;n&&(f=s.backend_util.expandShapeToKeepDim(p,i));const m=s.util.sizeFromShape(h),g=wn({inputs:{x:d},attrs:{shape:[s.util.sizeFromShape(e.shape)/m,m]},backend:r}),y=Sn(g,(0,s.sumOutType)(e.dtype),"sum",r),b=wn({inputs:{x:y},attrs:{shape:f},backend:r});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(y),c&&r.disposeIntermediateTensorInfo(d),b}(a,o,i,n)}const An={kernelName:s.Sum,backendName:"webgl",kernelFunc:$n};function Rn(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{perm:s}=r,o=n,i=a.shape.length,u=new Array(i);for(let e=0;e<u.length;e++)u[e]=a.shape[s[e]];let l;if(o.shouldExecuteOnCPU([a])){const e=o.texData.get(a.dataId).values,t=Ot(e,a.shape,a.dtype,s,u);l=o.makeTensorInfo(u,a.dtype),o.texData.get(l.dataId).values=t}else l=_n(a,s,o);return l}const Fn={kernelName:s.Transpose,backendName:"webgl",kernelFunc:Rn};function On({a:e,b:t,transposeA:n,transposeB:r,backend:a,bias:o=null,preluActivationWeights:i=null,leakyreluAlpha:u=0,activation:l=null}){const c=e.shape.length,d=t.shape.length,p=n?e.shape[c-2]:e.shape[c-1],h=r?t.shape[d-1]:t.shape[d-2],f=n?e.shape[c-1]:e.shape[c-2],m=r?t.shape[d-2]:t.shape[d-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),b=s.util.sizeFromShape(g),x=s.util.sizeFromShape(y),v=b===x||1===b||1===x;s.util.assert(c>=2&&d>=2&&v,(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${y}).`));const k=(b>x?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([f,m]);s.util.assert(p===h,(()=>`Error in matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[b,p,f]:[b,f,p],I=r?[x,m,h]:[x,h,m],N=wn({inputs:{x:e},backend:a,attrs:{shape:w}}),T=wn({inputs:{x:t},backend:a,attrs:{shape:I}}),S=[N,T],C=Math.max(b,x),E=n?N.shape[1]:N.shape[2],_=null!=o,$=null!=i,A="leakyrelu"===l,R=null!=l?gn(l,!0):null;let F;if((1===f||1===m)&&E>1e3&&!1===(_||$||A||null!=R)){let e=N,t=T;n&&(e=Rn({inputs:{x:N},backend:a,attrs:{perm:[0,2,1]}}),S.push(e)),r&&(t=Rn({inputs:{x:T},backend:a,attrs:{perm:[0,2,1]}}),S.push(t));const s=1===m;let o=e;1!==m&&(o=wn({inputs:{x:e},backend:a,attrs:{shape:[C,E,1]}}),S.push(o));const i=1===m?2:1;let u=t;s&&(u=wn({inputs:{x:t},backend:a,attrs:{shape:[C,1,E]}}),S.push(u));const l=vn({inputs:{a:o,b:u},backend:a});F=$n({inputs:{x:l},backend:a,attrs:{axis:i,keepDims:!0}}),S.push(l)}else{const l=(0,s.upcastType)(e.dtype,t.dtype),c=new yn(w,I,[C,f,m],n,r,_,R,$,A),d=[N,T];if(null!=o&&d.push(o),$&&d.push(i),A){const e=a.makeTensorInfo([],"float32",s.util.createScalarValue(u,"float32"));d.push(e),S.push(e)}F=a.runWebGLProgram(c,d,l)}const O=wn({inputs:{x:F},backend:a,attrs:{shape:k}});S.push(F);for(const e of S)a.disposeIntermediateTensorInfo(e);return O}const Dn={kernelName:s._FusedMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a,b:s,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:d}=r;return On({a,b:s,transposeA:u,transposeB:l,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:d,activation:c})}},Mn="return abs(x);",Bn={kernelName:s.Abs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=Et(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let a;return a=(0,s.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new qt(r.shape,Mn):new Gt(r.shape,Mn),n.runWebGLProgram(a,[r],r.dtype)}},Pn=fn({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),Ln={kernelName:s.Acos,backendName:"webgl",kernelFunc:Pn},Vn=fn({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),zn={kernelName:s.Acosh,backendName:"webgl",kernelFunc:Vn},Wn="return a + b;",Un=mn({opSnippet:Wn,packedOpSnippet:Wn,supportsComplex:!0,cpuKernelImpl:it}),Gn={kernelName:s.Add,backendName:"webgl",kernelFunc:Un};class Hn{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>"T"+t));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>"v"+e)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class Xn{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>"T"+t));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>"v"+e)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const qn={kernelName:s.AddN,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,a=n;if(1===a.length)return rn({inputs:{x:a[0]},backend:r});if(a.length>(0,s.env)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(a.length/2),n=e({inputs:a.slice(0,t),backend:r}),s=e({inputs:a.slice(t),backend:r});return e({inputs:[n,s],backend:r})}const o=a.map((e=>e.dtype)).reduce(((e,t)=>(0,s.upcastType)(e,t))),i=a.map((e=>e.shape)),u=(0,s.env)().getBool("WEBGL_PACK")?new Xn(a[0].shape,i):new Hn(a[0].shape,i);return r.runWebGLProgram(u,a,o)}},jn={kernelName:s.All,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o,keepDims:i}=r,u=a.shape.length,l=s.util.parseAxisParam(o,a.shape);let c=l;const d=s.backend_util.getAxesPermutation(c,u);let p=a;null!=d&&(p=Rn({inputs:{x:a},backend:n,attrs:{perm:d}}),c=s.backend_util.getInnerMostAxes(c.length,u)),s.backend_util.assertAxesAreInnerMostDims("all",c,u);const[h,f]=s.backend_util.computeOutAndReduceShapes(p.shape,c),m=wn({inputs:{x:p},backend:n,attrs:{shape:[-1,s.util.sizeFromShape(f)]}}),g=Sn(m,m.dtype,"all",n);let y;return y=wn(i?{inputs:{x:g},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(h,l)}}:{inputs:{x:g},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=d&&n.disposeIntermediateTensorInfo(p),y}},Kn={kernelName:s.Any,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o,keepDims:i}=r,u=a.shape.length,l=s.util.parseAxisParam(o,a.shape);let c=l;const d=s.backend_util.getAxesPermutation(c,u);let p=a;null!=d&&(p=Rn({inputs:{x:a},backend:n,attrs:{perm:d}}),c=s.backend_util.getInnerMostAxes(c.length,u)),s.backend_util.assertAxesAreInnerMostDims("any",c,u);const[h,f]=s.backend_util.computeOutAndReduceShapes(p.shape,c),m=wn({inputs:{x:p},backend:n,attrs:{shape:[-1,s.util.sizeFromShape(f)]}}),g=Sn(m,m.dtype,"any",n);let y;return y=wn(i?{inputs:{x:g},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(h,l)}}:{inputs:{x:g},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=d&&n.disposeIntermediateTensorInfo(p),y}};class Yn{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:a,outSize:s}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,s];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Qn{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,s.util.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const a=e[e.length-1],o=Math.ceil(a/t);this.outputShape=e.slice(0,-1),o>1&&this.outputShape.push(o),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,u=i.length,l=nt(u),c=Bt("coords",u);let d,p;if(1===o){p=u+1;const e=nt(p);d=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[u-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[u-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[u-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[u-2]};`}else p=u,d=`\n        ${l} sourceLocR = coords;\n        ++${c[u-1]};\n        ${l} sourceLocG = coords;\n        ++${c[u-2]};\n        ${l} sourceLocA = coords;\n        --${c[u-1]};\n        ${l} sourceLocB = coords;\n        --${c[u-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),f="."+h[p-1],m=h.map((e=>"int "+e)),g=Bt("sourceLocR",p-1).concat("inIdx.r"),y=Bt("sourceLocG",p-1).concat("inIdx.g"),b=Bt("sourceLocB",p-1).concat("inIdx.b"),x=Bt("sourceLocA",p-1).concat("inIdx.a"),v="max"===n?"greaterThan":"lessThan",k=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,w=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,I=r?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${I}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${c[u-1]} < ${i[u-1]-1};\n        bool hasNextRow = ${c[u-2]} < ${i[u-2]-1};\n        ${d}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${w};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${k}\n          vec4 candidate = ${w};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Zn(e,t,n,r=null){let a=t.shape[0],o=t.shape[1];null!=r&&(a=r.shape[0],o=r.shape[1]);const i=s.backend_util.computeOptimalWindowSize(o),u={windowSize:i,inSize:o,batchSize:a,outSize:Math.ceil(o/i)},l=new Yn(u,n,null==r),c=[t];null!=r&&c.push(r);const d=e.runWebGLProgram(l,c,"int32");if(1===d.shape[1])return d;const p=Zn(e,t,n,d);return e.disposeIntermediateTensorInfo(d),p}function Jn(e,t,n,r=null){const a=null!=r?r.shape:t.shape,o=a[a.length-1],i=s.backend_util.computeOptimalWindowSize(o),u=new Qn(a,i,n,null==r),l=null==r?[t]:[t,r],c=e.runWebGLProgram(u,l,"int32");if(c.shape.length===t.shape.length){const r=Jn(e,t,n,c);return e.disposeIntermediateTensorInfo(c),r}return c}function er(e,t,n,r){const a=[n];if(s.backend_util.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),a,t.shape.length),!(0,s.env)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[o,i]=s.backend_util.computeOutAndReduceShapes(t.shape,a),u=s.util.sizeFromShape(i),l=wn({inputs:{x:t},backend:e,attrs:{shape:[-1,u]}});n.push(l);const c=Zn(e,l,r);n.push(c);const d=wn({inputs:{x:c},backend:e,attrs:{shape:o}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),d}return Jn(e,t,r)}const tr={kernelName:s.ArgMax,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o}=r;let i=s.util.parseAxisParam(o,a.shape);const u=s.backend_util.getAxesPermutation(i,a.shape.length);let l=a;const c=[];null!=u&&(l=Rn({inputs:{x:a},backend:n,attrs:{perm:u}}),c.push(l),i=s.backend_util.getInnerMostAxes(i.length,l.shape.length)),s.backend_util.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);const d=er(n,l,i[0],"max");return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},nr={kernelName:s.ArgMin,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o}=r;let i=s.util.parseAxisParam(o,a.shape);const u=s.backend_util.getAxesPermutation(i,a.shape.length);let l=a;const c=[];null!=u&&(l=Rn({inputs:{x:a},backend:n,attrs:{perm:u}}),c.push(l),i=s.backend_util.getInnerMostAxes(i.length,l.shape.length)),s.backend_util.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);const d=er(n,l,i[0],"min");return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},rr=fn({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),ar={kernelName:s.Asin,backendName:"webgl",kernelFunc:rr},sr=fn({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),or={kernelName:s.Asinh,backendName:"webgl",kernelFunc:sr},ir=fn({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),ur={kernelName:s.Atan,backendName:"webgl",kernelFunc:ir},lr=mn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),cr={kernelName:s.Atan2,backendName:"webgl",kernelFunc:lr},dr=fn({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),pr={kernelName:s.Atanh,backendName:"webgl",kernelFunc:dr};class hr{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=e.padInfo.top,h=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${p}, ${h});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?a?m:g:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(s/4),v=s%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${p}, ${h});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class fr{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideDepth,i=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,d=e.dilationWidth,p=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${h};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${h} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / count");const k=4*Math.floor(s/4),w=s%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${v});\n        }\n      }\n    `}}const mr={kernelName:s.AvgPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;de(a,"avgPool");const{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=r;s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=s.backend_util.computePool2DInfo(a.shape,o,i,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&s.util.arraysEqual(c.inShape,c.outShape))return rn({inputs:{x:a},backend:n});const d=new hr(c,"avg",!1);return n.runWebGLProgram(d,[a],"float32")}},gr={kernelName:s.AvgPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:l,dataFormat:c}=r,d=s.backend_util.computePool3DInfo(a.shape,o,i,[1,1,1],u,l,c),p=new fr(d,"avg",!1);return n.runWebGLProgram(p,[a],"float32")}};class yr{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=i-1-e.padInfo.top,c=u-1-e.padInfo.left,d=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class br{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,d=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=c-1-e.padInfo.front,f=d-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${h}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xr={kernelName:s.AvgPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:o}=t,i=o,{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=r,p=s.backend_util.computePool3DInfo(i.shape,u,l,[1,1,1],c,d),h=new br(p);return n.runWebGLProgram(h,[a],i.dtype)}},vr={kernelName:s.AvgPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:o}=t,i=o;de([a,o],"avgPoolGrad");const{filterSize:u,strides:l,pad:c}=r,d=s.backend_util.computePool2DInfo(i.shape,u,l,1,c),p=new yr(d);return n.runWebGLProgram(p,[a],i.dtype)}},kr={kernelName:s.BatchMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a,b:s}=t,{transposeA:o,transposeB:i}=r;return On({a,b:s,transposeA:o,transposeB:i,backend:n})}};class wr{constructor(e,t,n,r,a,o){this.outputShape=[],this.variableNames=["x","mean","variance"],s.backend_util.assertAndGetBroadcastShape(e,t),s.backend_util.assertAndGetBroadcastShape(e,n);let i="0.0";null!=r&&(s.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let u="1.0";null!=a&&(s.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${u};\n        float inv = scale * inversesqrt(variance + float(${o}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Ir{constructor(e,t,n,r,a,o){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],s.backend_util.assertAndGetBroadcastShape(e,t),s.backend_util.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=r&&(s.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let u="vec4(1.0)";null!=a&&(s.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${u};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${o}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Nr={kernelName:s.FusedBatchNorm,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:a,variance:o,offset:i,scale:u}=e;s.util.assert(a.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),s.util.assert(null==i||a.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),s.util.assert(null==u||a.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const c=[r,a,o];let d=null;null!=i&&(d=i.shape,c.push(i));let p=null;null!=u&&(p=u.shape,c.push(u));const h=(0,s.env)().getBool("WEBGL_PACK_NORMALIZATION")?new Ir(r.shape,a.shape,o.shape,d,p,l):new wr(r.shape,a.shape,o.shape,d,p,l);return t.runWebGLProgram(h,c,c[0].dtype)}};class Tr{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=nt(this.rank),n=`uniform int start[${this.rank}];`,r=function(e){if(1===e)return"sourceLoc";if(e<=6)return Sr.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let a;a=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${Sr[t]} = start[${t}] + coords.${Sr[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${a}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const Sr=["x","y","z","w","u","v"];class Cr{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=nt(this.rank),n=Bt("coords",this.rank),r=Bt("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,s=`getChannel(getSource(${r.join()}), ${a})`,o=`\n      result.x = ${s};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${s};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${s};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${s};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function Er(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:o,size:i}=r,[u,l]=s.slice_util.parseSliceParams(a,o,i);if(s.slice_util.assertParamsValid(a,u,l),0===s.util.sizeFromShape(l))return n.makeTensorInfo(l,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=_t(e.values,u,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,t)}const{isPacked:c}=n.texData.get(a.dataId),d=s.slice_util.isSliceContinous(a.shape,u,l);if(c||!d){const e=(0,s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Cr(l):new Tr(l),t=e.getCustomSetupFunc(u);return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,r){const a=r.texData.get(e.dataId),o=r.makeTensorInfo(n,e.dtype),i=r.texData.get(o.dataId);Object.assign(i,a),i.refCount=1,i.shape=n,i.dtype=e.dtype;let u=s.slice_util.computeFlatOffset(t,s.util.computeStrides(e.shape));a.slice&&(u+=a.slice.flatOffset),i.slice={flatOffset:u,origDataId:a.slice&&a.slice.origDataId||e.dataId};const l=r.dataRefCount.get(i.slice.origDataId)||1;return r.dataRefCount.set(i.slice.origDataId,l+1),o}(a,u,l,n)}const _r={kernelName:s.Slice,backendName:"webgl",kernelFunc:Er},$r={kernelName:s.BatchToSpaceND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:o,crops:i}=r;s.util.assert(a.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const u=o.reduce(((e,t)=>e*t)),l=s.backend_util.getReshaped(a.shape,o,u),c=s.backend_util.getPermuted(l.length,o.length),d=s.backend_util.getReshapedPermuted(a.shape,o,u),p=s.backend_util.getSliceBeginCoords(i,o.length),h=s.backend_util.getSliceSize(d,i,o.length),f=[],m=wn({inputs:{x:a},backend:n,attrs:{shape:l}}),g=Rn({inputs:{x:m},backend:n,attrs:{perm:c}}),y=wn({inputs:{x:g},backend:n,attrs:{shape:d}}),b=Er({inputs:{x:y},backend:n,attrs:{begin:p,size:h}});return f.push(m),f.push(g),f.push(y),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},Ar={kernelName:s.Bincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o}=r,i=n.readSync(a.dataId),u=n.readSync(s.dataId),l=ut(i,u,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,l)}},Rr=mn({opSnippet:"return float(a != b);",dtype:"bool"}),Fr={kernelName:s.NotEqual,backendName:"webgl",kernelFunc:Rr};function Or(e){const{inputs:t,backend:n}=e,{input:r}=t;return rn({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const Dr={kernelName:s.Real,backendName:"webgl",kernelFunc:Or},Mr={kernelName:s.Cast,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:a}=t,{x:o}=n,{dtype:i}=a;if("complex64"===i){if("complex64"===o.dtype)return rn({inputs:{x:o},backend:r});const t=s.zeros(o.shape),n=e({inputs:{x:o},backend:r,attrs:{dtype:"float32"}}),a=sn({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),a}if("complex64"===o.dtype){const t=Or({inputs:{input:o},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(t),n}if(!s.util.hasEncodingLoss(o.dtype,i)){const e=rn({inputs:{x:o},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new Gt(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(o,r);if("bool"===i){const e=r.makeTensorInfo([],"bool",s.util.getTypedArrayFromDType("bool",1)),t=Rr({inputs:{a:o,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${o.dtype} to ${i}`)}},Br="return ceil(x);",Pr=fn({opSnippet:Br,packedOpSnippet:Br,cpuKernelImpl:ct}),Lr={kernelName:s.Ceil,backendName:"webgl",kernelFunc:Pr};class Vr{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class zr{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const Wr={kernelName:s.ClipByValue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{clipValueMin:o,clipValueMax:i}=r;let u;u=(0,s.env)().getBool("WEBGL_PACK_CLIP")?new zr(a.shape):new Vr(a.shape);const l=u.getCustomSetupFunc(o,i);return n.runWebGLProgram(u,[a],a.dtype,l)}};class Ur{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function Gr(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const Hr={kernelName:s.ComplexAbs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=n.texData.get(r.dataId),s=new Ur(r.shape),o=[Gr(r,a.complexTensorInfos.real),Gr(r,a.complexTensorInfos.imag)];return n.runWebGLProgram(s,o,o[0].dtype)}};class Xr{constructor(e){this.outputShape=[],this.outputShape=s.backend_util.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>"T"+t));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,a=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class qr{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=s.backend_util.computeOutShape(e,t);const n=this.outputShape,r=n.length,a=nt(r),o=Bt("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>"T"+t));const u=new Array(e.length-1);u[0]=e[0][t];for(let n=1;n<u.length;n++)u[n]=u[n-1]+e[n][t];const l=i[t],c=i.slice(-2),d=i.join();let p=`if (${l} < ${u[0]}) {\n        return getChannel(\n            getT0(${d}), vec2(${c.join()}));\n        }`;for(let e=1;e<u.length;e++){const t=u[e-1];p+=`\n        if (${l} < ${u[e]}  && ${l} >= ${u[e-1]}) {\n          return getChannel(\n            getT${e}(${jr(i,l,t)}),\n            vec2(${jr(c,l,t)}));\n        }`}const h=u.length,f=u[u.length-1];p+=`\n        return getChannel(\n          getT${h}(${jr(i,l,f)}),\n          vec2(${jr(c,l,f)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${o}), 0., 0., 0.);\n\n        ${o[r-1]} = ${o[r-1]} + 1;\n        if (${o[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${o});\n        }\n\n        ${o[r-2]} = ${o[r-2]} + 1;\n        if (${o[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${o});\n        }\n\n        ${o[r-1]} = ${o[r-1]} - 1;\n        if (${o[r-2]} < ${n[r-2]} &&\n            ${o[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${o});\n        }\n        setOutput(result);\n      }\n    `}}function jr(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function Kr(e){const{inputs:t,backend:n}=e,{input:r}=t;return rn({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const Yr={kernelName:s.Imag,backendName:"webgl",kernelFunc:Kr};function Qr(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>Or({inputs:{input:e},backend:n}))),a=e.map((e=>Kr({inputs:{input:e},backend:n}))),s=Qr(r,t,n),o=Qr(a,t,n),i=sn({inputs:{real:s,imag:o},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),a.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),i}if("string"===r){const{tensors2D:a,outShape:o}=Zr(e,t,n),i=a.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),u=1===a[0].shape[0],l=dt(i,o,r,u),c=s.backend_util.computeOutShape(e.map((e=>e.shape)),t),d=n.makeTensorInfo(c,r,l);return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}if(e.length>(0,s.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(e.length/2),a=Qr(e.slice(0,r),t,n),s=Qr(e.slice(r),t,n),o=Qr([a,s],t,n);return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}if((0,s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new qr(e.map((e=>e.shape)),t);return n.runWebGLProgram(a,e,r)}const{tensors2D:a,outShape:o}=Zr(e,t,n),i=new Xr(a.map((e=>e.shape))),u=n.runWebGLProgram(i,a,r);a.forEach((e=>n.disposeIntermediateTensorInfo(e)));const l=wn({inputs:{x:u},attrs:{shape:o},backend:n});return n.disposeIntermediateTensorInfo(u),l}function Zr(e,t,n){const r=s.backend_util.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>wn({inputs:{x:e},attrs:{shape:[-1,s.util.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:r}}function Jr(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,o=s.util.parseAxisParam(a,t[0].shape)[0],i=s.backend_util.computeOutShape(t.map((e=>e.shape)),o);if(0===s.util.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const u=t.filter((e=>s.util.sizeFromShape(e.shape)>0));if(1===u.length)return rn({inputs:{x:u[0]},backend:n});const l=u.map((e=>e.shape));return s.backend_util.assertParamsConsistent(l,o),Qr(u,o,n)}const ea={kernelName:s.Concat,backendName:"webgl",kernelFunc:Jr};class ta{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",v="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${i}, ${u});\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${h}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${h}) *\n                    getW(wR, wC, ${h}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${h}, xR, xC) *\n                    getW(wR, wC, ${h}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2),\n                getW(wR, wC, ${h} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1),\n                  getX(batch, xR, xC, ${h} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC),\n                  getX(batch, ${h} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${v}\n        setOutput(result);\n      }\n    `}}class na{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${s}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${h}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${h}) *\n                  getW(wF, wR, wC, ${h}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1),\n                  getX(batch, xF, xR, xC, ${h} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2),\n                  getW(wF, wR, wC, ${h} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ra{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:r,inChannels:a,strideWidth:s,strideHeight:o,padInfo:i,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:d}=n,{left:p,top:h}=i,f=a*r,m=he(),g="channelsLast"===d,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${o} - ${h};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${s}. - ${p}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${a}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${a}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function aa({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:u=null}){const l=e.shape,c=r.texData.get(e.dataId),d=n.inChannels,p=l[0]*l[1]*l[2],h=n.outChannels,f="channelsLast"===n.dataFormat;let m;const g=[],y=(1===p||1===h)&&d>1e3,b=l[2]%2!=0&&!!c.isPacked;if(!y&&(0,s.env)().getBool("WEBGL_LAZILY_UNPACK")&&(0,s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&b){const d=f?l[0]*l[1]*(l[2]+1):l[0]*l[2]*(l[3]+1),p={dataId:e.dataId,shape:[1,d,n.inChannels],dtype:e.dtype},h=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,s.util.assert(Q(c.shape,p.shape),(()=>`packed reshape ${c.shape} to ${p.shape} isn't free`));const y=wn({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(y);const b=On({a:p,b:y,backend:r,transposeA:!1,transposeB:!1,bias:a,activation:u,preluActivationWeights:o,leakyreluAlpha:i}),x=r.texData.get(b.dataId);s.util.assert(x.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=h,x.shape=n.outShape,m=rn({inputs:{x:b},backend:r}),m.shape=n.outShape,g.push(b)}else{const s=wn({inputs:{x:e},backend:r,attrs:{shape:[1,f?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=wn({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),d=On({a:s,b:c,transposeA:!1,transposeB:!1,backend:r,bias:a,activation:u,preluActivationWeights:o,leakyreluAlpha:i});m=wn({inputs:{x:d},backend:r,attrs:{shape:n.outShape}}),g.push(s),g.push(c),g.push(d)}for(const e of g)r.disposeIntermediateTensorInfo(e);return m}function sa({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:u=null}){const{filterWidth:l,filterHeight:c,inChannels:d,outWidth:p,outHeight:h,dataFormat:f}=n,m="channelsLast"===f,g=l*c*d,y=h*p,b=[g,y],x=[],v=wn({inputs:{x:e},backend:r,attrs:{shape:e.shape.slice(1)}}),k=wn({inputs:{x:t},backend:r,attrs:{shape:[1,g,s.util.sizeFromShape(t.shape)/g]}});x.push(v),x.push(k);const w=new ra(b,v.shape,n),I=r.runWebGLProgram(w,[v],"float32"),N=wn({inputs:{x:I},backend:r,attrs:{shape:[1,b[0],b[1]]}});x.push(I),x.push(N);const T=null!=a,S=null!=o,C="leakyrelu"===u,E=u?gn(u,!0):null,_=new yn(N.shape,k.shape,[1,y,n.outChannels],!0,!1,T,E,S,C),$=[N,k];if(a&&$.push(a),S&&$.push(o),C){const e=r.makeTensorInfo([],"float32",s.util.createScalarValue(i,"float32"));$.push(e),x.push(e)}const A=r.runWebGLProgram(_,$,"float32"),R=wn({inputs:{x:A},backend:r,attrs:{shape:m?[1,h,p,n.outChannels]:[1,n.outChannels,h,p]}});x.push(A);for(const e of x)r.disposeIntermediateTensorInfo(e);return R}const oa={kernelName:s.Conv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:o}=t,{strides:i,pad:u,dataFormat:l,dilations:c,dimRoundingMode:d}=r,p=s.backend_util.convertConv2DDataFormat(l),h=s.backend_util.computeConv2DInfo(a.shape,o.shape,i,c,u,d,!1,p);let f;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if((0,s.env)().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])f=sa({x:a,filter:o,convInfo:h,backend:n});else{const e=new ta(h);f=n.runWebGLProgram(e,[a,o],"float32")}else f=aa({x:a,filter:o,convInfo:h,backend:n});const m=wn({inputs:{x:f},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(f),m}};class ia{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${s}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ua{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,u=s?1:2,l=s?2:3,c=s?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${s}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class la{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.padInfo.front,s=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${a};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${s};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ca{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const da={kernelName:s.Conv2DBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:o}=t,{strides:i,pad:u,dataFormat:l,dimRoundingMode:c,filterShape:d}=r,p=s.backend_util.convertConv2DDataFormat(l),h=s.backend_util.computeConv2DInfo(a.shape,d,i,1,u,c,!1,p),f=new ia(h);return n.runWebGLProgram(f,[a,o],"float32")}},pa={kernelName:s.Conv2DBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:o}=t,{inputShape:i,strides:u,pad:l,dataFormat:c,dimRoundingMode:d}=r,p=s.backend_util.convertConv2DDataFormat(c),h=s.backend_util.computeConv2DInfo(i,o.shape,u,1,l,d,!1,p),f=new ua(h);return n.runWebGLProgram(f,[a,o],"float32")}},ha={kernelName:s.Conv3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:o}=t,{strides:i,pad:u,dilations:l}=r,c=s.backend_util.computeConv3DInfo(a.shape,o.shape,i,l,u),d=new na(c);return n.runWebGLProgram(d,[a,o],"float32")}},fa={kernelName:s.Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:o}=t,{strides:i,pad:u,filterShape:l}=r,c=s.backend_util.computeConv3DInfo(a.shape,l,i,1,u),d=new la(c);return n.runWebGLProgram(d,[a,o],"float32")}},ma={kernelName:s.Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:o}=t,{pad:i,strides:u,inputShape:l}=r,c=s.backend_util.computeConv3DInfo(l,o.shape,u,1,i),d=new ca(c);return n.runWebGLProgram(d,[a,o],"float32")}},ga=fn({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),ya={kernelName:s.Cos,backendName:"webgl",kernelFunc:ga},ba=fn({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),xa={kernelName:s.Cosh,backendName:"webgl",kernelFunc:ba};class va{constructor(e,t,n,r,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[s,o,i,u]=e,[l]=t,[c,d]=n;this.outputShape=[l,c,d,u];const p="bilinear"===r?1:0,[h,f]=[o-1+".0",i-1+".0"],[m,g,y]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+h],[b,x,v]=d>1?[""+(i-1)/(d-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${s}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${h} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const ka={kernelName:s.CropAndResize,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=r,c=new va(a.shape,s.shape,i,u,l);return n.runWebGLProgram(c,[a,s,o],"float32")}};class wa{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const r=e.length,a=t?"0.0":`getX(${Ia(r,"coords")})`,s=e[e.length-1];let o="",i="";t?(o=n?"end != "+(s-1):"end != 0",i=n?"end + 1":"end - 1"):(o=n?"end + pow2 < "+s:"end >= pow2",i=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${nt(r)} coords = getOutputCoords();\n        int end = ${Na(r,"coords")};\n        float val = ${a};\n        int pow2 = int(pow(2.0, index));\n        if (${o}) {\n          int idx = ${i};\n          ${Na(r,"coords")} = idx;\n          val += getX(${Ia(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function Ia(e,t){if(1===e)return""+t;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function Na(e,t){if(1===e)return""+t;if(2===e)return t+".y";if(3===e)return t+".z";if(4===e)return t+".w";throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const Ta={kernelName:s.Cumsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o,exclusive:i,reverse:u}=r,l=a.shape.length,c=s.backend_util.getAxesPermutation([o],l);let d=a;null!=c&&(d=Rn({inputs:{x:a},backend:n,attrs:{perm:c}}));const p=s.backend_util.getInnerMostAxes(1,l)[0];if(p!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${a.shape.length-1} but got axis=`+o);const h=d.shape[p];let f=rn({inputs:{x:d},backend:n});for(let e=0;e<=Math.ceil(Math.log2(h))-1;e++){const t=new wa(d.shape,!1,u),r=t.getCustomSetupFunc(e),a=f;f=n.runWebGLProgram(t,[f],f.dtype,r),n.disposeIntermediateTensorInfo(a)}if(i){const e=new wa(d.shape,i,u),t=f;f=n.runWebGLProgram(e,[f],f.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=c){const e=Rn({inputs:{x:f},backend:n,attrs:{perm:s.backend_util.getUndoAxesPermutation(c)}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(d),e}return f}},Sa={kernelName:s.DenseBincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o,binaryOutput:i}=r;if(1===a.shape.length){const e=n.readSync(a.dataId),t=n.readSync(s.dataId),r=ut(e,t,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,r)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(s),r=lt(e,t,o,i);return n.makeTensorInfo(r.shape,s.dtype,r.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+a.shape.length+".")}};class Ca{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const Ea={kernelName:s.DepthToSpace,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:o,dataFormat:i}=r;s.util.assert(o>1,(()=>"blockSize should be > 1 for depthToSpace, but was: "+o));const u=a.shape[0],l="NHWC"===i?a.shape[1]:a.shape[2],c="NHWC"===i?a.shape[2]:a.shape[3],d="NHWC"===i?a.shape[3]:a.shape[1],p=l*o,h=c*o,f=d/(o*o),m=new Ca("NHWC"===i?[u,p,h,f]:[u,f,p,h],o,i);return n.runWebGLProgram(m,[a],a.dtype)}};class _a{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.inHeight,o=e.inWidth,i=e.padInfo.top,u=e.padInfo.left,l=e.strideHeight,c=e.strideWidth,d=e.dilationHeight,p=e.dilationWidth,h=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${c});\n      const ivec2 pads = ivec2(${i}, ${u});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${d};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${o}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class $a{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const o=e.inHeight,i=e.inWidth,u=e.padInfo.top,l=e.padInfo.left,c=e.strideHeight,d=e.strideWidth,p=e.dilationHeight,h=e.dilationWidth,f=e.filterHeight,m=e.filterWidth,g=m;let y="int xR; int xC; int xCOffset;";for(let e=0;e<f;e++)for(let t=0;t<m;t++)y+=`\n          vec4 xTexelR${e}C${2*t} = vec4(0.);\n          vec4 wR${e}C${t} = vec4(0.);\n          vec4 xR${e}C${t} = vec4(0.);`;for(let e=0;e<f;e++)for(let t=0;t<g;t++){const n=2*t;if(y+=`\n          xR = xRCorner + ${e*p};\n          xC = xCCorner + ${n*h};\n        `,1===d){if(n<m&&(y+=l%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${o} && xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    xTexelR${e}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${o} && xCOffset >= 0 && xCOffset < ${i}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${e}C${n} = vec4(previous.zw, xTexelR${e}C${n}.xy);\n                } else {\n                  xR${e}C${n} = vec4(0, 0, xTexelR${e}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${o} && xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xR${e}C${n} = xTexelR${e}C${n};\n              `,n+1<m)){const t=l%2==0?s.util.nearestLargerEven(h):h;h%2==0&&l%2==1||h%2!=0&&l%2!=1?(y+=`\n                  xCOffset = xC + ${l%2} + ${t};\n\n                  if(xR >= 0 && xR < ${o} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(y+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${o} &&\n                      xCOffset >= 0 && xCOffset < ${i}) {\n                      xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${e}C${n} = vec4(0.);\n                    }\n                  `),y+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.xy);\n                `):y+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${o} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${e}C${n+1} = xTexelR${e}C${n+2};\n                `}}else n<m&&(y+=`\n              if(xR >= 0 && xR < ${o}) {\n            `,l%2==1?(y+=`\n                xCOffset = xC + 1 - ${d};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n              `,n+1<m&&(y+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${d};\n                  if(xCOffset >= 0 && xCOffset < ${i}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${e}C${n+1} = vec4(xTexelR${e}C${n+2}.xy, final.xy);\n                `)):(y+=`\n                if(xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${d};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.xy, xTexelR${e}C${n+2}.xy);\n              `,n+1<m&&(y+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n                `)),y+="}");n<m&&(y+=`\n            vec4 wTexelR${e}C${n} = getW(${e}, ${n}, d1, q);\n            wR${e}C${n} = vec4(wTexelR${e}C${n}.xz, wTexelR${e}C${n}.xz);\n          `,n+1<m&&(y+=`\n              vec4 wTexelR${e}C${n+1} = getW(${e}, ${n+1}, d1, q);\n              wR${e}C${n+1} =\n                vec4(wTexelR${e}C${n+1}.xz, wTexelR${e}C${n+1}.xz);`))}for(let e=0;e<f;e++)for(let t=0;t<m;t++)y+=`dotProd += xR${e}C${t} * wR${e}C${t};`;let b="",x="";n&&(b=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,x="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${c}, ${d});\n      const ivec2 pads = ivec2(${u}, ${l});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${y}\n\n        vec4 result = dotProd;\n        ${v}\n        ${x}\n        setOutput(result);\n      }\n    `}}const Aa={kernelName:s.DepthwiseConv2dNative,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:o}=t,{strides:i,pad:u,dilations:l,dimRoundingMode:c}=r;let d=l;null==d&&(d=[1,1]),s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(i,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`));const p=s.backend_util.computeConv2DInfo(a.shape,o.shape,i,d,u,c,!0);let h;return h=(0,s.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new $a(p):new _a(p),n.runWebGLProgram(h,[a,o],"float32")}};class Ra{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${s} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Fa{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Oa={kernelName:s.DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:o}=t,{strides:i,dilations:u,pad:l,dimRoundingMode:c,filterShape:d}=r,p=s.backend_util.computeConv2DInfo(a.shape,d,i,u,l,c,!0),h=new Ra(p);return n.runWebGLProgram(h,[a,o],"float32")}},Da={kernelName:s.DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:o}=t,{strides:i,dilations:u,pad:l,dimRoundingMode:c,inputShape:d}=r,p=s.backend_util.computeConv2DInfo(d,o.shape,i,u,l,c,!0),h=new Fa(p);return n.runWebGLProgram(h,[a,o],"float32")}};class Ma{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const Ba={kernelName:s.Diag,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=[...r.shape,...r.shape],o=s.util.sizeFromShape(r.shape),i=wn({inputs:{x:r},backend:n,attrs:{shape:[o]}}),u=new Ma(o),l=n.runWebGLProgram(u,[i],i.dtype),c=wn({inputs:{x:l},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),c}};class Pa{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:a,strideWidth:s,filterHeight:o,filterWidth:i,dilationHeight:u,dilationWidth:l}=e,{top:c,left:d}=r;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${s});\n      const ivec2 pads = ivec2(${c}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const La={kernelName:s.Dilation2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:o}=t,{strides:i,pad:u,dilations:l}=r,c=s.backend_util.computeDilation2DInfo(a.shape,o.shape,i,u,"NHWC",l);let d;const p=new Pa(c);d=n.runWebGLProgram(p,[a,o],"float32");const h=wn({inputs:{x:d},backend:n,attrs:{shape:c.outShape}});return n.disposeIntermediateTensorInfo(d),h}},Va=fn({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),za={kernelName:s.Elu,backendName:"webgl",kernelFunc:Va},Wa={kernelName:s.EluGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:a}=t,o=(0,s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nn("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,a.shape):new tn("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,a.shape);return n.runWebGLProgram(o,[r,a],r.dtype)}},Ua=mn({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),Ga={kernelName:s.Equal,backendName:"webgl",kernelFunc:Ua},Ha=fn({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${s.backend_util.ERF_P};\n  float a1 = ${s.backend_util.ERF_A1};\n  float a2 = ${s.backend_util.ERF_A2};\n  float a3 = ${s.backend_util.ERF_A3};\n  float a4 = ${s.backend_util.ERF_A4};\n  float a5 = ${s.backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),Xa={kernelName:s.Erf,backendName:"webgl",kernelFunc:Ha},qa="return exp(x);",ja=fn({opSnippet:qa,packedOpSnippet:qa,cpuKernelImpl:pt}),Ka={kernelName:s.Exp,backendName:"webgl",kernelFunc:ja};function Ya(e){const{inputs:t,attrs:n,backend:r}=e,{dim:a}=n,{input:o}=t,i=o.shape.length,u=o.shape.slice();let l=a;return a<0&&(s.util.assert(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),u.splice(l,0,1),wn({inputs:{x:o},backend:r,attrs:{shape:u}})}const Qa={kernelName:s.ExpandDims,backendName:"webgl",kernelFunc:Ya},Za="return exp(x) - 1.0;",Ja=fn({opSnippet:Za,packedOpSnippet:Za,cpuKernelImpl:ht}),es={kernelName:s.Expm1,backendName:"webgl",kernelFunc:Ja};class ts{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const a=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,s=n?r+".0":"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${s};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function ns(e,t,n){const r=n.texData.get(e.dataId),a=s.util.sizeFromShape(e.shape),o=e.shape[e.shape.length-1],i=wn({inputs:{x:e},backend:n,attrs:{shape:[a/o,o]}}),u=i.shape,l=new ts("real",u,t),c=new ts("imag",u,t),d=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:u},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:u}],p=n.runWebGLProgram(l,d,"float32"),h=n.runWebGLProgram(c,d,"float32"),f=sn({inputs:{real:p,imag:h},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h);const m=wn({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(f),m}const rs={kernelName:s.FFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return ns(r,!1,n)}};class as{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function ss(e){const{backend:t,attrs:n}=e,{shape:r,value:a}=n;let{dtype:o}=n;if(o=o||s.util.inferDtype(a),"string"===o){const e=s.util.getArrayFromDType(o,s.util.sizeFromShape(r));return e.fill(a),t.makeTensorInfo(r,o,e)}{const e=new as(r,a),n=e.getCustomSetupFunc(a);return t.runWebGLProgram(e,[],o,n)}}const os={kernelName:s.Fill,backendName:"webgl",kernelFunc:ss};class is{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const us={kernelName:s.FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,a=new is(n.shape);return r.runWebGLProgram(a,[n],n.dtype)}},ls="return floor(x);",cs=fn({opSnippet:ls,packedOpSnippet:ls,cpuKernelImpl:ft}),ds={kernelName:s.Floor,backendName:"webgl",kernelFunc:cs},ps=mn({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),hs={kernelName:s.FloorDiv,backendName:"webgl",kernelFunc:ps};class fs{constructor(e){this.variableNames=["A"];const t=he(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class ms{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=he(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const gs={kernelName:s.FromPixels,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:a}=t;const{numChannels:o}=r,i="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,l="undefined"!=typeof ImageBitmap&&a instanceof ImageBitmap,[c,p]=i?[a.videoWidth,a.videoHeight]:[a.width,a.height],h=[p,c],f=[p,c,o];(u||i||l)&&(null==ys&&(ys=document.createElement("canvas").getContext("2d")),ys.canvas.width=c,ys.canvas.height=p,ys.drawImage(a,0,0,c,p),a=ys.canvas);const m=n.makeTensorInfo(h,"int32");n.texData.get(m.dataId).usage=d.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(m.dataId),a);const g=(0,s.env)().getBool("WEBGL_PACK")?new ms(f):new fs(f),y=n.runWebGLProgram(g,[m],"int32");return n.disposeData(m.dataId),y}};let ys;const bs={kernelName:s.FusedConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:o,bias:i,preluActivationWeights:u}=t,{strides:l,pad:c,dataFormat:d,dilations:p,dimRoundingMode:h,activation:f,leakyreluAlpha:m}=r,g=s.backend_util.convertConv2DDataFormat(d),y=s.backend_util.computeConv2DInfo(a.shape,o.shape,l,p,c,h,!1,g);let b;const x=[];if(1!==y.filterHeight||1!==y.filterWidth||1!==y.dilationHeight||1!==y.dilationWidth||1!==y.strideHeight||1!==y.strideWidth||"SAME"!==y.padInfo.type&&"VALID"!==y.padInfo.type)if((0,s.env)().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])b=sa({x:a,filter:o,convInfo:y,backend:n,bias:i,activation:f,preluActivationWeights:u,leakyreluAlpha:m});else{const e=null!=i,t=null!=u,r="leakyrelu"===f,l=f?gn(f,!1):null,c=new ta(y,e,l,t,r),d=[a,o];if(i&&d.push(i),u&&d.push(u),r){const e=n.makeTensorInfo([],"float32",s.util.createScalarValue(m,"float32"));d.push(e),x.push(e)}b=n.runWebGLProgram(c,d,"float32")}else b=aa({x:a,filter:o,convInfo:y,backend:n,bias:i,activation:f,preluActivationWeights:u,leakyreluAlpha:m});const v=wn({inputs:{x:b},backend:n,attrs:{shape:y.outShape}});return x.push(b),x.forEach((e=>n.disposeIntermediateTensorInfo(e))),v}},xs={kernelName:s.FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:o,bias:i,preluActivationWeights:u}=t,{strides:l,pad:c,dilations:d,dimRoundingMode:p,activation:h,leakyreluAlpha:f}=r,m=[];let g=d;null==g&&(g=[1,1]),s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(l,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`));const y=s.backend_util.computeConv2DInfo(a.shape,o.shape,l,g,c,p,!0),b=(0,s.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=h?gn(h,b):null,v=[a,o],k=null!=i,w=null!=u,I="leakyrelu"===h;if(k&&v.push(i),w&&v.push(u),I){const e=n.makeTensorInfo([],"float32",s.util.createScalarValue(f,"float32"));v.push(e),m.push(e)}let N;N=b?new $a(y,k,x,w,I):new _a(y,k,x,w,I);const T=n.runWebGLProgram(N,v,"float32");return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),T}};class vs{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=nt(t.length),a=nt(n.length),s=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${s};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const ks={kernelName:s.GatherNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:a}=t,o=a.shape,i=o[o.length-1],[u,l,c,d]=s.backend_util.prepareAndValidate(r,a),p=wn({inputs:{x:a},backend:n,attrs:{shape:[l,i]}}),h=wn({inputs:{x:r},backend:n,attrs:{shape:[s.util.sizeFromShape(r.shape)/c,c]}}),f=new vs(i,d,[l,c]),m=n.runWebGLProgram(f,[h,p],h.dtype),g=wn({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(m),g}};class ws{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=nt(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("int(getIndices(resRC.x, resRC.z))"):r.push(""+n[t]);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}const Is={kernelName:s.GatherV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,indices:o}=t,{axis:i,batchDims:u}=r,l=s.util.parseAxisParam(i,a.shape)[0],c=s.backend_util.segment_util.collectGatherOpShapeInfo(a,o,l,u),d=s.util.sizeFromShape(o.shape),p=[],h=wn({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),f=wn({inputs:{x:o},backend:n,attrs:{shape:[c.batchSize,d/c.batchSize]}});p.push(h),p.push(f);const m=[c.batchSize,c.outerSize,d/c.batchSize,c.sliceSize];if(n.shouldExecuteOnCPU([a,o])||"string"===a.dtype){const e=n.bufferSync(f),t=n.bufferSync(h),r=mt(t,e,m);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c.outputShape,r.dtype,r.values)}const g=new ws(h.shape,m),y=n.runWebGLProgram(g,[h,f],h.dtype);p.push(y);const b=wn({inputs:{x:y},backend:n,attrs:{shape:c.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},Ns=mn({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:gt,dtype:"bool"}),Ts={kernelName:s.Greater,backendName:"webgl",kernelFunc:Ns},Ss=mn({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),Cs={kernelName:s.GreaterEqual,backendName:"webgl",kernelFunc:Ss},Es={kernelName:s.IFFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return ns(r,!0,n)}},_s=fn({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),$s={kernelName:s.IsFinite,backendName:"webgl",kernelFunc:_s},As=fn({opSnippet:"return float(isinf(x));",dtype:"bool"}),Rs={kernelName:s.IsInf,backendName:"webgl",kernelFunc:As},Fs=fn({opSnippet:"return float(isnan(x));",dtype:"bool"}),Os={kernelName:s.IsNan,backendName:"webgl",kernelFunc:Fs},Ds=mn({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:yt,dtype:"bool"}),Ms={kernelName:s.Less,backendName:"webgl",kernelFunc:Ds},Bs=mn({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),Ps={kernelName:s.LessEqual,backendName:"webgl",kernelFunc:Bs},Ls={kernelName:s.LinSpace,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,o=bt(r,a,s);return t.makeTensorInfo([o.length],"float32",o)}},Vs=fn({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:xt}),zs={kernelName:s.Log,backendName:"webgl",kernelFunc:Vs},Ws=fn({opSnippet:"return log(1.0 + x);"}),Us={kernelName:s.Log1p,backendName:"webgl",kernelFunc:Ws},Gs=mn({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),Hs={kernelName:s.LogicalAnd,backendName:"webgl",kernelFunc:Gs},Xs=fn({opSnippet:"return float(!(x >= 1.0));"}),qs={kernelName:s.LogicalNot,backendName:"webgl",kernelFunc:Xs},js=mn({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),Ks={kernelName:s.LogicalOr,backendName:"webgl",kernelFunc:js};class Ys{constructor(e,t,n,r,a){this.variableNames=["x"],this.outputShape=[];const s=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${s}; j <= ${s}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class Qs{constructor(e,t,n,r,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const s=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${s};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${s}; j <= ${s}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const Zs={kernelName:s.LRN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:o,bias:i,alpha:u,beta:l}=r,c=(0,s.env)().getBool("WEBGL_PACK_NORMALIZATION")?new Qs(a.shape,o,i,u,l):new Ys(a.shape,o,i,u,l);return n.runWebGLProgram(c,[a],a.dtype)}};class Js{constructor(e,t,n,r,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${a})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const eo={kernelName:s.LRNGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a,y:s,dy:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=r,d=new Js(a.shape,i,u,l,c);return n.runWebGLProgram(d,[a,s,o],a.dtype)}};function to(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reductionIndices:o,keepDims:i}=r,u=a.shape.length,l=s.util.parseAxisParam(o,a.shape);let c=l;const d=s.backend_util.getAxesPermutation(c,u),p=null!=d,h=n.shouldExecuteOnCPU([a]);let f=a;if(p){if(h){const e=n.texData.get(f.dataId).values,t=new Array(u);for(let e=0;e<t.length;e++)t[e]=a.shape[d[e]];const r=Ot(e,a.shape,a.dtype,d,t);f=n.makeTensorInfo(t,a.dtype),n.texData.get(f.dataId).values=r}else f=_n(a,d,n);c=s.backend_util.getInnerMostAxes(c.length,u)}s.backend_util.assertAxesAreInnerMostDims("max",c,u);const[m,g]=s.backend_util.computeOutAndReduceShapes(f.shape,c);let y,b=m;if(i&&(b=s.backend_util.expandShapeToKeepDim(m,l)),h){const e=n.texData.get(f.dataId).values,t=vt(e,s.util.sizeFromShape(g),b,a.dtype);y=n.makeTensorInfo(b,a.dtype),n.texData.get(y.dataId).values=t}else y=function(e,t,n,r){const a=s.util.sizeFromShape(t),o=wn({inputs:{x:e},attrs:{shape:[s.util.sizeFromShape(e.shape)/a,a]},backend:r}),i=Sn(o,e.dtype,"max",r),u=wn({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(i),u}(f,g,b,n);return p&&n.disposeIntermediateTensorInfo(f),y}const no={kernelName:s.Max,backendName:"webgl",kernelFunc:to},ro=mn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:kt}),ao={kernelName:s.Maximum,backendName:"webgl",kernelFunc:ro},so={kernelName:s.MaxPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;de(a,"maxPool");const{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=r;s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=s.backend_util.computePool2DInfo(a.shape,o,i,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&s.util.arraysEqual(c.inShape,c.outShape))return rn({inputs:{x:a},backend:n});const d=new hr(c,"max",!1);return n.runWebGLProgram(d,[a],a.dtype)}},oo={kernelName:s.MaxPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:o,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=r,d=s.backend_util.computePool3DInfo(a.shape,o,i,[1,1,1],u,c,l),p=new fr(d,"max",!1);return n.runWebGLProgram(p,[a],a.dtype)}};class io{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,a=e.effectiveFilterHeight,s=e.effectiveFilterWidth,o=a-1-e.padInfo.top,i=s-1-e.padInfo.left,u=a*s-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${s} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class uo{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=i-1-e.padInfo.front,d=u-1-e.padInfo.top,p=l-1-e.padInfo.left,h=i*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${d}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${s}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${h} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const lo={kernelName:s.MaxPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:o}=t,i=o,{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=r,p=s.backend_util.computePool3DInfo(i.shape,u,l,[1,1,1],c,d),h=new fr(p,"max",!0),f=n.runWebGLProgram(h,[i],i.dtype),m=new uo(p),g=n.runWebGLProgram(m,[a,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}},co={kernelName:s.MaxPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:o,output:i}=t,u=o;de([o,i],"maxPoolGrad");const{filterSize:l,strides:c,pad:d,dimRoundingMode:p}=r,h=s.backend_util.computePool2DInfo(u.shape,l,c,1,d,p),f=new hr(h,"max",!0),m=n.runWebGLProgram(f,[u],u.dtype),g=new io(h),y=n.runWebGLProgram(g,[a,m],u.dtype);return n.disposeIntermediateTensorInfo(m),y}},po={kernelName:s.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:a,strides:o,pad:i,includeBatchInIndex:u}=t,l=n;s.util.assert(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const c=[1,1];s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(o,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`));const d=s.backend_util.computePool2DInfo(r.shape,a,o,c,i),[p,h]=function(e,t,n,r){let a=new hr(n,"max",!1);const s=r.runWebGLProgram(a,[e],"float32");return a=new hr(n,"max",!0,!0,t),[s,r.runWebGLProgram(a,[e],"float32")]}(r,u,d,l);return[p,h]}},ho={kernelName:s.Mean,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:a,axis:o}=t,i=n,u=r.shape.length,l=s.util.parseAxisParam(o,r.shape);let c=l;const d=s.backend_util.getAxesPermutation(c,u),p=null!=d,h=i.shouldExecuteOnCPU([r]),f=[];let m=r;if(p){if(h){const e=i.texData.get(m.dataId).values,t=new Array(u);for(let e=0;e<t.length;e++)t[e]=r.shape[d[e]];const n=Ot(e,r.shape,r.dtype,d,t);m=i.makeTensorInfo(t,r.dtype),i.texData.get(m.dataId).values=n}else m=_n(r,d,i);f.push(m),c=s.backend_util.getInnerMostAxes(c.length,u)}s.backend_util.assertAxesAreInnerMostDims("sum",c,u);const[g,y]=s.backend_util.computeOutAndReduceShapes(m.shape,c);let b=g;a&&(b=s.backend_util.expandShapeToKeepDim(g,l));const x=function(e,t,n,r){const a=s.util.sizeFromShape(t),o=wn({inputs:{x:e},attrs:{shape:[s.util.sizeFromShape(e.shape)/a,a]},backend:r}),i=Sn(o,"float32","mean",r),u=wn({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(i),u}(m,y,b,i);for(const e of f)i.disposeIntermediateTensorInfo(e);return x}},fo={kernelName:s.Min,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o,keepDims:i}=r,u=a.shape.length,l=s.util.parseAxisParam(o,a.shape);let c=l;const d=s.backend_util.getAxesPermutation(c,u);let p=a;null!=d&&(p=Rn({inputs:{x:a},backend:n,attrs:{perm:d}}),c=s.backend_util.getInnerMostAxes(c.length,a.shape.length)),s.backend_util.assertAxesAreInnerMostDims("min",c,u);const[h,f]=s.backend_util.computeOutAndReduceShapes(p.shape,c),m=wn({inputs:{x:p},backend:n,attrs:{shape:[-1,s.util.sizeFromShape(f)]}}),g=Sn(m,m.dtype,"min",n);let y;return y=wn(i?{inputs:{x:g},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(h,l)}}:{inputs:{x:g},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=d&&n.disposeIntermediateTensorInfo(p),y}},mo=mn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:wt}),go={kernelName:s.Minimum,backendName:"webgl",kernelFunc:mo};class yo{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=nt(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${a} start = ${a}(${s});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class bo{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=nt(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=Bt("rc",r),u=Bt("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===n?0:1;let p="";if(1===r){const e=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[r-2]} += 1;\n        if(${i[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${i[r-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${s});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const xo={kernelName:s.MirrorPad,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:a,mode:o}=n,i=(0,s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new bo(r.shape,a,o):new yo(r.shape,a,o);return t.runWebGLProgram(i,[r],r.dtype)}},vo=mn({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),ko={kernelName:s.Mod,backendName:"webgl",kernelFunc:vo};class wo{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const Io=mn({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),No={kernelName:s.RealDiv,backendName:"webgl",kernelFunc:Io},To="return a - b;",So=mn({opSnippet:To,packedOpSnippet:To,supportsComplex:!0,cpuKernelImpl:At}),Co={kernelName:s.Sub,backendName:"webgl",kernelFunc:So};function Eo(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:o}=r,i=s.util.parseAxisParam([o],a.shape),u=to({inputs:{x:a},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=s.backend_util.expandShapeToKeepDim(u.shape,i),c=wn({inputs:{x:u},backend:n,attrs:{shape:l}}),d=So({inputs:{a,b:c},backend:n}),p=ja({inputs:{x:d},backend:n}),h=$n({inputs:{x:p},backend:n,attrs:{axis:i,keepDims:!1}}),f=wn({inputs:{x:h},backend:n,attrs:{shape:l}}),m=Io({inputs:{a:p,b:f},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),m}const _o={kernelName:s.Softmax,backendName:"webgl",kernelFunc:Eo},$o={kernelName:s.Multinomial,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:s,seed:o,normalized:i}=r,u=i?a:Eo({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),l=u.shape[0],c=u.shape[1],d=new wo(l,c,s),p=d.getCustomSetupFunc(o),h=n.runWebGLProgram(d,[u],"int32",p);return i||n.disposeIntermediateTensorInfo(u),h}},Ao="return -x;",Ro={kernelName:s.Neg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,a]=Nt(e.values,r.shape,r.dtype);return n.makeTensorInfo(a,r.dtype,t)}let a;return a=(0,s.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new qt(r.shape,Ao):new Gt(r.shape,Ao),n.runWebGLProgram(a,[r],r.dtype)}},Fo=s.kernel_impls.nonMaxSuppressionV3Impl,Oo={kernelName:s.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:function(e){s.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l}=r,c=n.readSync(a.dataId),d=n.readSync(o.dataId),{selectedIndices:p}=Fo(c,d,i,u,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},Do=s.kernel_impls.nonMaxSuppressionV4Impl,Mo={kernelName:s.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:function(e){s.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,padToMaxOutputSize:c}=r,d=n.readSync(a.dataId),p=n.readSync(o.dataId),{selectedIndices:h,validOutputs:f}=Do(d,p,i,u,l,c);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},Bo=s.kernel_impls.nonMaxSuppressionV5Impl,Po={kernelName:s.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:function(e){s.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,softNmsSigma:c}=r,d=n.readSync(a.dataId),p=n.readSync(o.dataId),h=i,f=u,m=l,g=c,{selectedIndices:y,selectedScores:b}=Bo(d,p,h,f,m,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class Lo{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const Vo={kernelName:s.OneHot,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{depth:o,onValue:i,offValue:u}=r,l=s.util.sizeFromShape(a.shape),c=new Lo(l,o,i,u),d=wn({inputs:{x:a},backend:n,attrs:{shape:[l]}}),p=n.runWebGLProgram(c,[d],a.dtype);n.disposeIntermediateTensorInfo(d);const h=wn({inputs:{x:p},backend:n,attrs:{shape:[...a.shape,o]}});return n.disposeIntermediateTensorInfo(p),h}};function zo(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=Or({inputs:{input:r},backend:n}),t=zo({inputs:{x:e},backend:n}),a=Kr({inputs:{input:r},backend:n}),s=zo({inputs:{x:a},backend:n}),o=sn({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}return ss({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const Wo={kernelName:s.ZerosLike,backendName:"webgl",kernelFunc:zo},Uo={kernelName:s.OnesLike,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===a.dtype){const t=Or({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r}),s=Kr({inputs:{input:a},backend:r}),o=zo({inputs:{x:s},backend:r}),i=sn({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),i}return ss({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:r})}},Go={kernelName:s.Pack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return Ya({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const o=t[0].shape,i=t[0].dtype;t.forEach((e=>{s.util.assertShapesMatch(o,e.shape,"All tensors passed to stack must have matching shapes"),s.util.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],l=Jr({inputs:t.map((e=>{const t=Ya({inputs:{input:e},backend:n,attrs:{dim:a}});return u.push(t),t})),backend:n,attrs:{axis:a}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class Ho{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=nt(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${a} start = ${a}(${s});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Xo{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=nt(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=Bt("rc",r),u=Bt("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,d=[a+" rc = outputLoc;",`${i[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${l}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let h="";for(let e=0,t=1===r?2:4;e<t;e++)h+=`\n        ${d[e]}\n        if (${p}) {\n          result[${e}] = float(${n});\n        } else {\n          ${a} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;h+=1===r?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${s});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const qo=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:o,constantValue:i}=r,u=(0,s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Xo(a.shape,o,i):new Ho(a.shape,o,i);return n.runWebGLProgram(u,[a],a.dtype)},jo={kernelName:s.PadV2,backendName:"webgl",kernelFunc:qo},Ko=mn({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Yo={kernelName:s.Pow,backendName:"webgl",kernelFunc:Ko},Qo={kernelName:s.Prod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o,keepDims:i}=r,u=a.shape.length,l=[],c=s.util.parseAxisParam(o,a.shape);let d=c;const p=s.backend_util.getAxesPermutation(d,u);let h,f=a;if(null!=p&&(f=Rn({inputs:{x:a},backend:n,attrs:{perm:p}}),d=s.backend_util.getInnerMostAxes(d.length,u),l.push(f)),s.backend_util.assertAxesAreInnerMostDims("prod",d,u),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:r,outDtype:a}=Tt(f.shape,f.dtype,e,d);h=n.makeTensorInfo(r,a,t)}else{const[e,t]=s.backend_util.computeOutAndReduceShapes(f.shape,d),r=s.util.sizeFromShape(t),o=wn({inputs:{x:f},backend:n,attrs:{shape:[-1,r]}}),i=Sn(o,(0,s.sumOutType)(a.dtype),"prod",n);h=wn({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(o),l.push(i)}if(i){l.push(h);const e=s.backend_util.expandShapeToKeepDim(h.shape,c);h=wn({inputs:{x:h},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},Zo=e=>{const{backend:t,attrs:n}=e,{start:r,stop:a,step:s,dtype:o}=n,i=St(r,a,s,o);return t.makeTensorInfo([i.length],o,i)},Jo={kernelName:s.Range,backendName:"webgl",kernelFunc:Zo},ei=fn({opSnippet:"return 1.0 / x;"}),ti={kernelName:s.Reciprocal,backendName:"webgl",kernelFunc:ei},ni=fn({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),ri={kernelName:s.Relu,backendName:"webgl",kernelFunc:ni},ai=fn({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),si={kernelName:s.Relu6,backendName:"webgl",kernelFunc:ai};class oi{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let d;d=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class ii{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let d;d=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const ui={kernelName:s.ResizeBilinear,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:o,halfPixelCenters:i,size:u}=r,[l,c]=u,d=(0,s.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ii(a.shape,l,c,o,i):new oi(a.shape,l,c,o,i);return n.runWebGLProgram(d,[a],"float32")}};class li{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,a]=t,[,s,o]=e,i=[n&&s>1?r-1:r,n&&o>1?a-1:a],u=[n&&s>1?s-1:s,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],d=1/l,p=1/c,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const ci={kernelName:s.ResizeBilinearGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r,i=new li(s.shape,a.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}};class di{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],d=r?"0.5":"0.0";let p;p=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const pi={kernelName:s.ResizeNearestNeighbor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:o,size:i}=r,[u,l]=i,c=new di(a.shape,u,l,s,o);return n.runWebGLProgram(c,[a],a.dtype)}};class hi{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,a]=t,[,s,o]=e,i=[n&&s>1?r-1:r,n&&o>1?a-1:a],u=[n&&s>1?s-1:s,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],d=1/l,p=1/c,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const fi={kernelName:s.ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r,i=new hi(s.shape,a.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}};class mi{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),a=nt(n);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class gi{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=Bt("rc",n),a=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,s=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=nt(n);function i(n){const r=e.map(((r,a)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:""+r[n]}(a,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(r.slice())};\n          if(${a}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(r.slice())};\n          }\n          if(${s}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            if(${a}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const yi={kernelName:s.Reverse,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:o}=r,i=a.shape.length,u=s.util.parseAxisParam(o,a.shape);if(0===i)return rn({inputs:{x:a},backend:n});const l=(0,s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new gi(a.shape,u):new mi(a.shape,u);return n.runWebGLProgram(l,[a],a.dtype)}};class bi{constructor(e,t,n,r){this.variableNames=["Image"],this.outputShape=[];const a=e[1],o=e[2],i=Math.sin(t).toFixed(3),u=Math.cos(t).toFixed(3);this.outputShape=e;const[l,c]=s.backend_util.getImageCenter(r,a,o),d=l.toFixed(3),p=c.toFixed(3);let h="";h="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${d}) * ${u} - (float(y) - ${p}) * ${i};\n          float coordYFloat = (float(x) - ${d}) * ${i} + (float(y) - ${p}) * ${u};\n          int coordX = int(round(coordXFloat + ${d}));\n          int coordY = int(round(coordYFloat + ${p}));\n          ${h}\n          if(coordX >= 0 && coordX < ${o} && coordY >= 0 && coordY < ${a}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const xi={kernelName:s.RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:a,fillValue:s,center:o}=t,i=n,u=new bi(r.shape,a,s,o);return i.runWebGLProgram(u,[r],r.dtype)}},vi=fn({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),ki={kernelName:s.Round,backendName:"webgl",kernelFunc:vi},wi=fn({opSnippet:"return inversesqrt(x);",cpuKernelImpl:Ct}),Ii={kernelName:s.Rsqrt,backendName:"webgl",kernelFunc:wi};class Ni{constructor(e,t,n,r,a,s,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=s;const i=nt(a.length),u=nt(s.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let d="";1===r?d="i":2===r&&(d="i, coords[1]");const p=`getUpdates(${d})`,h=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${a});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${h};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const Ti={kernelName:s.ScatterNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:a,updates:o}=t,{shape:i}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:d,outputSize:p}=s.backend_util.calculateShapes(o,a,i),h=[p/c,c];if(0===p)return n.makeTensorInfo(i,a.dtype);const f=wn({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=wn({inputs:{x:o},backend:n,attrs:{shape:[l,c]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0])),y=new Ni(l,u,f.shape.length,m.shape.length,d,h),b=n.runWebGLProgram(y,[m,f,g],m.dtype),x=wn({inputs:{x:b},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),x}};class Si{constructor(e,t,n){let r,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],o=[];for(let r=0;r<t.length;r++)o.push(""+n[r]),r<e&&s.push(""+n[r]);r=s.join(),a=o.join()}const s=nt(n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const Ci={kernelName:s.Select,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:a,e:o}=t,i=new Si(r.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(i,[r,a,o],(0,s.upcastType)(a.dtype,o.dtype))}},Ei=fn({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${s.backend_util.SELU_SCALEALPHA};\n  float scale = ${s.backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),_i={kernelName:s.Selu,backendName:"webgl",kernelFunc:Ei},$i=fn({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),Ai={kernelName:s.Sigmoid,backendName:"webgl",kernelFunc:$i},Ri=fn({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),Fi={kernelName:s.Sign,backendName:"webgl",kernelFunc:Ri},Oi=fn({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),Di={kernelName:s.Sin,backendName:"webgl",kernelFunc:Oi},Mi=fn({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),Bi={kernelName:s.Sinh,backendName:"webgl",kernelFunc:Mi},Pi=fn({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),Li={kernelName:s.Softplus,backendName:"webgl",kernelFunc:Pi},Vi={kernelName:s.SpaceToBatchND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:o,paddings:i}=r;s.util.assert(a.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const u=o.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let e=1+o.length;e<a.shape.length;++e)l.push([0,0]);const c=[],d=qo({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),p=s.backend_util.getReshaped(d.shape,o,u,!1),h=s.backend_util.getPermuted(p.length,o.length,!1),f=s.backend_util.getReshapedPermuted(d.shape,o,u,!1),m=wn({inputs:{x:d},backend:n,attrs:{shape:p}}),g=Rn({inputs:{x:m},backend:n,attrs:{perm:h}}),y=wn({inputs:{x:g},backend:n,attrs:{shape:f}});return c.push(d),c.push(m),c.push(g),c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},zi={kernelName:s.SparseToDense,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:a,sparseValues:o,defaultValue:i}=t,{outputShape:u}=r,{sliceRank:l,numUpdates:c,strides:d,outputSize:p}=s.backend_util.calculateShapes(o,a,u),h=new Ni(c,l,a.shape.length,o.shape.length,d,[p,1],!1),f=n.runWebGLProgram(h,[o,a,i],o.dtype),m=wn({inputs:{x:f},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(f),m}},Wi={kernelName:s.SplitV,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:o,axis:i}=r,u=s.util.parseAxisParam(i,a.shape)[0],l=s.backend_util.prepareSplitSize(a,o,u),c=a.shape.length,d=new Array(c).fill(0),p=a.shape.slice();return l.map((e=>{const t=[...p];t[u]=e;const r=Er({inputs:{x:a},backend:n,attrs:{begin:d,size:t}});return d[u]+=e,r}))}},Ui=fn({opSnippet:"return sqrt(x);"}),Gi={kernelName:s.Sqrt,backendName:"webgl",kernelFunc:Ui},Hi=fn({opSnippet:"return x * x;"}),Xi={kernelName:s.Square,backendName:"webgl",kernelFunc:Hi},qi="return (a - b) * (a - b);",ji=mn({opSnippet:qi,packedOpSnippet:qi}),Ki={kernelName:s.SquaredDifference,backendName:"webgl",kernelFunc:ji},Yi={kernelName:s.Step,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,a=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,s=new Gt(r.shape,a);return n.runWebGLProgram(s,[r],r.dtype)}};class Qi{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,a=nt(n.length),s=nt(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const Zi={kernelName:s.StridedSlice,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:o,end:i,strides:u,beginMask:l,endMask:c,ellipsisMask:d,newAxisMask:p,shrinkAxisMask:h}=r,{nonStrided:f,$begin:m,$strides:g,size:y,newShape:b,outShape:x}=s.slice_util.sliceInfo(a.shape,o,i,u,l,c,d,p,h),v=wn({inputs:{x:a},backend:n,attrs:{shape:b}});let k;if(f){const e=Er({inputs:{x:v},backend:n,attrs:{begin:m,size:y}});k=wn({inputs:{x:e},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(e)}else if(x.some((e=>0===e)))k=n.makeTensorInfo(x,a.dtype,[]);else if(n.shouldExecuteOnCPU([v])){const e=n.texData.get(v.dataId).values,t=(0,s.buffer)(v.shape,v.dtype,e),r=$t(x,t,g,m);k=n.makeTensorInfo(x,v.dtype,r.values)}else{const e=new Qi(m,g,x);k=n.runWebGLProgram(e,[v],v.dtype)}const w=wn({inputs:{x:k},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(k),w}},Ji=fn({opSnippet:"return tan(x);"}),eu={kernelName:s.Tan,backendName:"webgl",kernelFunc:Ji},tu=fn({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),nu={kernelName:s.Tanh,backendName:"webgl",kernelFunc:tu};class ru{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=nt(this.rank),a=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function au(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reps:o}=r;if("string"===a.dtype){const e=n.readSync(a.dataId).map((e=>s.util.decodeString(e))),t=(0,s.buffer)(a.shape,a.dtype,e),r=Rt(t,o);return n.makeTensorInfo(r.shape,r.dtype,r.values)}const i=new ru(a.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}const su={kernelName:s.Tile,backendName:"webgl",kernelFunc:au},ou={kernelName:s.TopK,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{k:s,sorted:o}=r,i=n.readSync(a.dataId),[u,l]=Ft(i,a.shape,a.dtype,s,o);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},iu={kernelName:s.Unique,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:a}=n,{x:s}=t;de(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(s.dataId),{outputValues:i,outputShape:u,indices:l}=Dt(o,a,s.shape,s.dtype);return[r.makeTensorInfo(u,s.dtype,i),r.makeTensorInfo([l.length],"int32",l)]}},uu={kernelName:s.Unpack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:a}=t;let{axis:s}=r;s<0&&(s+=a.shape.length);const o=a,i=o.shape.length,u=a.shape[s],l=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==s&&(l[c++]=o.shape[e]);const d=[],p=new Array(i).fill(0),h=o.shape.slice();h[s]=1;const f=new Array(u);for(let e=0;e<f.length;e++){p[s]=e;const t=Er({inputs:{x:o},backend:n,attrs:{begin:p,size:h}}),r=wn({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=r,d.push(t)}return d.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class lu{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,a=e.inSize,s=e.numSegments,o=s*Math.ceil(a/n);this.outputShape=[r,o];const i=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let d="";a%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${d}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${s})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${s})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const cu=[Zs,eo,Dn,Bn,Ln,zn,Gn,qn,jn,Kn,tr,nr,ar,or,cr,ur,pr,gr,mr,xr,vr,kr,Nr,$r,Ar,Mr,Lr,Wr,Hr,on,ea,da,pa,oa,fa,ma,ha,ya,xa,ka,Ta,Sa,Ea,Oa,Da,Aa,Ba,La,za,Wa,Ga,Xa,Ka,Qa,es,rs,os,us,ds,hs,gs,bs,xs,ks,Is,Ts,Cs,an,Es,Yr,$s,Rs,Os,cn,Ms,Ps,Ls,Us,zs,Hs,qs,Ks,no,oo,so,lo,co,po,ao,ho,fo,go,xo,ko,$o,kn,Ro,Oo,Mo,Po,Fr,Vo,Uo,Go,jo,Yo,hn,Qo,Jo,Dr,No,ti,si,ri,In,ui,ci,pi,fi,yi,xi,ki,Ii,Ti,Ci,_i,Ai,Fi,Di,Bi,_r,_o,Li,Vi,zi,Wi,Gi,Xi,Ki,Yi,Zi,Co,An,eu,nu,su,ou,Fn,iu,uu,{kernelName:s.UnsortedSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:o}=t,{numSegments:i}=r,u=a.shape.length,l=[];let c=0;const d=s.backend_util.getAxesPermutation([c],u);let p=a;null!=d&&(p=Rn({inputs:{x:a},backend:n,attrs:{perm:d}}),l.push(p),c=s.backend_util.getInnerMostAxes(1,u)[0]);const h=s.backend_util.segment_util.computeOutShape(p.shape,c,i),f=s.util.sizeFromShape([p.shape[c]]),m=wn({inputs:{x:p},backend:n,attrs:{shape:[-1,f]}});l.push(m);const g=(0,s.sumOutType)(a.dtype),y=(e,t,r,a,o)=>{const i=e.shape[0],u=e.shape[1],c=s.backend_util.segment_util.segOpComputeOptimalWindowSize(u,o),d=new lu({windowSize:c,inSize:u,batchSize:i,numSegments:o},t),p=n.compileAndRun(d,[e,r],a);if(l.push(p),p.shape[1]===o)return p;const h=Zo({backend:n,attrs:{start:0,stop:o,step:1,dtype:"float32"}}),f=au({inputs:{x:h},backend:n,attrs:{reps:[u/c]}});return l.push(h),l.push(f),y(p,t,f,a,o)},b=wn({inputs:{x:y(m,"unsortedSegmentSum",o,g,i)},backend:n,attrs:{shape:h}});let x=b;if(null!=d){l.push(b);const e=s.backend_util.getUndoAxesPermutation(d);x=Rn({inputs:{x},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},Wo];for(const e of cu)(0,s.registerKernel)(e)},8713:(e,t,n)=>{"use strict";n.d(t,{JL:()=>r,Zu:()=>a});class r{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class a{refCount(e){return s("refCount")}incRef(e){return s("incRef")}timerAvailable(){return!0}time(e){return s("time")}read(e){return s("read")}readSync(e){return s("readSync")}numDataIds(){return s("numDataIds")}disposeData(e,t){return s("disposeData")}write(e,t,n){return s("write")}move(e,t,n,r,a){return s("move")}memory(){return s("memory")}floatPrecision(){return s("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return s("dispose")}}function s(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},3337:(e,t,n)=>{"use strict";function r(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,a=e.length,s=0,o=!1;for(;r<a;){s=r+(a-r>>>1);const i=n(t,e[s]);i>0?r=s+1:(a=s,o=!i)}return o?r:-r-1}(e,t,n||a)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function a(e,t){return e>t?1:e<t?-1:0}function s(e,t,n,r,a){return u(e,t,n,r,a,0)}function o(e,t,n,r,a,s){return u(e,t,n,r,a,0,!1,s,!0)}function i(e,t,n,r,a,s){return u(e,t,n,r,a,s,!0)}function u(e,t,n,a,s,o,i=!1,u=!1,p=!1){const h=[];for(let e=0;e<t.length;e++)t[e]>s&&h.push({score:t[e],boxIndex:e,suppressBeginIndex:0});h.sort(d);const f=o>0?-.5/o:0,m=[],g=[];for(;m.length<n&&h.length>0;){const t=h.pop(),{score:n,boxIndex:o,suppressBeginIndex:i}=t;if(n<s)break;let u=!1;for(let n=m.length-1;n>=i;--n){const r=l(e,o,m[n]);if(r>=a){u=!0;break}if(t.score=t.score*c(a,f,r),t.score<=s)break}t.suppressBeginIndex=m.length,u||(t.score===n?(m.push(o),g.push(t.score)):t.score>s&&r(h,t,d))}const y=m.length,b=n-y;u&&b>0&&(m.push(...new Array(b).fill(0)),g.push(...new Array(b).fill(0)));const x={selectedIndices:m};return i&&(x.selectedScores=g),p&&(x.validOutputs=y),x}function l(e,t,n){const r=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),d=Math.max(a[0],a[2]),p=Math.max(a[1],a[3]),h=(i-s)*(u-o),f=(d-l)*(p-c);if(h<=0||f<=0)return 0;const m=Math.max(s,l),g=Math.max(o,c),y=Math.min(i,d),b=Math.min(u,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(h+f-x)}function c(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function d(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}n.d(t,{GP:()=>s,qP:()=>o,pA:()=>i})},8333:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(2657);function a(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const a=(0,r.f)(e,"int32"),s=(0,r.f)([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const r=a.indexToLoc(n[t]),o=t*e.length;s.values.set(r,o)}return s.toTensor()}},7097:(e,t,n)=>{"use strict";n.d(t,{BV:()=>x,wv:()=>b});var r=n(8713),a=n(2885),s=n(5938),o=n(9121),i=n(6151),u=n(9122),l=n(569);class c{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new p)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let o;const i=u.now();if(this.backendTimer.timerAvailable())o=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();o=Promise.resolve({kernelMs:u.now()-i})}if((0,a.OB)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{d(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:o.then((e=>e.kernelMs)),extraInfo:o.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:a,extraInfo:s}=e;n.forEach((e=>{Promise.all([e.data(),r,s]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function d(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class p{logKernelProfile(e,t,n,r,a,s){const o="number"==typeof r?l.oj(r+"ms",9):r.error,i=l.oj(e,25),u=t.rank,c=t.size,d=l.oj(t.shape.toString(),14);let p="";for(const e in a){const n=a[e];if(null!=n){const r=n.shape||t.shape,a=r.length;p+=`${e}: ${a}D ${a>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${d}\t%c${c}\t%c${p}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var h=n(4077),f=n(747);function m(e){return null!=e.kernelName}class g{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class y{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new g}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(e+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new c(this.backendInstance),!0}setupRegisteredKernels(){(0,i.tr)(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){(0,i.tr)(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof r.Zu||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(e+" backend not found in registry");this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:a}=this.initializeBackend(n);if(a||r)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,a=this.readSync(t),s=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return y.nextTensorId++}nextVariableId(){return y.nextVariableId++}clone(e){const t=x.runKernel(o.iJ,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return x.runKernel(o.RF,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==(0,i.pI)(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-a-s;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),a=this.state.numBytes,s=this.state.numTensors;let o,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const c=m(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(m(e)){const{kernelName:t,inputs:a,attrs:s}=e;null==this.backendName&&this.backend;const c=(0,i.pI)(t,this.backendName);l.hu(null!=c,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();u=c.kernelFunc({inputs:a,attrs:s,backend:this.backend});const o=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const i=o.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:r}=e;return this.makeTensorFromDataId(t,n,r)}));if(r){const e=this.getTensorsForGradient(t,a,i);n=this.saveTensorsForBackwardMode(e)}return i}}else{const{forwardFunc:t}=e,a=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();u=this.tidy((()=>t(this.backend,a)));const n=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,e,n),n}}const{inputs:d,attrs:p}=e,h=m(e)?null:e.backwardsFunc;let f;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(c,d,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),t=f.outputs):t=o()})),r&&this.addTapeNode(c,d,t,h,n,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-s,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(d).map((e=>null!=d[e]?d[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(u)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=(0,i.uk)(e);if(null!=r){const e=r.inputsToSave||[],a=r.outputsToSave||[];let s;r.saveAllInputs?(l.hu(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),s=Object.keys(t).map((e=>t[e]))):s=e.map((e=>t[e]));const o=n.filter(((e,t)=>a[t]));return s.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let a=e;"string"===n&&l.HD(e[0])&&(a=e.map((e=>u.encodeString(e))));const s=r.write(a,t,n),o=new h.es(t,n,s,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(s),t=(0,l.Ub)(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){n=n||"float32";const a=new h.es(t,n,e,this.nextTensorId());return this.trackTensor(a,r),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const a=new h._w(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*l.bT(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof h._w||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*l.bT(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,a,s){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},u=(0,i.uk)(e);null!=u&&(r=u.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=l.wT(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],a,s))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=(0,f.getTensorsInContainer)(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(l.hu(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));l.hu(a instanceof h.es,(()=>"The result y returned by f() must be a tensor."));const s=function(e,t,n){const r={},a={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const s=e[n],o=s.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){s.outputs.forEach((e=>r[e.id]=!0)),i=!0,a[s.id]=!0;break}if(i)break}}const s={};s[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(const e in r)s[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];r[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,a);if(!r&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=(0,l.p8)((0,l.NA)(e),"float32");return x.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,r){for(let a=t.length-1;a>=0;a--){const s=t[a],o=[];if(s.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(o);for(const t in s.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const a=n((()=>i[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const o=s.inputs[t];if(!l.cO(a.shape,o.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=a;else{const t=e[o.id];e[o.id]=r(t,a),t.dispose()}}}}(e,s,(e=>this.tidy(e)),v);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:r}}))}customGrad(e){return l.hu(l.mf(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;l.hu(t.every((e=>e instanceof h.es)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return t.forEach(((e,t)=>{r[t]=e})),this.runKernelFunc({forwardFunc:(r,a)=>(n=e(...t,a),l.hu(n.value instanceof h.es,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),l.hu(l.mf(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const a=n.gradFunc(e,r),s=Array.isArray(a)?a:[a];l.hu(s.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),l.hu(s.every((e=>e instanceof h.es)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return s.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=(0,u.now)(),n=await this.backend.time(e);return n.wallMs=(0,u.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new g;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function b(){const e=(0,s.D)();if(null==e._tfengine){const t=new a.qA(e);e._tfengine=new y(t)}return(0,a.iG)(e._tfengine.ENV),(0,h.Vi)((()=>e._tfengine)),e._tfengine}y.nextTensorId=0,y.nextVariableId=0;const x=b();function v(e,t){const n={a:e,b:t};return x.runKernel(o.mm,n)}},2885:(e,t,n)=>{"use strict";n.d(t,{qA:()=>a,OB:()=>o,Vi:()=>i,iG:()=>u});var r=n(569);class a{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=s,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if((0,r.tI)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function s(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function o(){return i}let i=null;function u(e){i=e}},5938:(e,t,n)=>{"use strict";let r;function a(){if(null==r){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}r=e}return r}function s(e,t){const n=function(){const e=a();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}n.d(t,{D:()=>a,R:()=>s})},4368:(e,t,n)=>{"use strict";n.d(t,{G4:()=>i,R:()=>u,cF:()=>l,MX:()=>c,N8:()=>d,SR:()=>p,sq:()=>h,N5:()=>f,lu:()=>m,B9:()=>g,Cn:()=>y,XV:()=>b,CQ:()=>x,Cd:()=>v,N_:()=>k,cj:()=>w,x3:()=>I,ze:()=>N,jq:()=>T,y3:()=>S,VY:()=>C});var r=n(7097),a=n(2885),s=n(4077),o=n(747);function i(){(0,a.OB)().set("PROD",!0)}function u(){(0,a.OB)().set("DEBUG",!0)}function l(){(0,a.OB)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function c(e){(0,a.OB)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function d(){r.BV.disposeVariables()}function p(){return r.BV}function h(){return r.BV.memory()}function f(e){return r.BV.profile(e)}function m(e,t){return r.BV.tidy(e,t)}function g(e){(0,o.getTensorsInContainer)(e).forEach((e=>e.dispose()))}function y(e){return r.BV.keep(e)}function b(e){return r.BV.time(e)}function x(e){return r.BV.setBackend(e)}function v(){return r.BV.ready()}function k(){return r.BV.backendName}function w(e){r.BV.removeBackend(e)}function I(e){return r.BV.findBackend(e)}function N(e){return r.BV.findBackendFactory(e)}function T(e,t,n=1){return r.BV.registerBackend(e,t,n)}function S(){return r.BV.backend}function C(e,t){(0,a.OB)().setPlatform(e,t)}(0,s.FZ)(c)},633:(e,t,n)=>{"use strict";n.d(t,{cb:()=>p,pn:()=>d,h7:()=>l,fN:()=>c,UQ:()=>i,ti:()=>u});var r=n(7097),a=n(4077),s=n(3740),o=n(569);function i(e){return o.hu(o.mf(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const a=(0,s._1)(t,"x","tf.grad","string_or_numeric"),i=null!=n?(0,s._1)(n,"dy","tf.grad"):null;return r.BV.tidy((()=>{const{value:t,grads:n}=r.BV.gradients((()=>e(a)),[a],i);return null!=i&&o.k5(t.shape,i.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),h(n),n[0]}))}}function u(e){return o.hu(o.mf(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{o.hu(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const a=(0,s.sI)(t,"args","tf.grads","string_or_numeric"),i=null!=n?(0,s._1)(n,"dy","tf.grads"):null;return r.BV.tidy((()=>{const{value:t,grads:n}=r.BV.gradients((()=>e(...a)),a,i);return null!=i&&o.k5(t.shape,i.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),h(n),n}))}}function l(e){return o.hu(o.mf(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{o.hu(t instanceof a.es,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),o.hu(null==n||n instanceof a.es,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:s,value:i}=r.BV.gradients((()=>e(t)),[t],n);return h(s),{grad:s[0],value:i}}}function c(e){return o.hu(o.mf(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{o.hu(Array.isArray(t)&&t.every((e=>e instanceof a.es)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),o.hu(null==n||n instanceof a.es,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const s=r.BV.gradients((()=>e(...t)),t,n);return null!=n&&o.k5(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),h(s.grads),s}}function d(e,t){o.hu(o.mf(e),(()=>"The f passed in variableGrads(f) must be a function")),o.hu(null==t||Array.isArray(t)&&t.every((e=>e instanceof a._w)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in r.BV.registeredVariables)t.push(r.BV.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,i=t.length;t=t.filter((e=>e.trainable)),o.hu(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${i} variables is trainable.`));const{value:u,grads:l}=r.BV.gradients(e,t,null,!0);o.hu(l.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),o.hu(0===u.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${u.rank} tensor`));const c={};return t.forEach(((e,t)=>{null!=l[t]&&(c[e.name]=l[t])})),null!=s&&s.forEach((e=>c[e.name]=null)),{value:u,grads:c}}function p(e){return r.BV.customGrad(e)}function h(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}},9972:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Abs:()=>We.SY,Acos:()=>We.VG,Acosh:()=>We.Sp,AdadeltaOptimizer:()=>zt,AdagradOptimizer:()=>Ut,AdamOptimizer:()=>Xt,AdamaxOptimizer:()=>Kt,Add:()=>We.mm,AddN:()=>We.Xz,All:()=>We.oT,Any:()=>We.IK,ArgMax:()=>We.sJ,ArgMin:()=>We.aJ,Asin:()=>We.M2,Asinh:()=>We.qw,Atan:()=>We.jM,Atan2:()=>We.QC,Atanh:()=>We.Oy,AvgPool:()=>We.Jh,AvgPool3D:()=>We._k,AvgPool3DGrad:()=>We.IM,AvgPoolGrad:()=>We.RO,BatchMatMul:()=>We.XL,BatchToSpaceND:()=>We.zw,Bincount:()=>We.zv,BroadcastTo:()=>We.Ly,Cast:()=>We.RF,Ceil:()=>We.gJ,ClipByValue:()=>We.xn,Complex:()=>We.Zz,ComplexAbs:()=>We.yj,Concat:()=>We.Eh,Conv2D:()=>We.mh,Conv2DBackpropFilter:()=>We.wU,Conv2DBackpropInput:()=>We.wm,Conv3D:()=>We.x1,Conv3DBackpropFilterV2:()=>We.o2,Conv3DBackpropInputV2:()=>We.ik,Cos:()=>We.mc,Cosh:()=>We.TR,CropAndResize:()=>We.Vc,Cumsum:()=>We.iH,DataStorage:()=>er.JL,DenseBincount:()=>We.QR,DepthToSpace:()=>We.T0,DepthwiseConv2dNative:()=>We.ci,DepthwiseConv2dNativeBackpropFilter:()=>We.sL,DepthwiseConv2dNativeBackpropInput:()=>We.y7,Diag:()=>We.$w,Dilation2D:()=>We.p4,Dilation2DBackpropFilter:()=>We.Vn,Dilation2DBackpropInput:()=>We.ek,ENV:()=>y.Vi,Einsum:()=>We.$g,Elu:()=>We.SX,EluGrad:()=>We.HE,Environment:()=>y.qA,Equal:()=>We.hd,Erf:()=>We.Om,Exp:()=>We.NE,ExpandDims:()=>We.YF,Expm1:()=>We.Y0,FFT:()=>We.vw,Fill:()=>We.de,FlipLeftRight:()=>We.Uy,Floor:()=>We.OR,FloorDiv:()=>We.je,FromPixels:()=>We.eB,FusedBatchNorm:()=>We.sH,FusedConv2D:()=>We._V,FusedDepthwiseConv2D:()=>We.lu,GatherNd:()=>We.q1,GatherV2:()=>We.qi,Greater:()=>We.iZ,GreaterEqual:()=>We.Ac,IFFT:()=>We.Qg,Identity:()=>We.iJ,Imag:()=>We.J_,IsFinite:()=>We.av,IsInf:()=>We.iW,IsNan:()=>We.r7,KernelBackend:()=>er.Zu,LRN:()=>We.eZ,LRNGrad:()=>We.Hh,LeakyRelu:()=>We.J$,Less:()=>We.vt,LessEqual:()=>We.CA,LinSpace:()=>We.e7,Log:()=>We.Zb,Log1p:()=>We.kU,LogSoftmax:()=>We.qC,LogicalAnd:()=>We.PY,LogicalNot:()=>We.Vf,LogicalOr:()=>We.MZ,Max:()=>We.Yo,MaxPool:()=>We.mT,MaxPool3D:()=>We.OA,MaxPool3DGrad:()=>We.OU,MaxPoolGrad:()=>We.OV,MaxPoolWithArgmax:()=>We.vF,Maximum:()=>We.BM,Mean:()=>We.q2,Min:()=>We.c1,Minimum:()=>We.q8,MirrorPad:()=>We.jQ,Mod:()=>We.Vb,MomentumOptimizer:()=>Qt,Multinomial:()=>We.NZ,Multiply:()=>We.wY,Neg:()=>We.ku,NonMaxSuppressionV3:()=>We.uv,NonMaxSuppressionV4:()=>We.cy,NonMaxSuppressionV5:()=>We.W0,NotEqual:()=>We.yQ,OP_SCOPE_SUFFIX:()=>en.zvA,OneHot:()=>We.we,OnesLike:()=>We.qW,Optimizer:()=>Vt,Pack:()=>We.Qi,PadV2:()=>We.ly,Pool:()=>We.Kg,Pow:()=>We.pe,Prelu:()=>We.o0,Prod:()=>We.Dl,RMSPropOptimizer:()=>Zt,Range:()=>We.e6,Rank:()=>Jt.yw,Real:()=>We.xJ,RealDiv:()=>We.oH,Reciprocal:()=>We.$H,Reduction:()=>tn.I,Relu:()=>We.qk,Relu6:()=>We.Sb,Reshape:()=>We.HZ,ResizeBilinear:()=>We._Y,ResizeBilinearGrad:()=>We.zb,ResizeNearestNeighbor:()=>We.dp,ResizeNearestNeighborGrad:()=>We.Hm,Reverse:()=>We.mK,RotateWithOffset:()=>We.b9,Round:()=>We.e0,Rsqrt:()=>We.bV,SGDOptimizer:()=>Yt,ScatterNd:()=>We.xQ,Select:()=>We.Ph,Selu:()=>We.oF,Sigmoid:()=>We.a5,Sign:()=>We.i5,Sin:()=>We.RQ,Sinh:()=>We.w3,Slice:()=>We.p2,Softmax:()=>We.Gc,Softplus:()=>We.MR,SpaceToBatchND:()=>We.TQ,SparseFillEmptyRows:()=>We.O3,SparseReshape:()=>We.nh,SparseSegmentMean:()=>We.YW,SparseSegmentSum:()=>We.Zj,SparseToDense:()=>We.D2,SplitV:()=>We.L8,Sqrt:()=>We.FK,Square:()=>We.bK,SquaredDifference:()=>We._t,Step:()=>We.h8,StridedSlice:()=>We.m2,StringNGrams:()=>We._J,StringSplit:()=>We.s1,StringToHashBucketFast:()=>We.Xk,Sub:()=>We.Tr,Sum:()=>We.GB,Tan:()=>We.sE,Tanh:()=>We.MI,Tensor:()=>ye.es,TensorBuffer:()=>ye.YD,Tile:()=>We.n9,TopK:()=>We.cW,Transform:()=>We.wx,Transpose:()=>We.G3,Unique:()=>We.kp,Unpack:()=>We.To,UnsortedSegmentSum:()=>We.Qv,Variable:()=>ye._w,ZerosLike:()=>We.Ru,_FusedMatMul:()=>We.us,abs:()=>en.WnP,acos:()=>en.Khb,acosh:()=>en.__u,add:()=>en.IHx,addN:()=>en.QBD,all:()=>en.$6P,any:()=>en.YjB,argMax:()=>en.NqF,argMin:()=>en.vHJ,asin:()=>en.ZRM,asinh:()=>en.VfV,atan:()=>en.z4N,atan2:()=>en.fvJ,atanh:()=>en.C80,avgPool:()=>en.wS1,avgPool3d:()=>en.uR5,backend:()=>At.y3,backend_util:()=>p,basicLSTMCell:()=>en.zEQ,batchNorm:()=>en.tgs,batchNorm2d:()=>en.Dxk,batchNorm3d:()=>en.JY5,batchNorm4d:()=>en.p3b,batchToSpaceND:()=>en.E4h,bincount:()=>en.yE8,booleanMaskAsync:()=>en.anm,broadcastTo:()=>en.UFq,browser:()=>o,buffer:()=>en.f3b,cast:()=>en.pju,ceil:()=>en.mDi,clipByValue:()=>en.iUl,clone:()=>en.d9v,complex:()=>en.PYB,concat:()=>en.zoF,concat1d:()=>en.gME,concat2d:()=>en.Izb,concat3d:()=>en.MNy,concat4d:()=>en.ZaL,conv1d:()=>en.PAt,conv2d:()=>en.Tek,conv2dTranspose:()=>en.bc,conv3d:()=>en.pdZ,conv3dTranspose:()=>en.$QV,copyRegisteredKernels:()=>Ue.T3,cos:()=>en.mCk,cosh:()=>en.f9Y,cosineWindow:()=>en.mew,cumsum:()=>en.zbp,customGrad:()=>Pt.cb,denseBincount:()=>en.ppE,deprecationWarn:()=>At.MX,depthToSpace:()=>en.nTT,depthwiseConv2d:()=>en.B10,device_util:()=>r,diag:()=>en.Ka3,dilation2d:()=>en.WmZ,disableDeprecationWarnings:()=>At.cF,dispose:()=>At.B9,disposeVariables:()=>At.N8,div:()=>en.hiC,divNoNan:()=>en.NTj,dot:()=>en.AKD,dropout:()=>en.rvX,einsum:()=>en.WYO,elu:()=>en.pyx,enableDebugMode:()=>At.R,enableProdMode:()=>At.G4,enclosingPowerOfTwo:()=>en.GRh,engine:()=>At.SR,env:()=>y.OB,equal:()=>en.DgJ,erf:()=>en.qNN,exp:()=>en.Qqt,expandDims:()=>en.dt4,expm1:()=>en.t$B,eye:()=>en.iyy,fft:()=>en.kp_,fill:()=>en.hlL,findBackend:()=>At.x3,findBackendFactory:()=>At.ze,floor:()=>en.GWj,floorDiv:()=>en.qPi,fused:()=>en.imm,gather:()=>en.Iqj,gatherND:()=>en.dbB,gather_util:()=>i,getBackend:()=>At.N_,getGradient:()=>Ue.uk,getKernel:()=>Ue.pI,getKernelsForBackend:()=>Ue.tr,grad:()=>Pt.UQ,grads:()=>Pt.ti,greater:()=>en.pjt,greaterEqual:()=>en.brS,ifft:()=>en.Sxn,imag:()=>en.asL,image:()=>en.BHj,inTopKAsync:()=>en.V3u,io:()=>a,irfft:()=>en.wx0,isFinite:()=>en.xVT,isInf:()=>en.UWc,isNaN:()=>en.i2d,keep:()=>At.Cn,kernel_impls:()=>h,leakyRelu:()=>en.hi7,less:()=>en.d9m,lessEqual:()=>en.zN1,linalg:()=>en.$r2,linspace:()=>en.SX3,localResponseNormalization:()=>en.G9k,log:()=>en.cM7,log1p:()=>en.Krr,logSigmoid:()=>en.e_t,logSoftmax:()=>en.CmS,logSumExp:()=>en.l_t,logicalAnd:()=>en.HvI,logicalNot:()=>en.hJK,logicalOr:()=>en.K5V,logicalXor:()=>en.egP,losses:()=>en.MB5,matMul:()=>en.OI3,math:()=>s,max:()=>en.Fp7,maxPool:()=>en._sB,maxPool3d:()=>en.YQQ,maxPoolWithArgmax:()=>en.Ip$,maximum:()=>en.gWQ,mean:()=>en.J69,memory:()=>At.sq,meshgrid:()=>en.ry_,min:()=>en.VV$,minimum:()=>en.LTh,mirrorPad:()=>en.VdP,mod:()=>en.wQq,moments:()=>en.Gi7,movingAverage:()=>en.p_,mul:()=>en.dC7,multiRNNCell:()=>en.rq4,multinomial:()=>en.SJ_,neg:()=>en.W76,nextFrame:()=>sn,norm:()=>en.KOy,notEqual:()=>en.Quu,oneHot:()=>en.lfX,ones:()=>en.iUs,onesLike:()=>en.JpU,op:()=>en.op,outerProduct:()=>en.N2O,pad:()=>en.vku,pad1d:()=>en.pNR,pad2d:()=>en.koy,pad3d:()=>en.t1L,pad4d:()=>en.lGY,pool:()=>en.d_R,pow:()=>en.sQ3,prelu:()=>en.AL3,print:()=>en.S0v,prod:()=>en.WVs,profile:()=>At.N5,rand:()=>en.TN_,randomGamma:()=>en.wzB,randomNormal:()=>en.nGf,randomUniform:()=>en.LGj,range:()=>en.w6H,ready:()=>At.Cd,real:()=>en.kwC,reciprocal:()=>en.M25,registerBackend:()=>At.jq,registerGradient:()=>Ue.Li,registerKernel:()=>Ue.wC,relu:()=>en.UYe,relu6:()=>en.btT,removeBackend:()=>At.cj,reshape:()=>en.XLQ,reverse:()=>en.GYS,reverse1d:()=>en.SDf,reverse2d:()=>en.diP,reverse3d:()=>en.sx7,reverse4d:()=>en.mG2,rfft:()=>en.QEs,round:()=>en.NMM,rsqrt:()=>en.bp0,scalar:()=>en.iD$,scatterND:()=>en.snQ,scatter_util:()=>Qe,selu:()=>en.U8D,separableConv2d:()=>en.U_I,serialization:()=>l,setBackend:()=>At.CQ,setPlatform:()=>At.VY,setdiff1dAsync:()=>en.ODp,sigmoid:()=>en.XD2,sign:()=>en.Xxe,signal:()=>en.tdS,sin:()=>en.O$l,sinh:()=>en.R_K,slice:()=>en.tPi,slice1d:()=>en.jZU,slice2d:()=>en.SmN,slice3d:()=>en.CnO,slice4d:()=>en.p0P,slice_util:()=>u,softmax:()=>en.XAC,softplus:()=>en.Wvh,spaceToBatchND:()=>en.fBT,sparse:()=>en.rVs,sparseToDense:()=>en.ers,spectral:()=>en.uN7,split:()=>en.Vl2,sqrt:()=>en._b3,square:()=>en.h62,squaredDifference:()=>en.$i,squeeze:()=>en.L9e,stack:()=>en.knu,step:()=>en.Nbs,stridedSlice:()=>en.NXj,string:()=>en.Z_8,sub:()=>en.luU,sum:()=>en.Smz,sumOutType:()=>Jt.z4,tan:()=>en.ORZ,tanh:()=>en.AEp,tensor:()=>en.XeE,tensor1d:()=>en.RRF,tensor2d:()=>en.odF,tensor3d:()=>en.wOQ,tensor4d:()=>en.yXz,tensor5d:()=>en.Bfx,tensor6d:()=>en.xZs,tensor_util:()=>yt,test_util:()=>c,tidy:()=>At.lu,tile:()=>en.Gg6,time:()=>At.XV,topk:()=>en.hg7,train:()=>rn,transpose:()=>en.p4s,truncatedNormal:()=>en.Xu6,unique:()=>en.Two,unregisterGradient:()=>Ue.bt,unregisterKernel:()=>Ue.nE,unsortedSegmentSum:()=>en.pUJ,unstack:()=>en.HHK,upcastType:()=>Jt.x8,util:()=>bt,valueAndGrad:()=>Pt.h7,valueAndGrads:()=>Pt.fN,variable:()=>en.VD$,variableGrads:()=>Pt.pn,version_core:()=>$t,where:()=>en.arb,whereAsync:()=>en.itS,zeros:()=>en.lls,zerosLike:()=>en.P84});var r={};n.r(r),n.d(r,{isBrowser:()=>g,isMobile:()=>m});var a={};n.r(a),n.d(a,{browserFiles:()=>we,browserHTTPRequest:()=>Ae,concatenateArrayBuffers:()=>E,copyModel:()=>le,decodeWeights:()=>N,encodeWeights:()=>I,fromMemory:()=>Oe,getLoadHandlers:()=>M,getModelArtifactsInfoForJSON:()=>$,getSaveHandlers:()=>D,http:()=>$e,isHTTPScheme:()=>Ee,listModels:()=>ie,loadWeights:()=>Te,moveModel:()=>ce,registerLoadRouter:()=>O,registerSaveRouter:()=>F,removeModel:()=>ue,weightsLoaderFactory:()=>Se,withSaveHandler:()=>De});var s={};n.r(s),n.d(s,{confusionMatrix:()=>ze});var o={};n.r(o),n.d(o,{fromPixels:()=>Ke,fromPixelsAsync:()=>qe,toPixels:()=>je});var i={};n.r(i),n.d(i,{prepareAndValidate:()=>Ye});var u={};n.r(u),n.d(u,{assertParamsValid:()=>Ze,computeFlatOffset:()=>dt,computeOutShape:()=>et,getNormalizedAxes:()=>at,isSliceContinous:()=>ct,maskToAxes:()=>Je,parseSliceParams:()=>pt,sliceInfo:()=>ht,startForAxis:()=>ut,startIndicesWithElidedDims:()=>st,stopForAxis:()=>lt,stopIndicesWithElidedDims:()=>ot,stridesForAxis:()=>it,stridesWithElidedDims:()=>tt});var l={};n.r(l),n.d(l,{Serializable:()=>ft,SerializationMap:()=>mt,registerClass:()=>gt});var c={};n.r(c),n.d(c,{TEST_EPSILON_FLOAT16:()=>xt,encodeStrings:()=>_t,expectArrayBuffersEqual:()=>Et,expectArraysClose:()=>vt,expectArraysEqual:()=>Nt,expectNumbersClose:()=>Tt,expectPromiseToFail:()=>It,expectValuesInRange:()=>Ct,testEpsilon:()=>kt});var d={};n.r(d),n.d(d,{collectGatherOpShapeInfo:()=>Kn,computeOutShape:()=>jn,segOpComputeOptimalWindowSize:()=>qn});var p={};n.r(p),n.d(p,{ERF_A1:()=>Nn,ERF_A2:()=>Tn,ERF_A3:()=>Sn,ERF_A4:()=>Cn,ERF_A5:()=>En,ERF_P:()=>In,PARALLELIZE_THRESHOLD:()=>hn,SELU_SCALE:()=>wn,SELU_SCALEALPHA:()=>kn,applyActivation:()=>pn.QH,assertAndGetBroadcastShape:()=>un.$N,assertAxesAreInnerMostDims:()=>on.lB,assertParamsConsistent:()=>ln,assignToTypedArray:()=>Mn,axesAreInnerMostDims:()=>on.YB,calculateShapes:()=>Qe.calculateShapes,checkEinsumDimSizes:()=>Wn,combineLocations:()=>on.Vh,complexWithEvenIndex:()=>Fn,complexWithOddIndex:()=>On,computeConv2DInfo:()=>dn.Ix,computeConv3DInfo:()=>dn.jw,computeDefaultPad:()=>dn.aO,computeDilation2DInfo:()=>dn.Rf,computeOptimalWindowSize:()=>fn,computeOutAndReduceShapes:()=>on.kz,computeOutShape:()=>cn,computePool2DInfo:()=>dn.Xw,computePool3DInfo:()=>dn.pl,convertConv2DDataFormat:()=>dn.sl,decodeEinsumEquation:()=>Vn,eitherStridesOrDilationsAreOne:()=>dn.jT,expandShapeToKeepDim:()=>on.rv,exponent:()=>Pn,exponents:()=>Bn,fromStringArrayToUint8:()=>Qn,fromUint8ToStringArray:()=>Yn,getAxesPermutation:()=>on.Q3,getBroadcastDims:()=>un.XF,getComplexWithIndex:()=>Dn,getEinsumComputePath:()=>Un,getEinsumPermutation:()=>zn,getFusedBiasGradient:()=>pn.pf,getFusedDyActivation:()=>pn.Fr,getImageCenter:()=>mn,getInnerMostAxes:()=>on.sY,getPermuted:()=>yn,getReductionAxes:()=>un.RR,getReshaped:()=>gn,getReshapedPermuted:()=>bn,getSliceBeginCoords:()=>xn,getSliceSize:()=>vn,getUndoAxesPermutation:()=>on.LJ,isIdentityPermutation:()=>Gn,log:()=>$n,mergeRealAndImagArrays:()=>An,prepareAndValidate:()=>Ye,prepareSplitSize:()=>Xn,segment_util:()=>d,shouldFuse:()=>pn.uy,slice_util:()=>u,splitRealAndImagArrays:()=>Rn,tupleValuesAreOne:()=>dn.I0,upcastType:()=>Jt.x8,validateInput:()=>Qe.validateInput,validateUpdateShape:()=>Qe.validateUpdateShape,warn:()=>_n});var h={};n.r(h),n.d(h,{nonMaxSuppressionV3Impl:()=>Zn.GP,nonMaxSuppressionV4Impl:()=>Zn.qP,nonMaxSuppressionV5Impl:()=>Zn.pA,whereImpl:()=>Jn.Z});var f=n(7097);function m(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function g(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var y=n(2885);const b=(0,y.OB)();b.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),b.registerFlag("IS_BROWSER",(()=>g())),b.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),b.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),b.registerFlag("PROD",(()=>!1)),b.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>b.getBool("DEBUG"))),b.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),b.registerFlag("IS_TEST",(()=>!1)),b.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),b.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));var x=n(1661),v=n(701),k=n(569);const w={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function I(e,t){const n=[],r=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let s=0;s<a.length;++s){const o=a[s],i=Array.isArray(e)?e[s].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],s=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(s,a),a+=4,r.set(n,a),a+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:T(await Promise.all(r)),specs:n}}function N(e,t){const n={};let r,a=0;for(const s of t){const t=s.name,o=s.dtype,i=s.shape,u=(0,k.NA)(i);let l;if("quantization"in s){const n=s.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${s.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${s.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${s.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=w[n.dtype],c=e.slice(a,a+u*i),d="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(d.length);for(let e=0;e<d.length;e++){const t=d[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=A()),l=r(d)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(d.length);for(let e=0;e<d.length;e++){const t=d[e];l[e]=Math.round(t*n.scale+n.min)}}a+=u*i}else if("string"===o){const t=(0,k.NA)(s.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+4))[0];a+=4;const n=new Uint8Array(e.slice(a,a+t));l.push(n),a+=t}}else{const r=w[o],s=e.slice(a,a+u*r);if("float32"===o)l=new Float32Array(s);else if("int32"===o)l=new Int32Array(s);else if("bool"===o)l=new Uint8Array(s);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(s);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const a=(0,v.X)(e,i,"float32"),o=(0,v.X)(r,i,"float32");n[t]=(0,x.P)(a,o),a.dispose(),o.dispose()}}a+=u*r}"complex64"!==o&&(n[t]=(0,v.X)(l,i,o))}return n}function T(e){if(null===e)throw new Error("Invalid input value: "+JSON.stringify(e));let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+e.constructor.name)}));const r=new Uint8Array(t);let a=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),r.buffer}const S="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function C(e){return S?Buffer.byteLength(e):new Blob([e]).size}function E(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function _(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function $(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:C(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:C(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function A(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const a=new ArrayBuffer(4*r.length),s=new Uint32Array(a);for(let a=0;a<r.length;a++){const o=r[a],i=e[n[o>>10]+(1023&o)]+t[o>>10];s[a]=i}return new Float32Array(a)}}class R{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==R.instance&&(R.instance=new R),R.instance}static registerSaveRouter(e){R.getInstance().saveRouters.push(e)}static registerLoadRouter(e){R.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return R.getHandlers(e,"save")}static getLoadHandlers(e,t){return R.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?R.getInstance().loadRouters:R.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&r.push(a)})),r}}const F=e=>R.registerSaveRouter(e),O=e=>R.registerLoadRouter(e),D=e=>R.getSaveHandlers(e),M=(e,t)=>R.getLoadHandlers(e,t),B="tensorflowjs",P="models_store",L="model_info_store";function V(){if(!(0,y.OB)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function z(e){const t=e.result;t.createObjectStore(P,{keyPath:"modelPath"}),t.createObjectStore(L,{keyPath:"modelPath"})}class W{constructor(e){if(this.indexedDB=V(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(B,1);r.onupgradeneeded=()=>z(r),r.onsuccess=()=>{const a=r.result;if(null==t){const t=a.transaction(P,"readonly"),r=t.objectStore(P).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(a.close(),n(r.error)),t.oncomplete=()=>a.close()}else{const r=$(t),s=a.transaction(L,"readwrite");let o=s.objectStore(L);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=a.transaction(P,"readwrite");const i=u.objectStore(P).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=s.objectStore(L);const t=o.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(i.error)),t.onerror=e=>(a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}}},r.onerror=e=>n(r.error)}))}}W.URL_SCHEME="indexeddb://";const U=e=>{return(0,y.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(W.URL_SCHEME)?(t=e.slice(W.URL_SCHEME.length),new W(t)):null;var t};R.registerSaveRouter(U),R.registerLoadRouter(U);class G{constructor(){this.indexedDB=V()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(B,1);n.onupgradeneeded=()=>z(n),n.onsuccess=()=>{const r=n.result,a=r.transaction(L,"readonly"),s=a.objectStore(L).getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(r.close(),t(s.error)),a.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(W.URL_SCHEME)?t.slice(W.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(B,1);r.onupgradeneeded=()=>z(r),r.onsuccess=()=>{const a=r.result,s=a.transaction(L,"readwrite"),o=s.objectStore(L),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),s=()=>{u=a.transaction(P,"readwrite");const r=u.objectStore(P).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=s,r.onerror=e=>(s(),a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}},r.onerror=e=>n(r.error)}))}}const H="/",X="tensorflowjs_models",q="info",j="model_topology",K="weight_specs",Y="weight_data",Q="model_metadata";function Z(e){return{info:[X,e,q].join(H),topology:[X,e,j].join(H),weightSpecs:[X,e,K].join(H),weightData:[X,e,Y].join(H),modelMetadata:[X,e,Q].join(H)}}function J(e){const t=e.split(H);if(t.length<3)throw new Error("Invalid key format: "+e);return t.slice(1,t.length-1).join(H)}class ee{constructor(e){if(!(0,y.OB)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Z(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=$(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(S)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(a.signature=e.signature),null!=e.userDefinedMetadata&&(a.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(a.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(S){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(s),t}}ee.URL_SCHEME="localstorage://";const te=e=>{return(0,y.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ee.URL_SCHEME)?(t=e.slice(ee.URL_SCHEME.length),new ee(t)):null;var t};R.registerSaveRouter(te),R.registerLoadRouter(te);class ne{constructor(){(0,k.hu)((0,y.OB)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),(0,k.hu)("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=X+H,n=H+q;for(let r=0;r<this.LS.length;++r){const a=this.LS.key(r);a.startsWith(t)&&a.endsWith(n)&&(e[J(a)]=JSON.parse(this.LS.getItem(a)))}return e}async removeModel(e){var t;const n=Z(e=(t=e).startsWith(ee.URL_SCHEME)?t.slice(ee.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}const re="://";class ae{constructor(){this.managers={}}static getInstance(){return null==ae.instance&&(ae.instance=new ae),ae.instance}static registerManager(e,t){(0,k.hu)(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(re)&&(e=e.slice(0,e.indexOf(re))),(0,k.hu)(e.length>0,(()=>"scheme must not be an empty string."));const n=ae.getInstance();(0,k.hu)(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function se(e){if(-1===e.indexOf(re))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+ae.getSchemes().join(","));return{scheme:e.split(re)[0],path:e.split(re)[1]}}async function oe(e,t,n=!1){(0,k.hu)(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=R.getLoadHandlers(e);(0,k.hu)(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),(0,k.hu)(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const a=r[0],s=R.getSaveHandlers(t);(0,k.hu)(s.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),(0,k.hu)(s.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=s[0],i=se(e).scheme,u=se(e).path,l=i===se(e).scheme,c=await a.load();n&&l&&await ae.getManager(i).removeModel(u);const d=await o.save(c);return n&&!l&&await ae.getManager(i).removeModel(u),d.modelArtifactsInfo}async function ie(){const e=ae.getSchemes(),t={};for(const n of e){const e=await ae.getManager(n).listModels();for(const r in e)t[n+re+r]=e[r]}return t}async function ue(e){const t=se(e);return ae.getManager(t.scheme).removeModel(t.path)}async function le(e,t){return oe(e,t,!1)}async function ce(e,t){return oe(e,t,!0)}class de{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got "+t);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if((0,y.OB)().get("IS_BROWSER")){(0,y.OB)().setPlatform("browser",new de);try{ae.registerManager(ee.URL_SCHEME,new ne)}catch(e){}try{ae.registerManager(W.URL_SCHEME,new G)}catch(e){}}let pe;(0,y.OB)().get("IS_NODE")&&(0,y.OB)().setPlatform("node",new class{constructor(){this.util=n(1758),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=(0,y.OB)().global.fetch?(0,y.OB)().global.fetch(e,t):(null==pe&&(pe=n(8352)),pe(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got "+t);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});var he=n(2657),fe=n(2271),me=n(8723),ge=n(9798),ye=n(4077);(0,f.wv)();const be={buffer:he.f,cast:fe.p,clone:me.d,print:ge.S};function xe(e){return new Promise((e=>setTimeout(e))).then(e)}(0,ye.Vp)(be);class ve{constructor(e){if(!(0,y.OB)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(ve.URL_SCHEME)&&(e=e.slice(ve.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer);const a=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),s=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(s.download=this.modelTopologyFileName,s.href=a,await xe((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await xe((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:$(e)}}}}ve.URL_SCHEME="downloads://";class ke{constructor(e){if(null==e||e.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+e);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise(((n,r)=>{const a=new FileReader;a.onload=a=>{const s=JSON.parse(a.target.result),o=s.modelTopology;if(null==o)return void r(new Error("modelTopology field is missing from file "+e.name));0===t.length&&n({modelTopology:o});const i=s.weightsManifest;if(null==i)return void r(new Error("weightManifest field is missing from file "+e.name));let u;try{u=this.checkManifestAndWeightFiles(i,t)}catch(e){return void r(e)}const l=[],c=[],d=[];i.forEach((e=>{e.paths.forEach((e=>{c.push(e),d.push(null)})),l.push(...e.weights)})),i.forEach((e=>{e.paths.forEach((e=>{const t=new FileReader;t.onload=t=>{const r=t.target.result,a=c.indexOf(e);if(d[a]=r,-1===d.indexOf(null)){const e={modelTopology:o,weightSpecs:l,weightData:E(d),format:s.format,generatedBy:s.generatedBy,convertedBy:s.convertedBy};null!=s.signature&&(e.signature=s.signature),null!=s.userDefinedMetadata&&(e.userDefinedMetadata=s.userDefinedMetadata),null!=s.modelInitializer&&(e.modelInitializer=s.modelInitializer),n(e)}},t.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(u[e])}))}))},a.onerror=t=>r(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),a.readAsText(e)}))}checkManifestAndWeightFiles(e,t){const n=[],r=t.map((e=>_(e.name))),a={};for(const s of e)s.paths.forEach((e=>{const s=_(e);if(-1!==n.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(n.push(s),-1===r.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);a[e]=t[r.indexOf(s)]}));if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return a}}function we(e){return new ke(e)}function Ie(e,t,n,r){!function(e){(0,k.hu)(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){(0,k.hu)(e>=0&&e<=1,(()=>"Progress fraction must be in range [0, 1], but got startFraction "+e)),(0,k.hu)(t>=0&&t<=1,(()=>"Progress fraction must be in range [0, 1], but got endFraction "+t)),(0,k.hu)(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction `+t))}(n=null==n?0:n,r=null==r?1:r);let a=0;return Promise.all(e.map((s=>(s.then((s=>{const o=n+ ++a/e.length*(r-n);return t(o),s})),s))))}async function Ne(e,t){null==t&&(t={});const n=null==t.fetchFunc?(0,y.OB)().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),a=(null==t.onProgress?await Promise.all(r):await Ie(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(a):await Ie(a,t.onProgress,.5,1)}async function Te(e,t="",n,r){return Se((e=>Ne(e,{requestInit:r})))(e,t,n)}function Se(e){return async(t,n="",r)=>{const a=t.map((()=>!1)),s={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=w[u]*k.NA(e.shape),c=()=>{a[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error("Could not find weights in manifest with names: "+e.join(", ")+". \nManifest JSON has weights with names: "+i.join(", ")+".")}const u=a.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),d={};let p=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[p+e].byteLength;const a=new ArrayBuffer(r),o=new Uint8Array(a);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[p+e]);o.set(t,i),i+=t.byteLength}s[e].forEach((e=>{const t=N(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)d[e]=t[e]})),p+=n})),d}}R.registerSaveRouter((e=>(0,y.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ve.URL_SCHEME)?function(e="model"){return new ve(e)}(e.slice(ve.URL_SCHEME.length)):null));class Ce{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?((0,k.hu)("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=(0,y.OB)().platform.fetch,(0,k.hu)(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&(0,k.hu)(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:$(e),responses:[a]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+a.status+".")}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code `+e.status+". Please verify this URL points to the model JSON of the model to load.");let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest,a=t.generatedBy,s=t.convertedBy,o=t.format,i=t.signature,u=t.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,c;if(null!=r){const e=await this.loadWeights(r);[l,c]=e}const d={modelTopology:n,weightSpecs:l,weightData:c,generatedBy:a,convertedBy:s,format:o};null!=i&&(d.signature=i),null!=u&&(d.userDefinedMetadata=u);const p=t.modelInitializer;return p&&(d.modelInitializer=p),d}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),a=this.weightPathPrefix||n,s=[];for(const t of e)s.push(...t.weights);const o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(a+e+r);return this.weightUrlConverter&&o.push(...await Promise.all(i)),[s,E(await Ne(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Ee(e){return null!=e.match(Ce.URL_SCHEME_REGEX)}Ce.URL_SCHEME_REGEX=/^https?:\/\//;const _e=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Ee(e))):Ee(e),n)return $e(e,t)}return null};function $e(e,t){return new Ce(e,t)}function Ae(e,t){return $e(e,t)}R.registerSaveRouter(_e),R.registerLoadRouter(_e);class Re{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class Fe{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function Oe(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Re(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Re({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Re({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function De(e){return new Fe(e)}var Me=n(3740),Be=n(8687),Pe=n(6708),Le=n(2668),Ve=n(9065);const ze=(0,Le.op)({confusionMatrix_:function(e,t,n){const r=(0,Me._1)(e,"labels","confusionMatrix"),a=(0,Me._1)(t,"predictions","confusionMatrix");k.hu(null==n||n>0&&Number.isInteger(n),(()=>"If provided, numClasses must be a positive integer, but got "+n)),k.hu(1===r.rank,(()=>"Expected the rank of labels to be 1, but got "+r.rank)),k.hu(1===a.rank,(()=>"Expected the rank of predictions to be 1, but got "+a.rank)),k.hu(r.shape[0]===a.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`)),k.hu(n>0&&Number.isInteger(n),(()=>"numClasses is required to be a positive integer, but got "+n));const s=(0,Pe.l)((0,fe.p)(r,"int32"),n),o=(0,Pe.l)((0,fe.p)(a,"int32"),n),i=(0,Ve.p)(s),u=(0,Be.O)(i,o);return(0,fe.p)(u,"int32")}});var We=n(9121),Ue=n(6151),Ge=n(9906);let He;function Xe(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,a=!1,s=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)s=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+e.constructor.name);i=!0}if(a){const t=2;if(a&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=(0,Ue.pI)(We.eB,f.BV.backendName)){const n={pixels:e},r={numChannels:t};return f.BV.runKernel(We.eB,n,r)}const[u,l]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,d;if(o?c=e.getContext("2d").getImageData(0,0,u,l).data:r||n?c=e.data:(s||a||i)&&(null==He&&(He=document.createElement("canvas").getContext("2d")),He.canvas.width=u,He.canvas.height=l,He.drawImage(e,0,0,u,l),c=He.getImageData(0,0,u,l).data),4===t)d=new Int32Array(c);else{const e=u*l;d=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)d[n*t+e]=c[4*n+e]}const p=[l,u,t];return(0,Ge.w)(d,p,"int32")}async function qe(e,t=3){let n=null;if((0,y.OB)().getBool("WRAP_TO_IMAGEBITMAP")&&function(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return Xe(n,t)}async function je(e,t){let n=(0,Me._1)(e,"img","toPixels");if(!(e instanceof ye.es)){const e=n;n=(0,fe.p)(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,a]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+s);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,u=new Uint8ClampedArray(a*r*4);for(let e=0;e<r*a;++e){const t=[0,0,0,255];for(let r=0;r<s;r++){const a=o[e*s+r];if("float32"===n.dtype){if(a<0||a>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===n.dtype&&(a<0||a>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===s?(t[0]=a*i,t[1]=a*i,t[2]=a*i):t[r]=a*i}const r=4*e;u[r+0]=Math.round(t[0]),u[r+1]=Math.round(t[1]),u[r+2]=Math.round(t[2]),u[r+3]=Math.round(t[3])}if(null!=t){t.width=a,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,a,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}const Ke=(0,Le.op)({fromPixels_:Xe});function Ye(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===(0,k.NA)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,s=a[a.length-1];let o=1;for(let e=0;e<a.length-1;++e)o*=a[e];const i=e.shape,u=a.slice();u.pop();let l=1;for(let e=s;e<n;++e)l*=i[e],u.push(i[e]);const c=[...(0,k.e3)(e.shape).map((e=>e/l)),1].slice(0,s);return[u,o,l,c]}var Qe=n(3028);function Ze(e,t,n){const r=e.shape.length;k.hu(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),k.hu(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let a=0;a<r;++a)k.hu(t[a]+n[a]<=e.shape[a],(()=>`Error in slice${r}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function Je(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function et(e,t,n){const r=[];for(let a=0;a<e.length;a++)r[a]=Math.ceil((t[a]-e[a])/n[a]);return r}function tt(e,t,n,r){const a=[...e];for(let e=a.length;e<r.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function nt(e,t,n){return n<=e?n:n-(t-1)}function rt(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function at(e,t,n,r,a,s,o,i,u){const l=e.length;let c=new Array(l),d=new Array(l),p=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=st(o,u,l,r,e),d=ot(i,u,l,a,e),p=tt(s,u,l,e)}else for(let t=0;t<l;t++)c[t]=ut(o,r,s,e,t,u),d[t]=lt(i,a,s,e,t,u),p[t]=it(s,t,u);return{begin:c,end:d,strides:p}}function st(e,t,n,r,a){const s=[...a],o=rt(n,t);for(let a=0;a<s.length;a++)if(o.indexOf(a)>-1)s[a]=0;else{const o=nt(t,n,a);let i=r[o];e&1<<o&&(i=0),s[a]=i}return s}function ot(e,t,n,r,a){const s=[...a],o=rt(n,t);for(let a=0;a<s.length;a++)if(o.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{const o=nt(t,n,a);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),s[a]=i}for(let e=0;e<s.length;e++){const t=a[e];s[e]<0&&(s[e]+=t),s[e]=k.uZ(0,s[e],a[e])}return s}function it(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function ut(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[a];return o<0&&(o+=u),o=k.uZ(0,o,u-1),o}function lt(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[a];return o<0&&(o+=u),o=i>0?k.uZ(0,o,u):k.uZ(-1,o,u-1),o}function ct(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let a=r+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function dt(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function pt(e,t,n){let r;const a=e.shape.length;let s;return r="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),r.forEach((e=>{k.hu(-1!==e,(()=>"slice() does not support negative begin indexing."))})),s=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,s=s.map(((t,n)=>t>=0?t:(k.hu(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,s]}function ht(e,t,n,r,a,s,o,i,u){let l=t.slice(),c=n.slice(),d=r;null==r&&(d=new Array(l.length));const p=Je(o);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==o&&0!==i)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==o&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=e.length-l.length,f=Je(i),m=e.slice();f.forEach((e=>{l[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:b}=at(m,p,h,l,c,d,a,s,o);l=g,c=y,d=b;const x=Je(u);x.forEach((e=>{c[e]=l[e]+1,d[e]=1}));const v=et(l,c,d),k=v.filter(((e,t)=>-1===x.indexOf(t)));return{nonStrided:d.every((e=>1===e)),$begin:l,$end:c,$strides:d,size:v,newShape:m,outShape:k}}class ft{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class mt{constructor(){this.classNameMap={}}static getMap(){return null==mt.instance&&(mt.instance=new mt),mt.instance}static register(e){mt.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function gt(e){(0,k.hu)(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),(0,k.hu)("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),(0,k.hu)(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),mt.register(e)}var yt=n(747),bt=n(9122);const xt=.1;function vt(e,t,n){return null==n&&(n=kt()),wt(e,t,((e,t)=>St(e,t,n)))}function kt(){return 32===f.BV.backend.floatPrecision()?.001:xt}function wt(e,t,n){let r=!0;if(((0,k.fU)(e)||(0,k.fU)(t))&&(r=!1),(0,k.fU)(e)&&(0,k.fU)(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: `+r)}if(Array.isArray(e)&&Array.isArray(t)){const n=(0,Me.C)(e),r=(0,Me.C)(t);if(!(0,k.cO)(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const a=(0,k.fU)(e)?e:(0,k.xH)(e),s=(0,k.fU)(t)?t:(0,k.xH)(t);if(a.length!==s.length)throw new Error(`Arrays have different lengths actual: ${a.length} vs expected: ${s.length}.\nActual:   ${a}.\nExpected: ${s}.`);for(let e=0;e<s.length;++e){const t=a[e],r=s[e];if(!n(t,r))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${r}.\nActual:   ${a}.\nExpected: ${s}.`)}}function It(e,t){e().then((()=>t.fail()),(()=>t()))}function Nt(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return(0,k.HD)(e)||(0,k.HD)(e[0])||(0,k.HD)(t)||(0,k.HD)(t[0])?wt(e,n,((e,t)=>e==t)):wt(e,t,((e,t)=>St(e,t,0)))}function Tt(e,t,n){if(null==n&&(n=kt()),!St(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function St(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Ct(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function Et(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}function _t(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?_t(n):e[t]=(0,bt.encodeString)(n)}return e}const $t="3.7.0";var At=n(4368),Rt=n(6407),Ft=n(1274),Ot=n(4841),Dt=n(3261),Mt=n(248),Bt=n(6577),Pt=n(633),Lt=n(9494);class Vt extends ft{minimize(e,t=!1,n){const{value:r,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return(0,At.B9)(a),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return(0,Pt.pn)(e,t)}dispose(){null!=this.iterations_&&(0,At.B9)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:(0,Lt.i)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Vt,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class zt extends Vt{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=f.BV.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=f.BV.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:t+"/accum_grad",variable:(0,At.lu)((()=>(0,Bt.P)(r).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:t+"/accum_var",variable:(0,At.lu)((()=>(0,Bt.P)(r).variable(!1)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;(0,At.lu)((()=>{const e=(0,Rt.I)((0,Ot.d)(s,this.rho),(0,Ot.d)((0,Mt.h)(a),1-this.rho)),t=(0,Ot.d)((0,Ft.h)((0,Dt._)((0,Rt.I)(o,this.epsilon)),(0,Dt._)((0,Rt.I)(s,this.epsilon))),a),n=(0,Rt.I)((0,Ot.d)(o,this.rho),(0,Ot.d)((0,Mt.h)(t),1-this.rho));s.assign(e),o.assign(n);const i=(0,Rt.I)((0,Ot.d)(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&((0,At.B9)(this.accumulatedGrads.map((e=>e.variable))),(0,At.B9)(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}zt.className="Adadelta",gt(zt);var Wt=n(4006);class Ut extends Vt{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=f.BV.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:t+"/accumulator",variable:(0,At.lu)((()=>(0,Wt.h)(r.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable;(0,At.lu)((()=>{const e=(0,Rt.I)(s,(0,Mt.h)(a));s.assign(e);const t=(0,Rt.I)((0,Ot.d)((0,Ft.h)(a,(0,Dt._)((0,Rt.I)(e,f.BV.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&(0,At.B9)(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Ut.className="Adagrad",gt(Ut);var Gt=n(3453),Ht=n(827);class Xt extends Vt{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],(0,At.lu)((()=>{this.accBeta1=(0,Lt.i)(t).variable(),this.accBeta2=(0,Lt.i)(n).variable()})),null==r&&(this.epsilon=f.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,At.lu)((()=>{const n=(0,Ht.l)(1,this.accBeta1),r=(0,Ht.l)(1,this.accBeta2);t.forEach(((t,a)=>{const s=f.BV.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:t+"/m",variable:(0,At.lu)((()=>(0,Bt.P)(s).variable(!1)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:t+"/v",variable:(0,At.lu)((()=>(0,Bt.P)(s).variable(!1)))});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,u=this.accumulatedSecondMoment[a].variable,l=(0,Rt.I)((0,Ot.d)(i,this.beta1),(0,Ot.d)(o,1-this.beta1)),c=(0,Rt.I)((0,Ot.d)(u,this.beta2),(0,Ot.d)((0,Mt.h)(o),1-this.beta2)),d=(0,Ft.h)(l,n),p=(0,Ft.h)(c,r);i.assign(l),u.assign(c);const h=(0,Rt.I)((0,Ot.d)((0,Ft.h)(d,(0,Rt.I)((0,Dt._)(p),this.epsilon)),-this.learningRate),s);s.assign(h)})),this.accBeta1.assign((0,Ot.d)(this.accBeta1,this.beta1)),this.accBeta2.assign((0,Ot.d)(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&(0,At.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&(0,At.B9)(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),(0,At.lu)((()=>{this.accBeta1.assign((0,Gt.s)(this.beta1,this.iterations_+1)),this.accBeta2.assign((0,Gt.s)(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Xt.className="Adam",gt(Xt);var qt=n(6235),jt=n(632);class Kt extends Vt{constructor(e,t,n,r=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],(0,At.lu)((()=>{this.iteration=(0,Lt.i)(0).variable(),this.accBeta1=(0,Lt.i)(t).variable()})),null==r&&(this.epsilon=f.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,At.lu)((()=>{const n=(0,Ht.l)(1,this.accBeta1),r=(0,Ft.h)(-this.learningRate,(0,Rt.I)((0,Ot.d)(this.iteration,this.decay),1));t.forEach(((t,a)=>{const s=f.BV.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:t+"/m",variable:(0,Bt.P)(s).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:t+"/v",variable:(0,Bt.P)(s).variable(!1)});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,u=this.accumulatedWeightedInfNorm[a].variable,l=(0,Rt.I)((0,Ot.d)(i,this.beta1),(0,Ot.d)(o,1-this.beta1)),c=(0,Ot.d)(u,this.beta2),d=(0,qt.W)(o),p=(0,jt.g)(c,d);i.assign(l),u.assign(p);const h=(0,Rt.I)((0,Ot.d)((0,Ft.h)(r,n),(0,Ft.h)(l,(0,Rt.I)(p,this.epsilon))),s);s.assign(h)})),this.iteration.assign((0,Rt.I)(this.iteration,1)),this.accBeta1.assign((0,Ot.d)(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&(0,At.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&(0,At.B9)(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Kt.className="Adamax",gt(Kt);class Yt extends Vt{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=f.BV.registeredVariables[t];(0,At.lu)((()=>{const e=(0,Rt.I)((0,Ot.d)(this.c,r),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=(0,At.Cn)((0,Lt.i)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Yt.className="SGD",gt(Yt);class Qt extends Yt{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=(0,Lt.i)(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=f.BV.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:t+"/momentum",variable:(0,At.lu)((()=>(0,Bt.P)(r).variable(e)))}}const a=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&(0,At.lu)((()=>{let e;const t=(0,Rt.I)((0,Ot.d)(this.m,a),s);e=this.useNesterov?(0,Rt.I)((0,Ot.d)(this.c,(0,Rt.I)(s,(0,Ot.d)(t,this.m))),r):(0,Rt.I)((0,Ot.d)(this.c,t),r),a.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&(0,At.B9)(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Qt.className="Momentum",gt(Qt);class Zt extends Vt{constructor(e,t=.9,n=0,r=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=f.BV.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=f.BV.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:t+"/rms",variable:(0,At.lu)((()=>(0,Bt.P)(r).variable(a)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:t+"/momentum",variable:(0,At.lu)((()=>(0,Bt.P)(r).variable(a)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:t+"/mg",variable:(0,At.lu)((()=>(0,Bt.P)(r).variable(a)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;(0,At.lu)((()=>{const e=(0,Rt.I)((0,Ot.d)(o,this.decay),(0,Ot.d)((0,Mt.h)(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=(0,Rt.I)((0,Ot.d)(t,this.decay),(0,Ot.d)(s,1-this.decay)),u=(0,Ft.h)((0,Ot.d)(s,this.learningRate),(0,Dt._)((0,Ht.l)(e,(0,Rt.I)((0,Mt.h)(a),this.epsilon)))),l=(0,Rt.I)((0,Ot.d)(i,this.momentum),u);o.assign(e),t.assign(a),i.assign(l);const c=(0,Ht.l)(r,l);r.assign(c)}else{const e=(0,Rt.I)((0,Ot.d)(o,this.decay),(0,Ot.d)((0,Mt.h)(s),1-this.decay)),t=(0,Rt.I)((0,Ot.d)(i,this.momentum),(0,Ft.h)((0,Ot.d)(s,this.learningRate),(0,Dt._)((0,Rt.I)(e,this.epsilon))));o.assign(e),i.assign(t);const n=(0,Ht.l)(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&(0,At.B9)(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&(0,At.B9)(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&(0,At.B9)(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Zt.className="RMSProp",gt(Zt);var Jt=n(1221),en=n(6321),tn=n(9876);class nn{static sgd(e){return new Yt(e)}static momentum(e,t,n=!1){return new Qt(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,a=!1){return new Zt(e,t,n,r,a)}static adam(e=.001,t=.9,n=.999,r=null){return new Xt(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new zt(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,a=0){return new Kt(e,t,n,r,a)}static adagrad(e,t=.1){return new Ut(e,t)}}const rn={sgd:nn.sgd,momentum:nn.momentum,adadelta:nn.adadelta,adagrad:nn.adagrad,rmsprop:nn.rmsprop,adamax:nn.adamax,adam:nn.adam},an="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function sn(){return new Promise((e=>an((()=>e()))))}var on=n(3591),un=n(2200);function ln(e,t){const n=e[0].length;e.forEach(((e,t)=>{k.hu(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),k.hu(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,a)=>{for(let s=0;s<n;s++)k.hu(s===t||e[s]===r[s],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`))}))}function cn(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var dn=n(2582),pn=n(9323);const hn=30;function fn(e){return e<=hn?e:(0,k.jP)(e,Math.floor(Math.sqrt(e)))}function mn(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function gn(e,t,n,r=!0){let a=[];if(r)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)a=a.concat([e[r+1]/t[r],t[r]]);a=a.concat(e.slice(n+1))}return a}function yn(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],a=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?a.push(r):n.push(r);r.push(...n),r.push(0),r.push(...a)}return r}function bn(e,t,n,r=!0){const a=[];r?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function xn(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function vn(e,t,n){const r=e.slice(0,1);for(let a=0;a<n;++a)r.push(e[a+1]-t[a][0]-t[a][1]);return r}const kn=1.7580993408473768,wn=1.0507009873554805,In=.3275911,Nn=.254829592,Tn=-.284496736,Sn=1.421413741,Cn=-1.453152027,En=1.061405429;function _n(...e){(0,y.OB)().getBool("IS_TEST")||console.warn(...e)}function $n(...e){(0,y.OB)().getBool("IS_TEST")||console.log(...e)}function An(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function Rn(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function Fn(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function On(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function Dn(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Mn(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function Bn(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const s=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(s),r[a]=Math.sin(s)}return{real:n,imag:r}}function Pn(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const Ln=/->/g;function Vn(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Ln,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,a]=e.split("->");(0,k.hu)(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const s=r.split(","),o=s.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<a.length;++e){const t=a[e];if(!s.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&","!==t&&i.push(t)}const u=new Array(s.length);for(let e=0;e<o;++e){if(new Set(s[e].split("")).size!==s[e].length)throw new Error(`Found duplicate axes in input component ${s[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<s[e].length;++t)u[e].push(i.indexOf(s[e][t]))}const l=i.length,c=[];for(let e=a.length;e<l;++e)c.push(e);return{allDims:i,summedDims:c,idDims:u}}function zn(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function Wn(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=a[n]:(0,k.hu)(r[t[e][n]]===a[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension `+a[n]))}}function Un(e,t){const n=e,r=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let e=0;e<a;++e)r.push([]);const s=[];for(let e=0;e<n.length;++e){const a=Hn(t,n[e]);for(const t of a)-1===s.indexOf(t)&&(r[e].push(t),s.push(t))}return{path:n,steps:r}}function Gn(e){return e.every(((e,t)=>e===t))}function Hn(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function Xn(e,t,n=0){let r=[];if("number"==typeof t)(0,k.hu)(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{const a=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);(0,k.hu)(a<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}(0,k.hu)(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function qn(e,t){let n,r=!1;for(e<=hn?(n=e,r=!0):n=(0,k.jP)(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=(0,k.jP)(e,n+1);return n}function jn(e,t,n){const r=[],a=e.length;for(let s=0;s<a;s++)s!==t?r.push(e[s]):r.push(n);return r}function Kn(e,t,n,r){const a=t.shape.length,s=e.shape.length;if(0!==r&&(r<-a||r>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${r}`);if(r<0&&(r+=a),r>s)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${s}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let u=1,l=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),l*=e.shape[t];for(let e=r;e<a;e++)i.push(t.shape[e]);for(let t=n+1;t<s;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:o,outputShape:i}}function Yn(e){try{return e.map((e=>(0,bt.decodeString)(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8, error: "+e)}}function Qn(e){return e.map((e=>(0,bt.encodeString)(e)))}var Zn=n(3337),Jn=n(8333),er=n(8713)},9121:(e,t,n)=>{"use strict";n.d(t,{SY:()=>r,VG:()=>a,Sp:()=>s,mm:()=>o,Xz:()=>i,oT:()=>u,IK:()=>l,sJ:()=>c,aJ:()=>d,M2:()=>p,qw:()=>h,jM:()=>f,Oy:()=>m,QC:()=>g,Jh:()=>y,RO:()=>b,_k:()=>x,IM:()=>v,XL:()=>k,zw:()=>w,zv:()=>I,Ly:()=>N,RF:()=>T,gJ:()=>S,xn:()=>C,Zz:()=>E,yj:()=>_,Eh:()=>$,mh:()=>A,wU:()=>R,wm:()=>F,x1:()=>O,o2:()=>D,ik:()=>M,mc:()=>B,TR:()=>P,iH:()=>L,Vc:()=>V,QR:()=>z,T0:()=>W,ci:()=>U,sL:()=>G,y7:()=>H,$w:()=>X,p4:()=>q,ek:()=>j,Vn:()=>K,oH:()=>Y,$g:()=>Q,SX:()=>Z,HE:()=>J,Om:()=>ee,hd:()=>te,NE:()=>ne,YF:()=>re,Y0:()=>ae,vw:()=>se,de:()=>oe,Uy:()=>ie,OR:()=>ue,je:()=>le,sH:()=>ce,qi:()=>de,q1:()=>pe,iZ:()=>he,Ac:()=>fe,iJ:()=>me,Qg:()=>ge,J_:()=>ye,av:()=>be,iW:()=>xe,r7:()=>ve,J$:()=>ke,vt:()=>we,CA:()=>Ie,e7:()=>Ne,Zb:()=>Te,kU:()=>Se,PY:()=>Ce,Vf:()=>Ee,MZ:()=>_e,qC:()=>$e,eZ:()=>Ae,Hh:()=>Re,Yo:()=>Fe,BM:()=>Oe,mT:()=>De,OV:()=>Me,OA:()=>Be,OU:()=>Pe,vF:()=>Le,q2:()=>Ve,c1:()=>ze,q8:()=>We,jQ:()=>Ue,Vb:()=>Ge,NZ:()=>He,wY:()=>Xe,ku:()=>qe,yQ:()=>je,uv:()=>Ke,cy:()=>Ye,W0:()=>Qe,qW:()=>Ze,we:()=>Je,Qi:()=>et,ly:()=>tt,Kg:()=>nt,pe:()=>rt,o0:()=>at,Dl:()=>st,e6:()=>ot,xJ:()=>it,$H:()=>ut,qk:()=>lt,HZ:()=>ct,dp:()=>dt,Hm:()=>pt,_Y:()=>ht,zb:()=>ft,Sb:()=>mt,mK:()=>gt,e0:()=>yt,bV:()=>bt,xQ:()=>xt,Ph:()=>vt,oF:()=>kt,p2:()=>wt,RQ:()=>It,w3:()=>Nt,i5:()=>Tt,a5:()=>St,MR:()=>Ct,FK:()=>Et,GB:()=>_t,TQ:()=>$t,L8:()=>At,Gc:()=>Rt,O3:()=>Ft,nh:()=>Ot,YW:()=>Dt,Zj:()=>Mt,D2:()=>Bt,_t:()=>Pt,bK:()=>Lt,m2:()=>Vt,_J:()=>zt,s1:()=>Wt,Xk:()=>Ut,Tr:()=>Gt,sE:()=>Ht,MI:()=>Xt,n9:()=>qt,cW:()=>jt,wx:()=>Kt,G3:()=>Yt,kp:()=>Qt,To:()=>Zt,Qv:()=>Jt,Ru:()=>en,h8:()=>tn,eB:()=>nn,b9:()=>rn,us:()=>an,_V:()=>sn,lu:()=>on});const r="Abs",a="Acos",s="Acosh",o="Add",i="AddN",u="All",l="Any",c="ArgMax",d="ArgMin",p="Asin",h="Asinh",f="Atan",m="Atanh",g="Atan2",y="AvgPool",b="AvgPoolGrad",x="AvgPool3D",v="AvgPool3DGrad",k="BatchMatMul",w="BatchToSpaceND",I="Bincount",N="BroadcastTo",T="Cast",S="Ceil",C="ClipByValue",E="Complex",_="ComplexAbs",$="Concat",A="Conv2D",R="Conv2DBackpropFilter",F="Conv2DBackpropInput",O="Conv3D",D="Conv3DBackpropFilterV2",M="Conv3DBackpropInputV2",B="Cos",P="Cosh",L="Cumsum",V="CropAndResize",z="DenseBincount",W="DepthToSpace",U="DepthwiseConv2dNative",G="DepthwiseConv2dNativeBackpropFilter",H="DepthwiseConv2dNativeBackpropInput",X="Diag",q="Dilation2D",j="Dilation2DBackpropInput",K="Dilation2DBackpropFilter",Y="RealDiv",Q="Einsum",Z="Elu",J="EluGrad",ee="Erf",te="Equal",ne="Exp",re="ExpandDims",ae="Expm1",se="FFT",oe="Fill",ie="FlipLeftRight",ue="Floor",le="FloorDiv",ce="FusedBatchNorm",de="GatherV2",pe="GatherNd",he="Greater",fe="GreaterEqual",me="Identity",ge="IFFT",ye="Imag",be="IsFinite",xe="IsInf",ve="IsNan",ke="LeakyRelu",we="Less",Ie="LessEqual",Ne="LinSpace",Te="Log",Se="Log1p",Ce="LogicalAnd",Ee="LogicalNot",_e="LogicalOr",$e="LogSoftmax",Ae="LRN",Re="LRNGrad",Fe="Max",Oe="Maximum",De="MaxPool",Me="MaxPoolGrad",Be="MaxPool3D",Pe="MaxPool3DGrad",Le="MaxPoolWithArgmax",Ve="Mean",ze="Min",We="Minimum",Ue="MirrorPad",Ge="Mod",He="Multinomial",Xe="Multiply",qe="Neg",je="NotEqual",Ke="NonMaxSuppressionV3",Ye="NonMaxSuppressionV4",Qe="NonMaxSuppressionV5",Ze="OnesLike",Je="OneHot",et="Pack",tt="PadV2",nt="Pool",rt="Pow",at="Prelu",st="Prod",ot="Range",it="Real",ut="Reciprocal",lt="Relu",ct="Reshape",dt="ResizeNearestNeighbor",pt="ResizeNearestNeighborGrad",ht="ResizeBilinear",ft="ResizeBilinearGrad",mt="Relu6",gt="Reverse",yt="Round",bt="Rsqrt",xt="ScatterNd",vt="Select",kt="Selu",wt="Slice",It="Sin",Nt="Sinh",Tt="Sign",St="Sigmoid",Ct="Softplus",Et="Sqrt",_t="Sum",$t="SpaceToBatchND",At="SplitV",Rt="Softmax",Ft="SparseFillEmptyRows",Ot="SparseReshape",Dt="SparseSegmentMean",Mt="SparseSegmentSum",Bt="SparseToDense",Pt="SquaredDifference",Lt="Square",Vt="StridedSlice",zt="StringNGrams",Wt="StringSplit",Ut="StringToHashBucketFast",Gt="Sub",Ht="Tan",Xt="Tanh",qt="Tile",jt="TopK",Kt="Transform",Yt="Transpose",Qt="Unique",Zt="Unpack",Jt="UnsortedSegmentSum",en="ZerosLike",tn="Step",nn="FromPixels",rn="RotateWithOffset",an="_FusedMatMul",sn="FusedConv2D",on="FusedDepthwiseConv2D"},6151:(e,t,n)=>{"use strict";n.d(t,{pI:()=>i,uk:()=>u,tr:()=>l,wC:()=>c,Li:()=>d,nE:()=>p,bt:()=>h,T3:()=>f});var r=n(2885),a=n(5938);const s=(0,a.R)("kernelRegistry",(()=>new Map)),o=(0,a.R)("gradRegistry",(()=>new Map));function i(e,t){const n=m(e,t);return s.get(n)}function u(e){return o.get(e)}function l(e){const t=s.entries(),n=[];for(;;){const{done:r,value:a}=t.next();if(r)break;const[s,o]=a,[i]=s.split("_");i===e&&n.push(o)}return n}function c(e){const{kernelName:t,backendName:n}=e,r=m(t,n);s.has(r)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),s.set(r,e)}function d(e){const{kernelName:t}=e;o.has(t)&&(0,r.OB)().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),o.set(t,e)}function p(e,t){const n=m(e,t);if(!s.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);s.delete(n)}function h(e){if(!o.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);o.delete(e)}function f(e,t){l(e).forEach((e=>{c(Object.assign({},e,{backendName:t}))}))}function m(e,t){return`${t}_${e}`}},6235:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({abs_:function(e){const t=(0,s._1)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return r.BV.runKernel(a.yj,e)}{const e={x:t};return r.BV.runKernel(a.SY,e)}}})},7839:(e,t,n)=>{"use strict";n.d(t,{K:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({acos_:function(e){const t={x:(0,s._1)(e,"x","acos")};return r.BV.runKernel(a.VG,t)}})},1470:(e,t,n)=>{"use strict";n.d(t,{_:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({acosh_:function(e){const t={x:(0,s._1)(e,"x","acosh")};return r.BV.runKernel(a.Sp,t)}})},6407:(e,t,n)=>{"use strict";n.d(t,{I:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({add_:function(e,t){let n=(0,o._1)(e,"a","add"),i=(0,o._1)(t,"b","add");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.mm,u)}})},3135:(e,t,n)=>{"use strict";n.d(t,{Q:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({addN_:function(e){o.hu(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),o.hu(e.length>=1,(()=>"Must pass at least one tensor to tf.addN(), but got "+e.length));const t=e.map(((e,t)=>(0,s._1)(e,"tensors"+t,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!o.cO(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const i=t;return r.BV.runKernel(a.Xz,i)}})},781:(e,t,n)=>{"use strict";n.d(t,{$:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({all_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","all","bool")},i={axis:t,keepDims:n};return r.BV.runKernel(a.oT,o,i)}})},2998:(e,t,n)=>{"use strict";n.d(t,{Y:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({any_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","any","bool")},i={axis:t,keepDims:n};return r.BV.runKernel(a.IK,o,i)}})},47:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({argMax_:function(e,t=0){const n={x:(0,s._1)(e,"x","argMax")},o={axis:t};return r.BV.runKernel(a.sJ,n,o)}})},7394:(e,t,n)=>{"use strict";n.d(t,{v:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({argMin_:function(e,t=0){const n={x:(0,s._1)(e,"x","argMin")},o={axis:t};return r.BV.runKernel(a.aJ,n,o)}})},2421:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({asin_:function(e){const t={x:(0,s._1)(e,"x","asin")};return r.BV.runKernel(a.M2,t)}})},1891:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({asinh_:function(e){const t={x:(0,s._1)(e,"x","asinh")};return r.BV.runKernel(a.qw,t)}})},7037:(e,t,n)=>{"use strict";n.d(t,{z:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({atan_:function(e){const t={x:(0,s._1)(e,"x","atan")};return r.BV.runKernel(a.jM,t)}})},9812:(e,t,n)=>{"use strict";n.d(t,{f:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({atan2_:function(e,t){let n=(0,o._1)(e,"a","atan2"),i=(0,o._1)(t,"b","atan2");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.QC,u)}})},369:(e,t,n)=>{"use strict";n.d(t,{C:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({atanh_:function(e){const t={x:(0,s._1)(e,"x","atanh")};return r.BV.runKernel(a.Oy,t)}})},5176:(e,t,n)=>{"use strict";n.d(t,{w:()=>d});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2271),u=n(2582),l=n(2668),c=n(4968);const d=(0,l.op)({avgPool_:function(e,t,n,l,d){const p=(0,s._1)(e,"x","avgPool","float32");o.hu(u.jT(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let h=p,f=!1;3===p.rank&&(f=!0,h=(0,c.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),o.hu(4===h.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${h.rank}.`)),null!=d&&o.hu(o.GN(l),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${d} but got pad ${l}.`));const m={x:h},g={filterSize:t,strides:n,pad:l,dimRoundingMode:d};let y=r.BV.runKernel(a.Jh,m,g);return y=(0,i.p)(y,p.dtype),f?(0,c.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},1749:(e,t,n)=>{"use strict";n.d(t,{u:()=>c});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2271),u=n(2668),l=n(4968);const c=(0,u.op)({avgPool3d_:function(e,t,n,u,c,d="NDHWC"){const p=(0,s._1)(e,"x","avgPool3d","float32");let h=p,f=!1;4===p.rank&&(f=!0,h=(0,l.X)(p,[1,p.shape[0],p.shape[1],p.shape[2],p.shape[3]])),o.hu(5===h.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${h.rank}.`)),o.hu("NDHWC"===d,(()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+d)),null!=c&&o.hu(o.GN(u),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${c} but got pad ${u}.`));const m={x:h},g={filterSize:t,strides:n,pad:u,dimRoundingMode:c,dataFormat:d};let y=r.BV.runKernel(a._k,m,g);return y=(0,i.p)(y,h.dtype),f?(0,l.X)(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}})},3591:(e,t,n)=>{"use strict";n.d(t,{YB:()=>a,Vh:()=>s,kz:()=>o,rv:()=>i,lB:()=>u,Q3:()=>l,LJ:()=>c,sY:()=>d});var r=n(569);function a(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function s(e,t,n){const r=e.length+t.length,a=[];let s=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?a.push(e[s++]):a.push(t[o++]);return a}function o(e,t){const n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function i(e,t){return s(e,t.map((e=>1)),t)}function u(e,t,n){r.hu(a(t,n),(()=>e+" supports only inner-most axes for now. "+`Got axes ${t} and rank-${n} input.`))}function l(e,t){if(a(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function c(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function d(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}},8441:(e,t,n)=>{"use strict";n.d(t,{E:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({batchToSpaceND_:function(e,t,n){const i=(0,s._1)(e,"x","batchToSpaceND"),u=t.reduce(((e,t)=>e*t));o.hu(i.rank>=1+t.length,(()=>`input rank is ${i.rank} but should be > than blockShape.length ${t.length}`)),o.hu(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),o.hu(i.shape[0]%u==0,(()=>`input tensor batch is ${i.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${u}`));const l={x:i},c={blockShape:t,crops:n};return r.BV.runKernel(a.zw,l,c)}})},7505:(e,t,n)=>{"use strict";n.d(t,{t:()=>u});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(4968);const u=(0,n(2668).op)({batchNorm_:function(e,t,n,u,l,c){null==c&&(c=.001);const d=(0,s._1)(e,"x","batchNorm"),p=(0,s._1)(t,"mean","batchNorm"),h=(0,s._1)(n,"variance","batchNorm");let f,m;null!=l&&(f=(0,s._1)(l,"scale","batchNorm")),null!=u&&(m=(0,s._1)(u,"offset","batchNorm")),o.hu(p.rank===h.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),o.hu(null==m||p.rank===m.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),o.hu(null==f||p.rank===f.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const g={x:function(e){let t;return t=0===e.rank||1===e.rank?(0,i.X)(e,[1,1,1,e.size]):2===e.rank?(0,i.X)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?(0,i.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(d),scale:f,offset:m,mean:p,variance:h},y={varianceEpsilon:c},b=r.BV.runKernel(a.sH,g,y);return(0,i.X)(b,d.shape)}})},3865:(e,t,n)=>{"use strict";n.d(t,{y:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({bincount_:function(e,t,n){const i=(0,s._1)(e,"x","bincount"),u=(0,s._1)(t,"weights","bincount");o.hu("int32"===i.dtype,(()=>"Error in bincount: input dtype must be int32, but got "+i.dtype)),o.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),o.hu(u.size===i.size||0===u.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${i.shape}, weights shape: `+u.shape+"."));const l={x:i,weights:u},c={size:n};return r.BV.runKernel(a.zv,l,c)}})},8247:(e,t,n)=>{"use strict";n.d(t,{U:()=>l});var r=n(7097),a=n(9121),s=n(3740),o=n(8723),i=n(2668),u=n(4968);const l=(0,i.op)({broadcastTo_:function(e,t){let n=(0,s._1)(e,"broadcastTo","x");const i=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=(0,u.X)(n,e)}const l=n.shape,c=Array.from(t);for(let e=t.length-1;e>=0;e--)if(l[e]===t[e])c[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${i}] cannot be broadcast to [${t}].`);if(0===c.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return(0,o.d)(n);const d={x:n},p={reps:c};return r.BV.runKernel(a.n9,d,p)}})},2200:(e,t,n)=>{"use strict";function r(e,t){const n=e.length,r=[];for(let a=0;a<n;a++){const s=n-1-a,o=e[s]||1;(t[t.length-1-a]||1)>1&&1===o&&r.unshift(s)}return r}function a(e,t){const n=[];for(let r=0;r<t.length;r++){const a=e[e.length-r-1],s=t.length-r-1,o=t[s];(null==a||1===a&&o>1)&&n.unshift(s)}return n}function s(e,t){const n=[],r=Math.max(e.length,t.length);for(let a=0;a<r;a++){let r=e[e.length-a-1];null==r&&(r=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else{if(r!==s)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(r)}}return n}n.d(t,{XF:()=>r,RR:()=>a,$N:()=>s})},2657:(e,t,n)=>{"use strict";n.d(t,{f:()=>s});var r=n(4077),a=n(569);function s(e,t="float32",n){return t=t||"float32",a.Mu(e),new r.YD(e,t,n)}},2271:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({cast_:function(e,t){const n=(0,s._1)(e,"x","cast");if(!o.LP(t))throw new Error("Failed to cast to unknown dtype "+t);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const i={x:n},u={dtype:t};return r.BV.runKernel(a.RF,i,u)}})},6825:(e,t,n)=>{"use strict";n.d(t,{m:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({ceil_:function(e){const t={x:(0,s._1)(e,"x","ceil")};return r.BV.runKernel(a.gJ,t)}})},2279:(e,t,n)=>{"use strict";n.d(t,{i:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({clipByValue_:function(e,t,n){const i=(0,s._1)(e,"x","clipByValue");o.hu(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const u={x:i},l={clipValueMin:t,clipValueMax:n};return r.BV.runKernel(a.xn,u,l)}})},8723:(e,t,n)=>{"use strict";n.d(t,{d:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({clone_:function(e){const t={x:(0,s._1)(e,"x","clone","string_or_numeric")};return r.BV.runKernel(a.iJ,t)}})},1661:(e,t,n)=>{"use strict";n.d(t,{P:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({complex_:function(e,t){const n=(0,s._1)(e,"real","complex"),i=(0,s._1)(t,"imag","complex");o.k5(n.shape,i.shape,`real and imag shapes, ${n.shape} and ${i.shape}, must match in call to tf.complex().`);const u={real:n,imag:i};return r.BV.runKernel(a.Zz,u)}})},6884:(e,t,n)=>{"use strict";n.d(t,{z:()=>u});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(8723);const u=(0,n(2668).op)({concat_:function(e,t=0){(0,o.hu)(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=(0,s.sI)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return(0,i.d)(n[0]);const u=n,l={axis:t};return r.BV.runKernel(a.Eh,u,l)}})},1355:(e,t,n)=>{"use strict";n.d(t,{P:()=>l});var r=n(3740),a=n(569),s=n(4794),o=n(2582),i=n(2668),u=n(4968);const l=(0,i.op)({conv1d_:function(e,t,n,i,l="NWC",c=1,d){const p=(0,r._1)(e,"x","conv1d"),h=(0,r._1)(t,"filter","conv1d");let f=p,m=!1;2===p.rank&&(m=!0,f=(0,u.X)(p,[1,p.shape[0],p.shape[1]])),a.hu(3===f.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${f.rank}.`)),a.hu(3===h.rank,(()=>"Error in conv1d: filter must be rank 3, but got rank "+h.rank+".")),null!=d&&a.hu(a.GN(i),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${d} but got pad ${i}.`)),a.hu(f.shape[2]===h.shape[1],(()=>`Error in conv1d: depth of input (${f.shape[2]}) must match input depth for filter ${h.shape[1]}.`)),a.hu(o.jT(n,c),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${c}'`)),a.hu("NWC"===l,(()=>`Error in conv1d: got dataFormat of ${l} but only NWC is currently supported.`));const g=(0,u.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]]),y=(0,u.X)(f,[f.shape[0],1,f.shape[1],f.shape[2]]),b=[1,n],x=[1,c],v=(0,s.T)(y,g,b,i,"NHWC",x,d);return m?(0,u.X)(v,[v.shape[2],v.shape[3]]):(0,u.X)(v,[v.shape[0],v.shape[2],v.shape[3]])}})},4794:(e,t,n)=>{"use strict";n.d(t,{T:()=>c});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2582),u=n(2668),l=n(4968);const c=(0,u.op)({conv2d_:function(e,t,n,u,c="NHWC",d=[1,1],p){const h=(0,s._1)(e,"x","conv2d"),f=(0,s._1)(t,"filter","conv2d");let m=h,g=!1;3===h.rank&&(g=!0,m=(0,l.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),o.hu(4===m.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${m.rank}.`)),o.hu(4===f.rank,(()=>"Error in conv2d: filter must be rank 4, but got rank "+f.rank+".")),null!=p&&o.hu(o.GN(u),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${p} but got pad ${u}.`));const y="NHWC"===c?m.shape[3]:m.shape[1];o.hu(y===f.shape[2],(()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${f.shape[2]}.`)),o.hu(i.jT(n,d),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${d}'`));const b={x:m,filter:f},x={strides:n,pad:u,dataFormat:c,dilations:d,dimRoundingMode:p},v=r.BV.runKernel(a.mh,b,x);return g?(0,l.X)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},9832:(e,t,n)=>{"use strict";n.d(t,{_:()=>u});var r=n(7097),a=n(9121),s=n(569),o=n(2668),i=n(4968);const u=(0,o.op)({conv2DBackpropInput_:function(e,t,n,o,u,l="NHWC",c){s.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let d=e,p=t,h=!1;3===t.rank&&(h=!0,p=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),d=[1,e[0],e[1],e[2]]),s.hu(4===d.length,(()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+d.length+".")),s.hu(4===p.rank,(()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+p.rank)),s.hu(4===n.rank,(()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank));const f="NHWC"===l?d[3]:d[1],m="NHWC"===l?p.shape[3]:p.shape[1];s.hu(f===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${f}) must match input depth for filter ${n.shape[2]}.`)),s.hu(m===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${m}) must match output depth for filter ${n.shape[3]}.`)),null!=c&&s.hu(s.GN(u),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${c} but got pad ${u}.`));const g={dy:p,filter:n},y={strides:o,pad:u,dataFormat:l,dimRoundingMode:c,inputShape:d},b=r.BV.runKernel(a.wm,g,y);return h?(0,i.X)(b,[b.shape[1],b.shape[2],b.shape[3]]):b}})},1405:(e,t,n)=>{"use strict";n.d(t,{b:()=>s});var r=n(3740),a=n(9832);const s=(0,n(2668).op)({conv2dTranspose_:function(e,t,n,s,o,i){const u=(0,r._1)(e,"x","conv2dTranspose"),l=(0,r._1)(t,"filter","conv2dTranspose");return(0,a._)(n,u,l,s,o,"NHWC",i)}})},473:(e,t,n)=>{"use strict";n.d(t,{p:()=>c});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2582),u=n(2668),l=n(4968);const c=(0,u.op)({conv3d_:function(e,t,n,u,c="NDHWC",d=[1,1,1]){const p=(0,s._1)(e,"x","conv3d"),h=(0,s._1)(t,"filter","conv3d");let f=p,m=!1;4===p.rank&&(m=!0,f=(0,l.X)(p,[1,p.shape[0],p.shape[1],p.shape[2],p.shape[3]])),o.hu(5===f.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${f.rank}.`)),o.hu(5===h.rank,(()=>"Error in conv3d: filter must be rank 5, but got rank "+h.rank+".")),o.hu(f.shape[4]===h.shape[3],(()=>`Error in conv3d: depth of input (${f.shape[4]}) must match input depth for filter ${h.shape[3]}.`)),o.hu((0,i.jT)(n,d),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${d}'`)),o.hu("NDHWC"===c,(()=>`Error in conv3d: got dataFormat of ${c} but only NDHWC is currently supported.`));const g={x:f,filter:h},y={strides:n,pad:u,dataFormat:c,dilations:d},b=r.BV.runKernel(a.x1,g,y);return m?(0,l.X)(b,[b.shape[1],b.shape[2],b.shape[3],b.shape[4]]):b}})},2582:(e,t,n)=>{"use strict";function r(e,t,n,r,a="NHWC",s){return o(e,[...t,e[3]],n,s,r,null,null,m(a))}function a(e,t,n,r,a,s,i="channelsLast"){const[u,c]=l(t);let d;if("channelsLast"===i)d=[u,c,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);d=[u,c,e[1],e[1]]}return o(e,d,n,r,a,s,!1,i)}function s(e,t,n,r,a,s,o="NDHWC"){const[u,l,d]=c(t);let p,h;if("NDHWC"===o)h="channelsLast",p=[u,l,d,e[4],e[4]];else{if("NCDHW"!==o)throw new Error("Unknown dataFormat "+o);h="channelsFirst",p=[u,l,d,e[1],e[1]]}return i(e,p,n,r,a,!1,h,s)}function o(e,t,n,r,a,s,o=!1,i="channelsLast"){let[c,h,f,m]=[-1,-1,-1,-1];if("channelsLast"===i)[c,h,f,m]=e;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[c,m,h,f]=e}const[g,y,,b]=t,[x,v]=l(n),[k,w]=l(r),I=d(g,k),N=d(y,w),{padInfo:T,outHeight:S,outWidth:C}=function(e,t,n,r,a,s,o,i,l){let c,d,h;if("number"==typeof e){c={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,a){null==r&&(r=u(e,t,n));const s=e[1];return[p((e[0]-t+2*r)/n+1,a),p((s-t+2*r)/n+1,a)]}([t,n],s,r,e,i);d=a[0],h=a[1]}else if("same"===e){d=Math.ceil(t/r),h=Math.ceil(n/a);const e=Math.max(0,(d-1)*r+s-t),i=Math.max(0,(h-1)*a+o-n),u=Math.floor(e/2),l=e-u,p=Math.floor(i/2);c={top:u,bottom:l,left:p,right:i-p,type:"SAME"}}else if("valid"===e)c={top:0,bottom:0,left:0,right:0,type:"VALID"},d=Math.ceil((t-s+1)/r),h=Math.ceil((n-o+1)/a);else{if("object"!=typeof e)throw Error("Unknown padding parameter: "+e);{const u="channelsLast"===l?e[1][0]:e[2][0],f="channelsLast"===l?e[1][1]:e[2][1],m="channelsLast"===l?e[2][0]:e[3][0],g="channelsLast"===l?e[2][1]:e[3][1];c={top:u,bottom:f,left:m,right:g,type:0===u&&0===f&&0===m&&0===g?"VALID":"EXPLICIT"},d=p((t-s+u+f)/r+1,i),h=p((n-o+m+g)/a+1,i)}}return{padInfo:c,outHeight:d,outWidth:h}}(a,h,f,x,v,I,N,s,i),E=o?b*m:b;let _;return"channelsFirst"===i?_=[c,E,S,C]:"channelsLast"===i&&(_=[c,S,C,E]),{batchSize:c,dataFormat:i,inHeight:h,inWidth:f,inChannels:m,outHeight:S,outWidth:C,outChannels:E,padInfo:T,strideHeight:x,strideWidth:v,filterHeight:g,filterWidth:y,effectiveFilterHeight:I,effectiveFilterWidth:N,dilationHeight:k,dilationWidth:w,inShape:e,outShape:_,filterShape:t}}function i(e,t,n,r,a,s=!1,o="channelsLast",i){let[l,h,f,m,g]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,h,f,m,g]=e;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[l,g,h,f,m]=e}const[y,b,x,,v]=t,[k,w,I]=c(n),[N,T,S]=c(r),C=d(y,N),E=d(b,T),_=d(x,S),{padInfo:$,outDepth:A,outHeight:R,outWidth:F}=function(e,t,n,r,a,s,o,i,l,c,d){let h,f,m,g;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,a,s){null==a&&(a=u(e,t,r));const o=e[1],i=e[2];return[p((e[0]-t+2*a)/r+1,s),p((o-t+2*a)/r+1,s),p((i-t+2*a)/r+1,s),1]}([t,n,r,1],i,0,a,e,d);f=s[0],m=s[1],g=s[2]}else if("same"===e){f=Math.ceil(t/a),m=Math.ceil(n/s),g=Math.ceil(r/o);const e=(f-1)*a+i-t,u=(m-1)*s+l-n,d=(g-1)*o+c-r,p=Math.floor(e/2),y=e-p,b=Math.floor(u/2),x=u-b,v=Math.floor(d/2);h={top:b,bottom:x,left:v,right:d-v,front:p,back:y,type:"SAME"}}else{if("valid"!==e)throw Error("Unknown padding parameter: "+e);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},f=Math.ceil((t-i+1)/a),m=Math.ceil((n-l+1)/s),g=Math.ceil((r-c+1)/o)}return{padInfo:h,outDepth:f,outHeight:m,outWidth:g}}(a,h,f,m,k,w,I,C,E,_,i),O=s?v*g:v;let D;return"channelsFirst"===o?D=[l,O,A,R,F]:"channelsLast"===o&&(D=[l,A,R,F,O]),{batchSize:l,dataFormat:o,inDepth:h,inHeight:f,inWidth:m,inChannels:g,outDepth:A,outHeight:R,outWidth:F,outChannels:O,padInfo:$,strideDepth:k,strideHeight:w,strideWidth:I,filterDepth:y,filterHeight:b,filterWidth:x,effectiveFilterDepth:C,effectiveFilterHeight:E,effectiveFilterWidth:_,dilationDepth:N,dilationHeight:T,dilationWidth:S,inShape:e,outShape:D,filterShape:t}}function u(e,t,n,r=1){const a=d(t,r);return Math.floor((e[0]*(n-1)-n+a)/2)}function l(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function c(e){return"number"==typeof e?[e,e,e]:e}function d(e,t){return t<=1?e:e+(e-1)*(t-1)}function p(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error("Unknown roundingMode "+t)}}function h(e){const[t,n,r]=l(e);return 1===t&&1===n&&1===r}function f(e,t){return h(e)||h(t)}function m(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error("Unknown dataFormat "+e)}n.d(t,{Rf:()=>r,Xw:()=>a,pl:()=>s,Ix:()=>o,jw:()=>i,aO:()=>u,I0:()=>h,jT:()=>f,sl:()=>m})},173:(e,t,n)=>{"use strict";n.d(t,{m:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({cos_:function(e){const t={x:(0,s._1)(e,"x","cos")};return r.BV.runKernel(a.mc,t)}})},2699:(e,t,n)=>{"use strict";n.d(t,{f:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({cosh_:function(e){const t={x:(0,s._1)(e,"x","cosh")};return r.BV.runKernel(a.TR,t)}})},7405:(e,t,n)=>{"use strict";n.d(t,{z:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({cumsum_:function(e,t=0,n=!1,o=!1){const i={x:(0,s._1)(e,"x","cumsum")},u={axis:t,exclusive:n,reverse:o};return r.BV.runKernel(a.iH,i,u)}})},5746:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({denseBincount_:function(e,t,n,i=!1){const u=(0,s._1)(e,"x","denseBincount"),l=(0,s._1)(t,"weights","denseBincount");o.hu("int32"===u.dtype,(()=>"Error in denseBincount: input dtype must be int32, but got "+u.dtype)),o.hu(u.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${u.rank}.`)),o.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),o.hu(l.size===u.size||0===l.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${u.shape}, weights shape: `+l.shape+"."));const c={x:u,weights:l},d={size:n,binaryOutput:i};return r.BV.runKernel(a.QR,c,d)}})},9112:(e,t,n)=>{"use strict";n.d(t,{n:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({depthToSpace_:function(e,t,n="NHWC"){const i=(0,s._1)(e,"x","depthToSpace"),u="NHWC"===n?i.shape[1]:i.shape[2],l="NHWC"===n?i.shape[2]:i.shape[3],c="NHWC"===n?i.shape[3]:i.shape[1];o.hu(u*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${u} and ${t}  for depthToSpace with input shape\n    ${i.shape}`)),o.hu(l*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${l} and ${t} for depthToSpace with input shape\n        ${i.shape}`)),o.hu(c%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${c} for depthToSpace with input shape ${i.shape}`));const d={x:i},p={blockSize:t,dataFormat:n};return r.BV.runKernel(a.T0,d,p)}})},4718:(e,t,n)=>{"use strict";n.d(t,{B:()=>l});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2668),u=n(4968);const l=(0,i.op)({depthwiseConv2d_:function(e,t,n,i,l="NHWC",c=[1,1],d){const p=(0,s._1)(e,"x","depthwiseConv2d"),h=(0,s._1)(t,"filter","depthwiseConv2d");let f=p,m=!1;3===p.rank&&(m=!0,f=(0,u.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),o.hu(4===f.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`)),o.hu(4===h.rank,(()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+h.rank+".")),o.hu(f.shape[3]===h.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null!=d&&o.hu(o.GN(i),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${d} but got pad ${i}.`));const g={x:f,filter:h},y={strides:n,pad:i,dataFormat:l,dilations:c,dimRoundingMode:d},b=r.BV.runKernel(a.ci,g,y);return m?(0,u.X)(b,[b.shape[1],b.shape[2],b.shape[3]]):b}})},557:(e,t,n)=>{"use strict";n.d(t,{W:()=>l});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2668),u=n(4968);const l=(0,i.op)({dilation2d_:function(e,t,n,i,l=[1,1],c="NHWC"){const d=(0,s._1)(e,"x","dilation2d"),p=(0,s._1)(t,"filter","dilation2d");o.hu(3===d.rank||4===d.rank,(()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+d.rank+".")),o.hu(3===p.rank,(()=>"Error in dilation2d: filter must be rank 3, but got rank "+p.rank+".")),o.hu("NHWC"===c,(()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+c));let h=d,f=!1;3===d.rank&&(h=(0,u.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]]),f=!0);const m={x:h,filter:p},g={strides:n,pad:i,dilations:l},y=r.BV.runKernel(a.p4,m,g);return f?(0,u.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},1274:(e,t,n)=>{"use strict";n.d(t,{h:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(9165);const u=(0,n(2668).op)({div_:function(e,t){let n=(0,o._1)(e,"a","div"),u=(0,o._1)(t,"b","div");if([n,u]=(0,s.makeTypesMatch)(n,u),"int32"===n.dtype&&"int32"===u.dtype)return(0,i.q)(n,u);const l={a:n,b:u};return r.BV.runKernel(a.oH,l,{})}})},9322:(e,t,n)=>{"use strict";n.d(t,{N:()=>c});var r=n(747),a=n(3740),s=n(1274),o=n(6477),i=n(2668),u=n(5912),l=n(6577);const c=(0,i.op)({divNoNan_:function(e,t){let n=(0,a._1)(e,"a","div"),i=(0,a._1)(t,"b","div");[n,i]=(0,r.makeTypesMatch)(n,i);const c=(0,s.h)(n,i),d=(0,l.P)(c),p=(0,o.D)(i,d);return(0,u.a)(p,d,c)}})},4653:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({einsum_:function(e,...t){const n=t.map(((e,t)=>(0,s._1)(e,"tensors"+t,"einsum"))),o={equation:e};return r.BV.runKernel(a.$g,n,o)}})},3233:(e,t,n)=>{"use strict";n.d(t,{p:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({elu_:function(e){const t={x:(0,s._1)(e,"x","elu")};return r.BV.runKernel(a.SX,t)}})},6477:(e,t,n)=>{"use strict";n.d(t,{D:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({equal_:function(e,t){let n=(0,o._1)(e,"a","equal","string_or_numeric"),u=(0,o._1)(t,"b","equal","string_or_numeric");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.hd,l)}})},4650:(e,t,n)=>{"use strict";n.d(t,{q:()=>u});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2271);const u=(0,n(2668).op)({erf_:function(e){let t=(0,s._1)(e,"x","erf");o.hu("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=(0,i.p)(t,"float32"));const n={x:t};return r.BV.runKernel(a.Om,n)}})},4842:(e,t,n)=>{"use strict";n.d(t,{Q:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({exp_:function(e){const t={x:(0,s._1)(e,"x","exp")};return r.BV.runKernel(a.NE,t)}})},1300:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({expandDims_:function(e,t=0){const n=(0,s._1)(e,"x","expandDims","string_or_numeric");o.hu(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const i={input:n},u={dim:t};return r.BV.runKernel(a.YF,i,u)}})},3426:(e,t,n)=>{"use strict";n.d(t,{t:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({expm1_:function(e){const t={x:(0,s._1)(e,"x","expm1")};return r.BV.runKernel(a.Y0,t)}})},4006:(e,t,n)=>{"use strict";n.d(t,{h:()=>s});var r=n(7097),a=n(9121);function s(e,t,n){const s={shape:e,value:t,dtype:n};return r.BV.runKernel(a.de,{},s)}},6943:(e,t,n)=>{"use strict";n.d(t,{G:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({floor_:function(e){const t={x:(0,s._1)(e,"x","floor")};return r.BV.runKernel(a.OR,t)}})},9165:(e,t,n)=>{"use strict";n.d(t,{q:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({floorDiv_:function(e,t){let n=(0,o._1)(e,"a","floorDiv"),i=(0,o._1)(t,"b","floorDiv");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.je,u)}})},2277:(e,t,n)=>{"use strict";n.r(t),n.d(t,{conv2d:()=>b,depthwiseConv2d:()=>w,matMul:()=>N});var r=n(7097),a=n(633),s=n(9121),o=n(747),i=n(3740),u=n(569),l=n(6407),c=n(2200),d=n(4794),p=n(2668),h=n(4968);const f=(0,p.op)({conv2DBackpropFilter_:function(e,t,n,a,o,i="NHWC",l){let c=e;3===e.rank&&(c=(0,h.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let d=t;3===d.rank&&(d=(0,h.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),u.hu(4===c.rank,(()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+c.shape+".")),u.hu(4===d.rank,(()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+d.shape+".")),u.hu(4===n.length,(()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+"."));const p="NHWC"===i?c.shape[3]:c.shape[1],f="NHWC"===i?d.shape[3]:d.shape[1];u.hu(p===n[2],(()=>`Error in conv2dDerFilter: depth of input ${p}) must match input depth in filter (${n[2]}.`)),u.hu(f===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${f}) must match output depth for filter (${n[3]}).`)),null!=l&&u.hu(u.GN(o),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${l} but got pad ${o}.`));const m={x:c,dy:d},g={strides:a,pad:o,dataFormat:i,dimRoundingMode:l,filterShape:n};return r.BV.runKernel(s.wU,m,g)}});var m=n(9832),g=n(2582),y=n(9323);const b=(0,p.op)({fusedConv2d_:function({x:e,filter:t,strides:n,pad:p,dataFormat:b="NHWC",dilations:x=[1,1],dimRoundingMode:v,bias:k,activation:w="linear",preluActivationWeights:I,leakyreluAlpha:N}){if(w=w||"linear",!1===(0,y.uy)(r.BV.state.gradientDepth,w)){let r=(0,d.T)(e,t,n,p,b,x,v);return null!=k&&(r=(0,l.I)(r,k)),(0,y.QH)(r,w,I,N)}const T=(0,i._1)(e,"x","conv2d"),S=(0,i._1)(t,"filter","conv2d");let C=T,E=!1;3===T.rank&&(E=!0,C=(0,h.X)(T,[1,T.shape[0],T.shape[1],T.shape[2]])),u.hu(4===C.rank,(()=>"Error in fused conv2d: input must be rank 4, but got rank "+C.rank+".")),u.hu(4===S.rank,(()=>"Error in fused conv2d: filter must be rank 4, but got rank "+S.rank+".")),null!=v&&u.hu(u.GN(p),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${v} but got pad ${p}.`)),u.hu(C.shape[3]===S.shape[2],(()=>`Error in conv2d: depth of input (${C.shape[3]}) must match input depth for filter ${S.shape[2]}.`)),u.hu(g.jT(n,x),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${x}'`)),u.hu("NHWC"===b,(()=>`Error in conv2d: got dataFormat of ${b} but only NHWC is currently supported.`));const _=g.Ix(C.shape,S.shape,n,x,p,v);let $,A;null!=k&&($=(0,i._1)(k,"bias","fused conv2d"),[$]=(0,o.makeTypesMatch)($,T),c.$N(_.outShape,$.shape)),null!=I&&(A=(0,i._1)(I,"prelu weights","fused conv2d"));const R=(e,t)=>{const[r,a,s,o]=t,i=(0,y.Fr)(e,s,w);u.hu(g.I0(x),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${x}'`));const l=[(0,m._)(a.shape,i,r,n,p),f(a,i,r.shape,n,p)];if(null!=o){const e=(0,y.pf)(o,i);l.push(e)}return l},F={x:C,filter:S,bias:$,preluActivationWeights:A},O={strides:n,pad:p,dataFormat:b,dilations:x,dimRoundingMode:v,activation:w,leakyreluAlpha:N};return null==k?(0,a.cb)(((e,t,n)=>{let a=r.BV.runKernel(s._V,F,O);return n([t,e,a]),E&&(a=(0,h.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:R}}))(C,S):(0,a.cb)(((e,t,n,a)=>{let o=r.BV.runKernel(s._V,F,O);return a([t,e,o,n]),E&&(o=(0,h.X)(o,[o.shape[1],o.shape[2],o.shape[3]])),{value:o,gradFunc:R}}))(C,S,$)}});var x=n(4718);const v=(0,p.op)({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,a,o,i=[1,1],u){let l=e;3===e.rank&&(l=(0,h.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let c=t;3===c.rank&&(c=(0,h.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const d={x:l,dy:c},p={strides:a,pad:o,dimRoundingMode:u,dilations:i,filterShape:n};return r.BV.runKernel(s.sL,d,p)}}),k=(0,p.op)({depthwiseConv2dNativeBackpropInput_:function(e,t,n,a,o,i=[1,1],u){let l=t,c=!1;3===t.rank&&(c=!0,l=(0,h.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const d={dy:l,filter:n},p={strides:a,pad:o,dimRoundingMode:u,dilations:i,inputShape:e},f=r.BV.runKernel(s.y7,d,p);return c?(0,h.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),w=(0,p.op)({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:d,dataFormat:p="NHWC",dilations:f=[1,1],dimRoundingMode:m,bias:b,activation:w="linear",preluActivationWeights:I,leakyreluAlpha:N}){if(!1===(0,y.uy)(r.BV.state.gradientDepth,w)){let r=(0,x.B)(e,t,n,d,p,f,m);return null!=b&&(r=(0,l.I)(r,b)),(0,y.QH)(r,w,I,N)}const T=(0,i._1)(e,"x","depthwiseConv2d"),S=(0,i._1)(t,"filter","depthwiseConv2d");let C=T,E=!1;3===T.rank&&(E=!0,C=(0,h.X)(T,[1,T.shape[0],T.shape[1],T.shape[2]])),u.hu(4===C.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${C.rank}.`)),u.hu(4===S.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${S.rank}.`)),u.hu(C.shape[3]===S.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${C.shape[3]}) must match the inChannels dimension in filter ${S.shape[2]}.`)),null==f&&(f=[1,1]),u.hu(g.jT(n,f),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${f}'`)),null!=m&&u.hu(u.GN(d),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${m} but got pad ${d}.`));const _=g.Ix(C.shape,S.shape,n,f,d,m,!0);let $,A;null!=b&&($=(0,i._1)(b,"bias","fused conv2d"),[$]=(0,o.makeTypesMatch)($,T),c.$N(_.outShape,$.shape)),null!=I&&(A=(0,i._1)(I,"prelu weights","fused depthwiseConv2d"));const R=(e,t)=>{u.hu(g.I0(f),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${f}'`));const[r,a,s,o]=t,i=(0,y.Fr)(e,s,w),l=k(a.shape,i,r,n,d,f,m),c=v(a,i,r.shape,n,d,f,m);return null!=o?[l,c,(0,y.pf)($,i)]:[l,c]},F={x:C,filter:S,bias:$,preluActivationWeights:A},O={strides:n,pad:d,dataFormat:p,dilations:f,dimRoundingMode:m,activation:w,leakyreluAlpha:N};return null==b?(0,a.cb)(((e,t,n)=>{let a=r.BV.runKernel(s.lu,F,O);return n([t,e,a]),E&&(a=(0,h.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:R}}))(C,S):(0,a.cb)(((e,t,n,a)=>{let o=r.BV.runKernel(s.lu,F,O);return a([t,e,o,n]),E&&(o=(0,h.X)(o,[o.shape[1],o.shape[2],o.shape[3]])),{value:o,gradFunc:R}}))(C,S,$)}});var I=n(8687);const N=(0,p.op)({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:d=!1,bias:p,activation:f="linear",preluActivationWeights:m,leakyreluAlpha:g}){if(!1===(0,y.uy)(r.BV.state.gradientDepth,f)){let r=(0,I.O)(e,t,n,d);return null!=p&&(r=(0,l.I)(r,p)),(0,y.QH)(r,f,m,g)}let b=(0,i._1)(e,"a","fused matMul"),x=(0,i._1)(t,"b","fused matMul");[b,x]=(0,o.makeTypesMatch)(b,x);const v=n?b.shape[b.rank-2]:b.shape[b.rank-1],k=d?x.shape[x.rank-1]:x.shape[x.rank-2],w=n?b.shape[b.rank-1]:b.shape[b.rank-2],N=d?x.shape[x.rank-2]:x.shape[x.rank-1],T=b.shape.slice(0,-2),S=x.shape.slice(0,-2),C=u.NA(T),E=u.NA(S);u.hu(b.rank>=2&&x.rank>=2&&b.rank===x.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${b.rank} and ${x.rank}.`)),u.hu(u.cO(T,S),(()=>`Error in fused matMul: outer dimensions (${T}) and (${S}) of Tensors with shapes ${b.shape} and `+x.shape+" must match.")),u.hu(v===k,(()=>`Error in fused matMul: inner shapes (${v}) and (${k}) of Tensors with shapes ${b.shape} and ${x.shape} and transposeA=${n} and transposeB=${d} must match.`));const _=b.shape.slice(0,-2).concat([w,N]),$=n?(0,h.X)(b,[C,v,w]):(0,h.X)(b,[C,w,v]),A=d?(0,h.X)(x,[E,N,k]):(0,h.X)(x,[E,k,N]);let R,F;null!=p&&(R=(0,i._1)(p,"bias","fused matMul"),[R]=(0,o.makeTypesMatch)(R,b),c.$N(_,R.shape)),null!=m&&(F=(0,i._1)(m,"prelu weights","fused matMul"));const O=(e,t)=>{const[r,a,s,o]=t,i=(0,y.Fr)((0,h.X)(e,s.shape),s,f);let u,l;return n||d?!n&&d?(u=(0,I.O)(i,a,!1,!1),l=(0,I.O)(i,r,!0,!1)):n&&!d?(u=(0,I.O)(a,i,!1,!0),l=(0,I.O)(r,i,!1,!1)):(u=(0,I.O)(a,i,!0,!0),l=(0,I.O)(i,r,!0,!0)):(u=(0,I.O)(i,a,!1,!0),l=(0,I.O)(r,i,!0,!1)),null!=p?[u,l,(0,y.pf)(o,i)]:[u,l]},D={a:$,b:A,bias:R,preluActivationWeights:F},M={transposeA:n,transposeB:d,activation:f,leakyreluAlpha:g};return null==p?(0,a.cb)(((e,t,n)=>{const a=r.BV.runKernel(s.us,D,M);return n([e,t,a]),{value:(0,h.X)(a,_),gradFunc:O}}))($,A):(0,a.cb)(((e,t,n,a)=>{const o=r.BV.runKernel(s.us,D,M);return a([e,t,o,n]),{value:(0,h.X)(o,_),gradFunc:O}}))($,A,R)}})},9323:(e,t,n)=>{"use strict";n.d(t,{Fr:()=>f,pf:()=>m,QH:()=>g,uy:()=>y});var r=n(2200),a=n(3233),s=n(9133),o=n(4841),i=n(8151),u=n(7409),l=n(3582),c=n(4968),d=n(625),p=n(1901),h=n(5475);function f(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return(0,o.d)(e,(0,p.N)(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function m(e,t){let n=t;const a=r.RR(e.shape,t.shape);return a.length>0&&(n=(0,h.S)(n,a)),(0,c.X)(n,e.shape)}function g(e,t,n,r){if("linear"===t)return e;if("relu"===t)return(0,u.U)(e);if("elu"===t)return(0,a.p)(e);if("relu6"===t)return(0,l.b)(e);if("prelu"===t)return(0,i.A)(e,n);if("leakyrelu"===t)return(0,s.h)(e,r);if("sigmoid"===t)return(0,d.X)(e);throw new Error(`Unknown fused activation ${t}.`)}const y=(e,t)=>!(e>0)||"linear"===t},4926:(e,t,n)=>{"use strict";n.d(t,{I:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({gather_:function(e,t,n=0,o=0){const i={x:(0,s._1)(e,"x","gather"),indices:(0,s._1)(t,"indices","gather","int32")},u={axis:n,batchDims:o};return r.BV.runKernel(a.qi,i,u)}})},7494:(e,t,n)=>{"use strict";n.d(t,{d:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({gatherND_:function(e,t){const n=(0,s._1)(t,"indices","gatherND","int32"),o={params:(0,s._1)(e,"x","gatherND","string_or_numeric"),indices:n};return r.BV.runKernel(a.q1,o)}})},636:(e,t,n)=>{"use strict";n.d(t,{p:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({greater_:function(e,t){let n=(0,o._1)(e,"a","greater","string_or_numeric"),u=(0,o._1)(t,"b","greater","string_or_numeric");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.iZ,l)}})},7630:(e,t,n)=>{"use strict";n.d(t,{b:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({greaterEqual_:function(e,t){let n=(0,o._1)(e,"a","greaterEqual","string_or_numeric"),u=(0,o._1)(t,"b","greaterEqual","string_or_numeric");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.Ac,l)}})},4386:(e,t,n)=>{"use strict";n.d(t,{a:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({imag_:function(e){const t={input:(0,s._1)(e,"input","imag")};return r.BV.runKernel(a.J_,t)}})},6230:(e,t,n)=>{"use strict";n.d(t,{i:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({isNaN_:function(e){const t={x:(0,s._1)(e,"x","isNaN")};return r.BV.runKernel(a.r7,t)}})},9133:(e,t,n)=>{"use strict";n.d(t,{h:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({leakyRelu_:function(e,t=.2){const n={x:(0,s._1)(e,"x","leakyRelu")},o={alpha:t};return r.BV.runKernel(a.J$,n,o)}})},6573:(e,t,n)=>{"use strict";n.d(t,{d:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({less_:function(e,t){let n=(0,o._1)(e,"a","less","string_or_numeric"),u=(0,o._1)(t,"b","less","string_or_numeric");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.vt,l)}})},624:(e,t,n)=>{"use strict";n.d(t,{z:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({lessEqual_:function(e,t){let n=(0,o._1)(e,"a","lessEqual","string_or_numeric"),u=(0,o._1)(t,"b","lessEqual","string_or_numeric");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.CA,l)}})},4135:(e,t,n)=>{"use strict";n.d(t,{S:()=>s});var r=n(7097),a=n(9121);function s(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return r.BV.runKernel(a.e7,{},s)}},9648:(e,t,n)=>{"use strict";n.d(t,{G:()=>l});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2668),u=n(4968);const l=(0,i.op)({localResponseNormalization_:function(e,t=5,n=1,i=1,l=.5){const c=(0,s._1)(e,"x","localResponseNormalization");o.hu(4===c.rank||3===c.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${c.rank}.`)),o.hu(o.GN(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let d=c,p=!1;3===c.rank&&(p=!0,d=(0,u.X)(c,[1,c.shape[0],c.shape[1],c.shape[2]]));const h={x:d},f={depthRadius:t,bias:n,alpha:i,beta:l},m=r.BV.runKernel(a.eZ,h,f);return p?(0,u.X)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}})},2597:(e,t,n)=>{"use strict";n.d(t,{c:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({log_:function(e){const t={x:(0,s._1)(e,"x","log")};return r.BV.runKernel(a.Zb,t)}})},7474:(e,t,n)=>{"use strict";n.d(t,{K:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({log1p_:function(e){const t={x:(0,s._1)(e,"x","log1p")};return r.BV.runKernel(a.kU,t)}})},1510:(e,t,n)=>{"use strict";n.d(t,{C:()=>h});var r=n(633),a=n(3740),s=n(2271),o=n(4842),i=n(2597),u=n(3307),l=n(4841),c=n(2668),d=n(827),p=n(5475);const h=(0,c.op)({logSoftmax_:function(e,t=-1){const n=(0,a._1)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return(0,r.cb)(((e,n)=>{const r=(0,u.F)(e,t,!0),a=(0,d.l)(e,r),c=(0,d.l)((0,s.p)(a,"float32"),(0,i.c)((0,p.S)((0,o.Q)(a),t,!0)));return n([c]),{value:c,gradFunc:(e,n)=>{const[r]=n,a=(0,o.Q)(r);return(0,d.l)(e,(0,l.d)((0,p.S)(e,t,!0),a))}}}))(n)}})},2856:(e,t,n)=>{"use strict";n.d(t,{H:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(2200);const i=(0,n(2668).op)({logicalAnd_:function(e,t){const n=(0,s._1)(e,"a","logicalAnd","bool"),i=(0,s._1)(t,"b","logicalAnd","bool");(0,o.$N)(n.shape,i.shape);const u={a:n,b:i};return r.BV.runKernel(a.PY,u)}})},8651:(e,t,n)=>{"use strict";n.d(t,{h:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({logicalNot_:function(e){const t={x:(0,s._1)(e,"x","logicalNot","bool")};return r.BV.runKernel(a.Vf,t)}})},5750:(e,t,n)=>{"use strict";n.d(t,{K:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(2200);const i=(0,n(2668).op)({logicalOr_:function(e,t){const n=(0,s._1)(e,"a","logicalOr","bool"),i=(0,s._1)(t,"b","logicalOr","bool");(0,o.$N)(n.shape,i.shape);const u={a:n,b:i};return r.BV.runKernel(a.MZ,u)}})},9876:(e,t,n)=>{"use strict";var r;n.d(t,{I:()=>r}),function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(r||(r={}))},8687:(e,t,n)=>{"use strict";n.d(t,{O:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({matMul_:function(e,t,n=!1,i=!1){let u=(0,o._1)(e,"a","matMul"),l=(0,o._1)(t,"b","matMul");[u,l]=(0,s.makeTypesMatch)(u,l);const c={a:u,b:l},d={transposeA:n,transposeB:i};return r.BV.runKernel(a.XL,c,d)}})},3307:(e,t,n)=>{"use strict";n.d(t,{F:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({max_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","max")},i={reductionIndices:t,keepDims:n};return r.BV.runKernel(a.Yo,o,i)}})},1174:(e,t,n)=>{"use strict";n.d(t,{_:()=>c});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2582),u=n(2668),l=n(4968);const c=(0,u.op)({maxPool_:function(e,t,n,u,c){const d=(0,s._1)(e,"x","maxPool");let p=d,h=!1;3===d.rank&&(h=!0,p=(0,l.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),o.hu(4===p.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${p.rank}.`)),o.hu(i.jT(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=c&&o.hu(o.GN(u),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${c} but got pad ${u}.`));const f={x:p},m={filterSize:t,strides:n,pad:u,dimRoundingMode:c},g=r.BV.runKernel(a.mT,f,m);return h?(0,l.X)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}})},5020:(e,t,n)=>{"use strict";n.d(t,{Y:()=>l});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2668),u=n(4968);const l=(0,i.op)({maxPool3d_:function(e,t=[1,1,1],n,i,l,c="NDHWC"){const d=(0,s._1)(e,"x","maxPool3d");let p=d,h=!1;4===d.rank&&(h=!0,p=(0,u.X)(d,[1,d.shape[0],d.shape[1],d.shape[2],d.shape[3]])),o.hu(5===p.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${p.rank}.`)),o.hu("NDHWC"===c,(()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+c)),null!=l&&o.hu(o.GN(i),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${l} but got pad ${i}.`));const f={x:p},m={filterSize:t,strides:n,pad:i,dimRoundingMode:l,dataFormat:c},g=r.BV.runKernel(a.OA,f,m);return h?(0,u.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}})},6877:(e,t,n)=>{"use strict";n.d(t,{I:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({maxPoolWithArgmax_:function(e,t,n,o,i=!1){const u={x:(0,s._1)(e,"x","maxPoolWithArgmax")},l={filterSize:t,strides:n,pad:o,includeBatchInIndex:i},c=r.BV.runKernel(a.vF,u,l);return{result:c[0],indexes:c[1]}}})},632:(e,t,n)=>{"use strict";n.d(t,{g:()=>l});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200),u=n(2271);const l=(0,n(2668).op)({maximum_:function(e,t){let n=(0,o._1)(e,"a","maximum"),l=(0,o._1)(t,"b","maximum");[n,l]=(0,s.makeTypesMatch)(n,l),"bool"===n.dtype&&(n=(0,u.p)(n,"int32"),l=(0,u.p)(l,"int32")),(0,i.$N)(n.shape,l.shape);const c={a:n,b:l};return r.BV.runKernel(a.BM,c)}})},5130:(e,t,n)=>{"use strict";n.d(t,{J:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({mean_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","mean")},i={axis:t,keepDims:n};return r.BV.runKernel(a.q2,o,i)}})},5735:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({min_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","min")},i={axis:t,keepDims:n};return r.BV.runKernel(a.c1,o,i)}})},4513:(e,t,n)=>{"use strict";n.d(t,{L:()=>l});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200),u=n(2271);const l=(0,n(2668).op)({minimum_:function(e,t){let n=(0,o._1)(e,"a","minimum"),l=(0,o._1)(t,"b","minimum");[n,l]=(0,s.makeTypesMatch)(n,l),"bool"===n.dtype&&(n=(0,u.p)(n,"int32"),l=(0,u.p)(l,"int32")),(0,i.$N)(n.shape,l.shape);const c={a:n,b:l};return r.BV.runKernel(a.q8,c)}})},1483:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({mirrorPad_:function(e,t,n){o.hu("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const i=(0,s._1)(e,"x","mirrorPad");if(0===i.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");o.hu(t.length===i.rank,(()=>`Padding doesn't match input. Must be ${i.rank}. Got ${t.length}.`));const u="reflect"===n?1:0;for(let e=0;e<i.rank;e++)o.hu(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),o.hu(t[e][0]>=0&&t[e][0]<=i.shape[e]-u&&t[e][1]>=0&&t[e][1]<=i.shape[e]-u,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${i.shape[e]-u} or less than 0 for input of shape `+i.shape));const l={paddings:t,mode:n},c={x:i};return r.BV.runKernel(a.jQ,c,l)}})},5228:(e,t,n)=>{"use strict";n.d(t,{w:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({mod_:function(e,t){let n=(0,o._1)(e,"a","mod"),i=(0,o._1)(t,"b","mod");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.Vb,u)}})},4841:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({mul_:function(e,t){let n=(0,o._1)(e,"a","mul"),i=(0,o._1)(t,"b","mul");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.wY,u)}})},686:(e,t,n)=>{"use strict";n.d(t,{S:()=>u});var r=n(7097),a=n(9121),s=n(3740),o=n(2668),i=n(4968);const u=(0,o.op)({multinomial_:function(e,t,n,o=!1){const u=(0,s._1)(e,"logits","multinomial"),l=u.size,c=u.rank;if(l<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+l+".");if(c>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+c);n=n||Math.random();const d={logits:1===c?(0,i.X)(u,[1,-1]):u},p={numSamples:t,seed:n,normalized:o},h=r.BV.runKernel(a.NZ,d,p);return 1===c?(0,i.X)(h,[h.size]):h}})},7370:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({neg_:function(e){const t={x:(0,s._1)(e,"x","neg")};return r.BV.runKernel(a.ku,t)}})},6500:(e,t,n)=>{"use strict";n.d(t,{Q:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({notEqual_:function(e,t){let n=(0,o._1)(e,"a","notEqual","string_or_numeric"),u=(0,o._1)(t,"b","notEqual","string_or_numeric");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.yQ,l)}})},6708:(e,t,n)=>{"use strict";n.d(t,{l:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({oneHot_:function(e,t,n=1,o=0){if(t<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+t);const i={indices:(0,s._1)(e,"indices","oneHot","int32")},u={depth:t,onValue:n,offValue:o};return r.BV.runKernel(a.we,i,u)}})},4917:(e,t,n)=>{"use strict";n.d(t,{i:()=>i});var r=n(7097),a=n(569),s=n(1661),o=n(9640);function i(e,t="float32"){if("complex64"===t){const t=i(e,"float32"),n=(0,o.l)(e,"float32");return(0,s.P)(t,n)}const n=(0,a.p8)((0,a.NA)(e),t);return r.BV.makeTensor(n,e,t)}},7846:(e,t,n)=>{"use strict";n.d(t,{J:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({onesLike_:function(e){const t={x:(0,s._1)(e,"x","onesLike")};return r.BV.runKernel(a.qW,t)}})},2668:(e,t,n)=>{"use strict";n.d(t,{z:()=>s,op:()=>o});var r=n(7097),a=n(569);const s="__op";function o(e){const t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+t.length+" keys.");let n=t[0];const o=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=s;const i=(...e)=>{r.BV.startScope(n);try{const t=o(...e);return(0,a.tI)(t)&&console.error("Cannot return a Promise inside of tidy."),r.BV.endScope(t),t}catch(e){throw r.BV.endScope(null),e}};return Object.defineProperty(i,"name",{value:n,configurable:!0}),i}},6321:(e,t,n)=>{"use strict";n.d(t,{zvA:()=>I.z,WnP:()=>r.W,Khb:()=>a.K,__u:()=>s._,IHx:()=>o.I,QBD:()=>i.Q,$6P:()=>u.$,YjB:()=>l.Y,NqF:()=>c.N,vHJ:()=>d.v,ZRM:()=>p.Z,VfV:()=>h.V,z4N:()=>f.z,fvJ:()=>m.f,C80:()=>g.C,wS1:()=>y.w,uR5:()=>b.u,zEQ:()=>C,tgs:()=>_.t,Dxk:()=>A,JY5:()=>R,p3b:()=>F,E4h:()=>E.E,yE8:()=>O.y,anm:()=>Bn,UFq:()=>D.U,f3b:()=>M.f,pju:()=>B.p,mDi:()=>P.m,iUl:()=>L.i,d9v:()=>V.d,PYB:()=>z.P,zoF:()=>v.z,gME:()=>W,Izb:()=>U,MNy:()=>G,ZaL:()=>H,PAt:()=>X.P,Tek:()=>q.T,bc:()=>j.b,pdZ:()=>K.p,$QV:()=>ee,mCk:()=>te.m,f9Y:()=>ne.f,mew:()=>jn,zbp:()=>re.z,ppE:()=>ae.p,nTT:()=>se.n,B10:()=>oe.B,Ka3:()=>ie,WmZ:()=>ue.W,hiC:()=>le.h,NTj:()=>ce.N,AKD:()=>de,rvX:()=>Xn,WYO:()=>pe.W,pyx:()=>he.p,GRh:()=>qn,DgJ:()=>fe.D,qNN:()=>me.q,Qqt:()=>ge.Q,dt4:()=>ye.d,t$B:()=>be.t,iyy:()=>ve,kp_:()=>on.k,hlL:()=>ke.h,GWj:()=>we.G,qPi:()=>Ie.q,imm:()=>Yn,Iqj:()=>Ne.I,dbB:()=>Hn.d,pjt:()=>Te.p,brS:()=>Se.b,Sxn:()=>un.S,asL:()=>Ce.a,BHj:()=>Br,V3u:()=>Kn,wx0:()=>ln.w,xVT:()=>Ee,UWc:()=>_e,i2d:()=>$e.i,hi7:()=>Ae.h,d9m:()=>Re.d,zN1:()=>Fe.z,$r2:()=>Pr,SX3:()=>Oe.S,G9k:()=>De.G,cM7:()=>Me.c,Krr:()=>Be.K,e_t:()=>ze,CmS:()=>We.C,l_t:()=>qe,HvI:()=>je.H,hJK:()=>Ke.h,K5V:()=>Ye.K,egP:()=>Ze,MB5:()=>Lr,OI3:()=>k.O,Fp7:()=>Ge.F,_sB:()=>Je._,YQQ:()=>et.Y,Ip$:()=>tt.I,gWQ:()=>nt.g,J69:()=>rt.J,ry_:()=>ot,VV$:()=>it.V,LTh:()=>ut.L,VdP:()=>lt.V,wQq:()=>ct.w,Gi7:()=>pt,p_:()=>Wn,dC7:()=>w.d,rq4:()=>ht,SJ_:()=>ft.S,W76:()=>Le.W,KOy:()=>Vn,Quu:()=>mt.Q,lfX:()=>gt.l,iUs:()=>at.i,JpU:()=>yt.J,op:()=>I.op,N2O:()=>bt,vku:()=>xt.v,pNR:()=>vt,koy:()=>kt,t1L:()=>wt,lGY:()=>It,d_R:()=>St,sQ3:()=>Ct.s,AL3:()=>Et.A,S0v:()=>_t.S,WVs:()=>$t.W,TN_:()=>At,wzB:()=>Ft,nGf:()=>Ot,LGj:()=>Dt.L,w6H:()=>Mt.w,kwC:()=>Bt.k,M25:()=>Pt.M,UYe:()=>Lt.U,btT:()=>Vt.b,XLQ:()=>Z.X,GYS:()=>zt.G,SDf:()=>Wt,diP:()=>Ut,sx7:()=>Gt,mG2:()=>Ht,QEs:()=>cn.Q,NMM:()=>Xt.N,bp0:()=>qt.b,iD$:()=>jt.i,snQ:()=>Un.s,U8D:()=>Kt.U,U_I:()=>Yt,ODp:()=>Qt.O,XD2:()=>N.X,Xxe:()=>Zt.X,tdS:()=>Mr,O$l:()=>Jt.O,R_K:()=>en.R,tPi:()=>T.t,jZU:()=>tn,SmN:()=>nn,CnO:()=>rn,p0P:()=>an,XAC:()=>sn.X,Wvh:()=>Ve.W,fBT:()=>Tt.f,rVs:()=>Vr,ers:()=>Gn.e,uN7:()=>Dr,Vl2:()=>dn.V,_b3:()=>pn._,h62:()=>dt.h,$i:()=>hn.$,L9e:()=>fn.L,knu:()=>mn.k,Nbs:()=>gn.N,NXj:()=>yn.N,Z_8:()=>zr,luU:()=>He.l,Smz:()=>Xe.S,ORZ:()=>bn.O,AEp:()=>S.A,XeE:()=>xn.X,RRF:()=>vn.R,odF:()=>wn,wOQ:()=>In.w,yXz:()=>Nn,Bfx:()=>Tn,xZs:()=>Sn,Gg6:()=>xe.G,hg7:()=>Cn.h,p4s:()=>Pn.p,Xu6:()=>En.X,Two:()=>_n.T,pUJ:()=>$n,HHK:()=>An.H,VD$:()=>Rn,arb:()=>Fn.a,itS:()=>On.i,lls:()=>Dn.l,P84:()=>Mn.P});var r=n(6235),a=n(7839),s=n(1470),o=n(6407),i=n(3135),u=n(781),l=n(2998),c=n(47),d=n(7394),p=n(2421),h=n(1891),f=n(7037),m=n(9812),g=n(369),y=n(5176),b=n(1749),x=n(3740),v=n(6884),k=n(8687),w=n(4841),I=n(2668),N=n(625),T=n(2676),S=n(1869);const C=(0,I.op)({basicLSTMCell_:function(e,t,n,r,a,s){const i=(0,x._1)(e,"forgetBias","basicLSTMCell"),u=(0,x._1)(t,"lstmKernel","basicLSTMCell"),l=(0,x._1)(n,"lstmBias","basicLSTMCell"),c=(0,x._1)(r,"data","basicLSTMCell"),d=(0,x._1)(a,"c","basicLSTMCell"),p=(0,x._1)(s,"h","basicLSTMCell"),h=(0,v.z)([c,p],1),f=(0,k.O)(h,u),m=(0,o.I)(f,l),g=m.shape[0],y=m.shape[1]/4,b=[g,y],I=(0,T.t)(m,[0,0],b),C=(0,T.t)(m,[0,y],b),E=(0,T.t)(m,[0,2*y],b),_=(0,T.t)(m,[0,3*y],b),$=(0,o.I)((0,w.d)((0,N.X)(I),(0,S.A)(C)),(0,w.d)(d,(0,N.X)((0,o.I)(i,E))));return[$,(0,w.d)((0,S.A)($),(0,N.X)(_))]}});var E=n(8441),_=n(7505),$=n(569);const A=(0,I.op)({batchNorm2d_:function(e,t,n,r,a,s){const o=(0,x._1)(e,"x","batchNorm"),i=(0,x._1)(t,"mean","batchNorm"),u=(0,x._1)(n,"variance","batchNorm");let l,c;return null!=a&&(l=(0,x._1)(a,"scale","batchNorm")),null!=r&&(c=(0,x._1)(r,"offset","batchNorm")),$.hu(2===o.rank,(()=>"Error in batchNorm2D: x must be rank 2 but got rank "+o.rank+".")),$.hu(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),$.hu(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&$.hu(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&$.hu(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),(0,_.t)(o,i,u,c,l,s)}}),R=(0,I.op)({batchNorm3d_:function(e,t,n,r,a,s){const o=(0,x._1)(e,"x","batchNorm"),i=(0,x._1)(t,"mean","batchNorm"),u=(0,x._1)(n,"variance","batchNorm");let l,c;return null!=a&&(l=(0,x._1)(a,"scale","batchNorm")),null!=r&&(c=(0,x._1)(r,"offset","batchNorm")),$.hu(3===o.rank,(()=>"Error in batchNorm3D: x must be rank 3 but got rank "+o.rank+".")),$.hu(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),$.hu(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&$.hu(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&$.hu(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),(0,_.t)(o,i,u,c,l,s)}}),F=(0,I.op)({batchNorm4d_:function(e,t,n,r,a,s){const o=(0,x._1)(e,"x","batchNorm"),i=(0,x._1)(t,"mean","batchNorm"),u=(0,x._1)(n,"variance","batchNorm");let l,c;return null!=a&&(l=(0,x._1)(a,"scale","batchNorm")),null!=r&&(c=(0,x._1)(r,"offset","batchNorm")),$.hu(4===o.rank,(()=>"Error in batchNorm4D: x must be rank 4 but got rank "+o.rank+".")),$.hu(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),$.hu(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&$.hu(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&$.hu(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),(0,_.t)(o,i,u,c,l,s)}});var O=n(3865),D=n(8247),M=n(2657),B=n(2271),P=n(6825),L=n(2279),V=n(8723),z=n(1661);const W=(0,I.op)({concat1d_:function(e){return(0,v.z)(e,0)}}),U=(0,I.op)({concat2d_:function(e,t){return(0,v.z)(e,t)}}),G=(0,I.op)({concat3d_:function(e,t){return(0,v.z)(e,t)}}),H=(0,I.op)({concat4d_:function(e,t){return(0,v.z)(e,t)}});var X=n(1355),q=n(4794),j=n(1405),K=n(473),Y=n(7097),Q=n(9121),Z=n(4968);const J=(0,I.op)({conv3DBackpropInput_:function(e,t,n,r,a){$.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let s=e,o=t,i=!1;4===t.rank&&(i=!0,o=(0,Z.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,e[0],e[1],e[2],e[3]]);const u=s[4],l=o.shape[4];$.hu(5===s.length,(()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+s.length+".")),$.hu(5===o.rank,(()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+o.rank)),$.hu(5===n.rank,(()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank)),$.hu(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),$.hu(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},d={pad:a,strides:r,inputShape:s},p=Y.BV.runKernel(Q.ik,c,d);return i?(0,Z.X)(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),ee=(0,I.op)({conv3dTranspose_:function(e,t,n,r,a){const s=(0,x._1)(e,"x","conv3dTranspose"),o=(0,x._1)(t,"filter","conv3dTranspose");return J(n,s,o,r,a)}});var te=n(173),ne=n(2699),re=n(7405),ae=n(5746),se=n(9112),oe=n(4718);const ie=(0,I.op)({diag_:function(e){const t={x:(0,x._1)(e,"x","diag")};return Y.BV.runKernel(Q.$w,t)}});var ue=n(557),le=n(1274),ce=n(9322);const de=(0,I.op)({dot_:function(e,t){const n=(0,x._1)(e,"t1","dot"),r=(0,x._1)(t,"t2","dot");$.hu(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const a=1===n.rank?n.size:n.shape[1],s=1===r.rank?r.size:r.shape[0];if($.hu(a===s,(()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${s}.`)),1===n.rank&&1===r.rank){const e=(0,Z.X)(n,[1,-1]),t=(0,Z.X)(r,[-1,1]),a=(0,k.O)(e,t);return(0,Z.X)(a,[])}if(1===n.rank&&2===r.rank){const e=(0,Z.X)(n,[1,-1]),t=(0,Z.X)(r,[r.shape[0],r.shape[1]]),a=(0,k.O)(e,t);return(0,Z.X)(a,[a.size])}if(2===n.rank&&1===r.rank){const e=(0,Z.X)(r,[-1,1]),t=(0,k.O)(n,e);return(0,Z.X)(t,[t.size])}{const e=(0,Z.X)(r,[r.shape[0],r.shape[1]]);return(0,k.O)(n,e)}}});var pe=n(4653),he=n(3233),fe=n(6477),me=n(4650),ge=n(4842),ye=n(1300),be=n(3426),xe=n(7501);const ve=(0,I.op)({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const a=(0,M.f)([e,t],r),s=e<=t?e:t;for(let e=0;e<s;++e)a.set(1,e,e);const o=(0,Z.X)(a.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return(0,xe.G)((0,ye.d)(o,0),[n[0],1,1]);if(2===n.length)return(0,xe.G)((0,ye.d)((0,ye.d)(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return(0,xe.G)((0,ye.d)((0,ye.d)((0,ye.d)(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var ke=n(4006),we=n(6943),Ie=n(9165),Ne=n(4926),Te=n(636),Se=n(7630),Ce=n(4386);const Ee=(0,I.op)({isFinite_:function(e){const t={x:(0,x._1)(e,"x","isFinite")};return Y.BV.runKernel(Q.av,t)}}),_e=(0,I.op)({isInf_:function(e){const t={x:(0,x._1)(e,"x","isInf")};return Y.BV.runKernel(Q.iW,t)}});var $e=n(6230),Ae=n(9133),Re=n(6573),Fe=n(624),Oe=n(4135),De=n(9648),Me=n(2597),Be=n(7474),Pe=n(633),Le=n(7370),Ve=n(3694);const ze=(0,I.op)({logSigmoid_:function(e){const t=(0,x._1)(e,"x","logSigmoid");return(0,Pe.cb)((e=>({value:(0,Le.W)((0,Ve.W)((0,Le.W)(e))),gradFunc:t=>(0,w.d)(t,(0,N.X)((0,Le.W)(e)))})))(t)}});var We=n(1510),Ue=n(3591),Ge=n(3307),He=n(827),Xe=n(5475);const qe=(0,I.op)({logSumExp_:function(e,t=null,n=!1){const r=(0,x._1)(e,"x","logSumExp"),a=(0,$.EC)(t,r.shape),s=(0,Ge.F)(r,a,!0),i=(0,He.l)(r,s),u=(0,ge.Q)(i),l=(0,Xe.S)(u,a),c=(0,Me.c)(l),d=(0,o.I)((0,Z.X)(s,c.shape),c);if(n){const e=(0,Ue.rv)(d.shape,a);return(0,Z.X)(d,e)}return d}});var je=n(2856),Ke=n(8651),Ye=n(5750),Qe=n(2200);const Ze=(0,I.op)({logicalXor_:function(e,t){const n=(0,x._1)(e,"a","logicalXor","bool"),r=(0,x._1)(t,"b","logicalXor","bool");return(0,Qe.$N)(n.shape,r.shape),(0,je.H)((0,Ye.K)(e,t),(0,Ke.h)((0,je.H)(e,t)))}});var Je=n(1174),et=n(5020),tt=n(6877),nt=n(632),rt=n(5130),at=n(4917),st=n(4077);function ot(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(n+" is not a valid third argument to meshgrid");if(void 0===e)return[];let r=(0,x._1)(e,"x","meshgrid",e instanceof st.es?e.dtype:"float32");if(void 0===t)return[r];let a=(0,x._1)(t,"y","meshgrid",t instanceof st.es?t.dtype:"float32");const s=(0,$.NA)(r.shape),o=(0,$.NA)(a.shape);return"xy"===n?(r=(0,Z.X)(r,[1,-1]),a=(0,Z.X)(a,[-1,1]),[(0,k.O)((0,at.i)([o,1],r.dtype),r),(0,k.O)(a,(0,at.i)([1,s],a.dtype))]):(r=(0,Z.X)(r,[-1,1]),a=(0,Z.X)(a,[1,-1]),[(0,k.O)(r,(0,at.i)([1,o],r.dtype)),(0,k.O)((0,at.i)([s,1],a.dtype),a)])}var it=n(5735),ut=n(4513),lt=n(1483),ct=n(5228),dt=n(248);const pt=(0,I.op)({moments_:function(e,t=null,n=!1){e=(0,x._1)(e,"x","moments");const r=(0,$.EC)(t,e.shape),a=(0,rt.J)(e,r,n);let s=a.shape;n||(s=(0,Ue.rv)(a.shape,r));const o=(0,dt.h)((0,He.l)((0,B.p)(e,"float32"),(0,Z.X)(a,s)));return{mean:a,variance:(0,rt.J)(o,r,n)}}}),ht=(0,I.op)({multiRNNCell_:function(e,t,n,r){const a=(0,x._1)(t,"data","multiRNNCell"),s=(0,x.sI)(n,"c","multiRNNCell"),o=(0,x.sI)(r,"h","multiRNNCell");let i=a;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,s[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});var ft=n(686),mt=n(6500),gt=n(6708),yt=n(7846);const bt=(0,I.op)({outerProduct_:function(e,t){const n=(0,x._1)(e,"v1","outerProduct"),r=(0,x._1)(t,"v2","outerProduct");$.hu(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const a=(0,Z.X)(n,[-1,1]),s=(0,Z.X)(r,[1,-1]);return(0,k.O)(a,s)}});var xt=n(9682);const vt=(0,I.op)({pad1d_:function(e,t,n=0){return(0,$.hu)(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),(0,xt.v)(e,[t],n)}}),kt=(0,I.op)({pad2d_:function(e,t,n=0){return(0,$.hu)(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,xt.v)(e,t,n)}}),wt=(0,I.op)({pad3d_:function(e,t,n=0){return(0,$.hu)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,xt.v)(e,t,n)}}),It=(0,I.op)({pad4d_:function(e,t,n=0){return(0,$.hu)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,xt.v)(e,t,n)}});var Nt=n(2582),Tt=n(7918);const St=(0,I.op)({pool_:function(e,t,n,r,a,s){null==a&&(a=[1,1]),null==s&&(s=1),0===r&&(r="valid");const o=(0,x._1)(e,"x","maxPool");let i=o,u=!1;3===o.rank&&(u=!0,i=(0,Z.X)(o,[1,o.shape[0],o.shape[1],o.shape[2]])),$.hu(Nt.jT(s,a),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`));const l=Nt.Xw(i.shape,t,s,a,r),c=[l.dilationHeight,l.dilationWidth];let d;d="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),a=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],a[t]]))}([l.filterHeight,l.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[h,f]=function(e,t,n){const r=n.map((e=>e[0])),a=n.map((e=>e[1])),s=e.concat(r,a),o=t.map(((e,t)=>(e-s[t]%e)%e)),i=a.map(((e,t)=>e+o[t]));return[t.map(((e,t)=>[r[t],i[t]])),t.map(((e,t)=>[0,o[t]]))]}([l.inHeight,l.inWidth],c,d),m=p?r:"valid",g=p?i:(0,Tt.f)(i,c,h),b=("avg"===n?()=>(0,y.w)(g,t,s,m):()=>(0,Je._)(g,t,s,m))(),v=p?b:(0,E.E)(b,c,f);return u?(0,Z.X)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}});var Ct=n(3453),Et=n(8151),_t=n(9798),$t=n(9451);const At=(0,I.op)({rand_:function(e,t,n){const r=(0,$.NA)(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);a=new Uint8Array(r)}for(let e=0;e<r;e++)a[e]=t();return Y.BV.makeTensor(a,e,n)}});var Rt=n(6845);const Ft=(0,I.op)({randomGamma_:function(e,t,n=1,r="float32",a){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const s=new Rt.T9(t,n,r,a),o=(0,M.f)(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}}),Ot=(0,I.op)({randomNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const s=new Rt.Yi(t,n,r,!1,a),o=(0,M.f)(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});var Dt=n(5002),Mt=n(7245),Bt=n(766),Pt=n(9036),Lt=n(7409),Vt=n(3582),zt=n(7486);const Wt=(0,I.op)({reverse1d_:function(e){const t=(0,x._1)(e,"x","reverse");return $.hu(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),(0,zt.G)(t,0)}}),Ut=(0,I.op)({reverse2d_:function(e,t){const n=(0,x._1)(e,"x","reverse");return $.hu(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),(0,zt.G)(n,t)}}),Gt=(0,I.op)({reverse3d_:function(e,t){const n=(0,x._1)(e,"x","reverse");return $.hu(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),(0,zt.G)(n,t)}}),Ht=(0,I.op)({reverse4d_:function(e,t){const n=(0,x._1)(e,"x","reverse");return $.hu(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),(0,zt.G)(n,t)}});var Xt=n(7809),qt=n(2634),jt=n(9494),Kt=n(5503);const Yt=(0,I.op)({separableConv2d_:function(e,t,n,r,a,s=[1,1],o="NHWC"){const i=(0,x._1)(e,"x","separableConv2d"),u=(0,x._1)(t,"depthwiseFilter","separableConv2d"),l=(0,x._1)(n,"pointwiseFilter","separableConv2d");let c=i,d=!1;if(3===i.rank&&(d=!0,c=(0,Z.X)(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");$.hu(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),$.hu(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),$.hu(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),$.hu(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),$.hu(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const p=u.shape[2],h=u.shape[3];$.hu(l.shape[2]===p*h,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*h}, but got ${l.shape[2]}.`));const f=(0,oe.B)(c,u,r,a,o,s),m=(0,q.T)(f,l,1,"valid",o);return d?(0,Z.X)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});var Qt=n(6567),Zt=n(4434),Jt=n(9331),en=n(3254);const tn=(0,I.op)({slice1d_:function(e,t,n){const r=(0,x._1)(e,"x","slice1d");return $.hu(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),(0,T.t)(r,[t],[n])}}),nn=(0,I.op)({slice2d_:function(e,t,n){const r=(0,x._1)(e,"x","slice2d");return $.hu(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),(0,T.t)(r,t,n)}}),rn=(0,I.op)({slice3d_:function(e,t,n){const r=(0,x._1)(e,"x","slice3d");return $.hu(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),(0,T.t)(r,t,n)}}),an=(0,I.op)({slice4d_:function(e,t,n){const r=(0,x._1)(e,"x","slice4d");return $.hu(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),(0,T.t)(r,t,n)}});var sn=n(682),on=n(7020),un=n(8447),ln=n(4415),cn=n(3710),dn=n(8644),pn=n(3261),hn=n(5265),fn=n(9590),mn=n(2991),gn=n(1901),yn=n(5158),bn=n(1173),xn=n(701),vn=n(6092),kn=n(7852);function wn(e,t,n){if((0,$.Cq)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=(0,x.C)(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,kn.H)(e,t,r,n)}var In=n(9906);function Nn(e,t,n){if((0,$.Cq)(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=(0,x.C)(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,kn.H)(e,t,r,n)}function Tn(e,t,n){if((0,$.Cq)(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=(0,x.C)(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,kn.H)(e,t,r,n)}function Sn(e,t,n){if((0,$.Cq)(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=(0,x.C)(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||r,(0,kn.H)(e,t,r,n)}var Cn=n(3243),En=n(3596),_n=n(9608);const $n=(0,I.op)({unsortedSegmentSum_:function(e,t,n){const r=(0,x._1)(e,"x","unsortedSegmentSum"),a=(0,x._1)(t,"segmentIds","unsortedSegmentSum","int32");(0,$.hu)((0,$.GN)(n),(()=>"numSegments must be of dtype int"));const s={x:r,segmentIds:a},o={numSegments:n};return Y.BV.runKernel(Q.Qv,s,o)}});var An=n(4136);function Rn(e,t=!0,n,r){return Y.BV.makeVariable(e,t,n,r)}var Fn=n(5912),On=n(6380),Dn=n(9640),Mn=n(6577);const Bn=async function(e,t,n){const r=(0,x._1)(e,"tensor","boolMask"),a=(0,x._1)(t,"mask","boolMask","bool"),s=null==n?0:n,o=a.rank,i=r.shape;$.hu(o>0,(()=>"mask cannot be scalar")),$.k5(i.slice(s,s+o),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=s;e<s+o;e++)u*=i[e];const l=i.slice(0,s).concat([u],i.slice(s+o)),c=(0,Z.X)(r,l),d=(0,Z.X)(a,[-1]),p=await(0,On.i)(d),h=(0,fn.L)(p,[1]),f=(0,Ne.I)(c,h,s);return e!==r&&r.dispose(),t!==a&&a.dispose(),h.dispose(),c.dispose(),d.dispose(),p.dispose(),f};var Pn=n(9065);function Ln(e,t,n=null){if(0===e.rank)return(0,r.W)(e);if(1!==e.rank&&null===n)return Ln((0,Z.X)(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return(0,Xe.S)((0,r.W)(e),n);if(t===1/0)return(0,Ge.F)((0,r.W)(e),n);if(t===-1/0)return(0,it.V)((0,r.W)(e),n);if("euclidean"===t||2===t)return(0,pn._)((0,Xe.S)((0,Ct.s)((0,r.W)(e),(0,jt.i)(2,"int32")),n));throw new Error("Error in norm: invalid ord value: "+t)}if(Array.isArray(n)&&2===n.length){if(1===t)return(0,Ge.F)((0,Xe.S)((0,r.W)(e),n[0]),n[1]-1);if(t===1/0)return(0,Ge.F)((0,Xe.S)((0,r.W)(e),n[1]),n[0]);if(t===-1/0)return(0,it.V)((0,Xe.S)((0,r.W)(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return(0,pn._)((0,Xe.S)((0,dt.h)(e),n));throw new Error("Error in norm: invalid ord value: "+t)}throw new Error("Error in norm: invalid axis: "+n)}const Vn=(0,I.op)({norm_:function(e,t="euclidean",n=null,r=!1){const a=Ln(e=(0,x._1)(e,"x","norm"),t,n);let s=a.shape;if(r){const t=(0,$.EC)(n,e.shape);s=Ue.rv(a.shape,t)}return(0,Z.X)(a,s)}});var zn=n(747);const Wn=(0,I.op)({movingAverage_:function(e,t,n,r,a=!0){const s=(0,x._1)(e,"v","movingAverage"),i=(0,x._1)(t,"x","movingAverage"),u=(0,x._1)(n,"decay","movingAverage");(0,zn.assertTypesMatch)(s,i),$.hu($.cO(s.shape,i.shape),(()=>"Shape mismatch in v and x"));const l=(0,jt.i)(1),c=(0,He.l)(l,u);let d=(0,w.d)((0,He.l)(i,s),c);if(a){$.hu(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=(0,x._1)(r,"step","movingAverage");d=(0,le.h)(d,(0,He.l)(l,(0,Ct.s)(u,e)))}return(0,o.I)(s,d)}});var Un=n(3100),Gn=n(9758),Hn=n(7494);const Xn=(0,I.op)({dropout_:function(e,t,n,r){const a=(0,x._1)(e,"x","dropout");if($.hu("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),$.hu(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof st.es?a.clone():a;const s=function(e,t){if(null==t)return e.shape.slice();if($.cO(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(a,n),i=1-t,u=(0,le.h)((0,we.G)((0,o.I)((0,Dt.L)(s,0,1,"float32",r),i)),i);return(0,w.d)(a,u)}});function qn(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function jn(e,t,n){const r=1-e%2,a=new Float32Array(e);for(let s=0;s<e;++s){const o=2*Math.PI*s/(e+r-1);a[s]=t-n*Math.cos(o)}return(0,vn.R)(a,"float32")}const Kn=async function(e,t,n=1){const r=(0,x._1)(e,"predictions","inTopK"),a=(0,x._1)(t,"targets","inTopK");(0,$.hu)(r.rank>1,(()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank)),(0,$.hu)(r.rank-1===a.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${a.rank}`)),(0,$.k5)(r.shape.slice(0,r.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const s=r.shape[r.shape.length-1];(0,$.hu)(n>0&&n<=s,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`));const o=await r.data(),i=await a.data(),[u,l]=[o.length/s,s],c=(0,$.WP)("bool",u);for(let e=0;e<u;e++){const t=e*l,r=o.subarray(t,t+l),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(a[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==a&&a.dispose(),(0,xn.X)(c,a.shape,"bool")};var Yn=n(2277);const Qn=(0,I.op)({hammingWindow_:function(e){return jn(e,.54,.46)}}),Zn=(0,I.op)({hannWindow_:function(e){return jn(e,.5,.5)}}),Jn=(0,I.op)({frame_:function(e,t,n,r=!1,a=0){let s=0;const o=[];for(;s+t<=e.size;)o.push((0,T.t)(e,s,t)),s+=n;if(r)for(;s<e.size;){const r=s+t-e.size,i=(0,v.z)([(0,T.t)(e,s,t-r),(0,ke.h)([r],a)]);o.push(i),s+=n}return 0===o.length?wn([],[0,t]):(0,Z.X)((0,v.z)(o),[o.length,t])}}),er=(0,I.op)({stft_:function(e,t,n,r,a=Zn){null==r&&(r=qn(t));const s=Jn(e,t,n),o=(0,w.d)(s,a(t));return(0,cn.Q)(o,r)}}),tr=(0,I.op)({cropAndResize_:function(e,t,n,r,a="bilinear",s=0){const o=(0,x._1)(e,"image","cropAndResize"),i=(0,x._1)(t,"boxes","cropAndResize","float32"),u=(0,x._1)(n,"boxInd","cropAndResize","int32"),l=i.shape[0];$.hu(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),$.hu(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`)),$.hu(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`)),$.hu(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),$.hu(r[0]>=1&&r[1]>=1,(()=>"cropSize must be atleast [1,1], but was "+r)),$.hu("bilinear"===a||"nearest"===a,(()=>"method must be bilinear or nearest, but was "+a));const c={image:o,boxes:i,boxInd:u},d={method:a,extrapolationValue:s,cropSize:r};return Y.BV.runKernel(Q.Vc,c,d)}}),nr=(0,I.op)({flipLeftRight_:function(e){const t=(0,x._1)(e,"image","flipLeftRight","float32");$.hu(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Y.BV.runKernel(Q.Uy,n,{})}}),rr=(0,I.op)({rotateWithOffset_:function(e,t,n=0,r=.5){const a=(0,x._1)(e,"image","rotateWithOffset","float32");$.hu(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const s={image:a},o={radians:t,fillValue:n,center:r};return Y.BV.runKernel(Q.b9,s,o)}});function ar(e,t,n,r,a,s){null==r&&(r=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==s&&(s=0);const o=e.shape[0];return n=Math.min(n,o),$.hu(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),$.hu(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),$.hu(4===e.shape[1],(()=>"boxes must have 4 columns, but 2nd dimension was "+e.shape[1])),$.hu(1===t.rank,(()=>"scores must be a 1D tensor")),$.hu(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was `+t.shape[0])),$.hu(0<=s&&s<=1,(()=>`softNmsSigma must be in [0, 1], but was '${s}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s}}const sr=(0,I.op)({nonMaxSuppression_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=(0,x._1)(e,"boxes","nonMaxSuppression"),o=(0,x._1)(t,"scores","nonMaxSuppression"),i=ar(s,o,n,r,a),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:a=i.scoreThreshold};return Y.BV.runKernel(Q.uv,{boxes:s,scores:o},u)}});var or=n(3337);const ir=(0,I.op)({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=(0,x._1)(e,"boxes","nonMaxSuppression"),i=(0,x._1)(t,"scores","nonMaxSuppression"),u=ar(o,i,n,r,a,s),l={boxes:o,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:a=u.scoreThreshold,softNmsSigma:s=u.softNmsSigma},d=Y.BV.runKernel(Q.W0,l,c);return{selectedIndices:d[0],selectedScores:d[1]}}}),ur=(0,I.op)({nonMaxSuppressionPadded_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=(0,x._1)(e,"boxes","nonMaxSuppression"),i=(0,x._1)(t,"scores","nonMaxSuppression"),u=ar(o,i,n,r,a,null),l={boxes:o,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:s},d=Y.BV.runKernel(Q.cy,l,c);return{selectedIndices:d[0],validOutputs:d[1]}}}),lr=(0,I.op)({resizeBilinear_:function(e,t,n=!1,r=!1){const a=(0,x._1)(e,"images","resizeBilinear");$.hu(3===a.rank||4===a.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`)),$.hu(2===t.length,(()=>"Error in resizeBilinear: new shape must 2D, but got shape "+t+".")),$.hu(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let s=a,o=!1;3===a.rank&&(o=!0,s=(0,Z.X)(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,i={images:s},u={alignCorners:n,halfPixelCenters:r,size:t},l=Y.BV.runKernel(Q._Y,i,u);return o?(0,Z.X)(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),cr=(0,I.op)({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const a=(0,x._1)(e,"images","resizeNearestNeighbor");$.hu(3===a.rank||4===a.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`)),$.hu(2===t.length,(()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+t+".")),$.hu("float32"===a.dtype||"int32"===a.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),$.hu(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let s=a,o=!1;3===a.rank&&(o=!0,s=(0,Z.X)(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,i={images:s},u={alignCorners:n,halfPixelCenters:r,size:t},l=Y.BV.runKernel(Q.dp,i,u);return o?(0,Z.X)(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),dr=(0,I.op)({threshold_:function(e,t="binary",n=!1,r=.5){const a=(0,x._1)(e,"image","threshold"),s=a.shape[0]*a.shape[1];let i,u,l,c,d=(0,w.d)((0,vn.R)([r]),255);if($.hu(3===a.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`)),$.hu(3===a.shape[2]||1===a.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`)),$.hu("int32"===a.dtype||"float32"===a.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`)),$.hu("otsu"===t||"binary"===t,(()=>"Method must be binary or otsu, but was "+t)),3===a.shape[2]){[i,u,l]=(0,dn.V)(a,[1,1,1],-1);const e=(0,w.d)(i,.2989),t=(0,w.d)(u,.587),n=(0,w.d)(l,.114);c=(0,o.I)((0,o.I)(e,t),n)}else c=e;"otsu"===t&&(d=function(e,t){let n,r,a,s,i,u,l=(0,vn.R)([-1]),c=(0,vn.R)([0]),d=(0,vn.R)([0]);for(let p=0;p<e.size-1;p++){n=(0,T.t)(e,0,p+1),r=(0,T.t)(e,p+1),i=(0,le.h)((0,Xe.S)(n),t),u=(0,le.h)((0,Xe.S)(r),t);const h=(0,Xe.S)((0,w.d)(n,(0,Mt.w)(0,n.size)));a=(0,le.h)(h,(0,Xe.S)(n));const f=(0,ke.h)(r.shape,n.size),m=(0,o.I)((0,Mt.w)(0,r.size),f),g=(0,w.d)(r,m);s=(0,le.h)((0,Xe.S)(g),(0,Xe.S)(r));const y=(0,He.l)(a,s),b=(0,He.l)(a,s),x=(0,w.d)(i,u);d=(0,w.d)((0,w.d)(x,y),b);const v=(0,Te.p)(d,c);c=(0,Fn.a)(v,d,c),l=(0,Fn.a)(v,(0,vn.R)([p]),l)}return l}((0,O.y)((0,B.p)((0,Xt.N)(c),"int32"),(0,xn.X)([]),256),s));const p=n?(0,Fe.z)(c,d):(0,Te.p)(c,d);return(0,B.p)((0,w.d)(p,255),"int32")}}),pr=(0,I.op)({transform_:function(e,t,n="nearest",r="constant",a=0,s){const o=(0,x._1)(e,"image","transform","float32"),i=(0,x._1)(t,"transforms","transform","float32");$.hu(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),$.hu(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),$.hu(null==s||2===s.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`));const u={image:o,transforms:i},l={interpolation:n,fillMode:r,fillValue:a,outputShape:s};return Y.BV.runKernel(Q.wx,u,l)}}),hr=(0,I.op)({bandPart_:function(e,t,n){(0,$.hu)(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),(0,$.hu)(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=(0,x._1)(e,"a","bandPart");(0,$.hu)(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const a=r.shape,[s,o]=r.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=s),n<0&&(n=o);const i=(0,Z.X)((0,Mt.w)(0,s,1,"int32"),[-1,1]),u=(0,Mt.w)(0,o,1,"int32"),l=(0,He.l)(i,u),c=(0,je.H)((0,Fe.z)(l,(0,jt.i)(+t,"int32")),(0,Se.b)(l,(0,jt.i)(-n,"int32"))),d=(0,Dn.l)([s,o],r.dtype);return(0,Z.X)((0,mn.k)((0,An.H)((0,Z.X)(r,[-1,s,o])).map((e=>(0,Fn.a)(c,e,d)))),a)}}),fr=(0,I.op)({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,(0,$.hu)(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)(0,$.hu)(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=(0,dn.V)(e,e.shape[0],0).map((e=>(0,fn.L)(e,[0])));(0,$.hu)(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(Y.BV.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=(0,w.d)((0,Xe.S)((0,w.d)(n[r],e)),n[r]);e=(0,He.l)(e,t)}return(0,le.h)(e,Vn(e,"euclidean"))})));return t?(0,mn.k)(n,0):n}});var mr=n(4368);function gr(e,t=!1){return Y.BV.tidy((()=>{(0,$.hu)(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let a=ve(n),s=(0,V.d)(e);const o=wn([[1]],[1,1]);let i=(0,V.d)(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=s,u=i,l=a;[i,s,a]=Y.BV.tidy((()=>{const t=(0,T.t)(s,[e,e],[n-e,1]),u=Vn(t),l=(0,T.t)(s,[e,e],[1,1]),c=(0,Fn.a)((0,Te.p)(l,0),wn([[-1]]),wn([[1]])),d=(0,He.l)(l,(0,w.d)(c,u)),p=(0,le.h)(t,d);i=1===p.shape[0]?(0,V.d)(o):(0,v.z)([o,(0,T.t)(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const h=(0,Le.W)((0,le.h)((0,k.O)(c,d),u)),f=(0,T.t)(s,[e,0],[n-e,r]),m=(0,w.d)(h,i),g=(0,Pn.p)(i);if(0===e)s=(0,He.l)(f,(0,k.O)(m,(0,k.O)(g,f)));else{const t=(0,He.l)(f,(0,k.O)(m,(0,k.O)(g,f)));s=(0,v.z)([(0,T.t)(s,[0,0],[e,r]),t],0)}const y=(0,Pn.p)(m),b=(0,T.t)(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=(0,He.l)(b,(0,k.O)((0,k.O)(b,i),y));else{const t=(0,He.l)(b,(0,k.O)((0,k.O)(b,i),y));a=(0,v.z)([(0,T.t)(a,[0,0],[n,e]),t],1)}return[i,s,a]})),(0,mr.B9)([t,u,l])}return!t&&n>r&&(a=(0,T.t)(a,[0,0],[n,r]),s=(0,T.t)(s,[0,0],[r,r])),[a,s]}))}const yr=(0,I.op)({qr_:function(e,t=!1){if((0,$.hu)(e.rank>=2,(()=>"qr() requires input tensor to have a rank >= 2, but got rank "+e.rank)),2===e.rank)return gr(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=(0,An.H)((0,Z.X)(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],s=[];return r.forEach((e=>{const[n,r]=gr(e,t);a.push(n),s.push(r)})),[(0,Z.X)((0,mn.k)(a,0),e.shape),(0,Z.X)((0,mn.k)(s,0),e.shape)]}}});var br=n(9876);const xr=(0,I.op)({computeWeightedLoss_:function(e,t,n=br.I.SUM_BY_NONZERO_WEIGHTS){const r=(0,x._1)(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=(0,x._1)(t,"weights","computeWeightedLoss"));const s=null==a?r:(0,w.d)(r,a);if(n===br.I.NONE)return s;if(n===br.I.SUM)return(0,Xe.S)(s);if(n===br.I.MEAN){if(null==a)return(0,rt.J)(s);{const e=r.size/a.size,t=(0,le.h)((0,Xe.S)(s),(0,Xe.S)(a));return e>1?(0,le.h)(t,(0,jt.i)(e)):t}}if(n===br.I.SUM_BY_NONZERO_WEIGHTS){if(null==a)return(0,le.h)((0,Xe.S)(s),(0,jt.i)(r.size));{const e=(0,w.d)(a,(0,at.i)(r.shape)),t=(0,B.p)((0,Xe.S)((0,mt.Q)(e,(0,jt.i)(0))),"float32");return(0,le.h)((0,Xe.S)(s),t)}}throw Error("Unknown reduction: "+n)}}),vr=(0,I.op)({absoluteDifference_:function(e,t,n,a=br.I.SUM_BY_NONZERO_WEIGHTS){const s=(0,x._1)(e,"labels","absoluteDifference"),o=(0,x._1)(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=(0,x._1)(n,"weights","absoluteDifference")),(0,$.k5)(s.shape,o.shape,"Error in absoluteDifference: ");const u=(0,r.W)((0,He.l)(s,o));return xr(u,i,a)}}),kr=(0,I.op)({cosineDistance_:function(e,t,n,r,a=br.I.SUM_BY_NONZERO_WEIGHTS){const s=(0,x._1)(e,"labels","cosineDistance"),o=(0,x._1)(t,"predictions","cosineDistance");let i=null;null!=r&&(i=(0,x._1)(r,"weights","cosineDistance")),(0,$.k5)(s.shape,o.shape,"Error in cosineDistance: ");const u=(0,jt.i)(1),l=(0,He.l)(u,(0,Xe.S)((0,w.d)(s,o),n,!0));return xr(l,i,a)}}),wr=(0,I.op)({hingeLoss_:function(e,t,n,r=br.I.SUM_BY_NONZERO_WEIGHTS){let a=(0,x._1)(e,"labels","hingeLoss");const s=(0,x._1)(t,"predictions","hingeLoss");let o=null;null!=n&&(o=(0,x._1)(n,"weights","hingeLoss")),(0,$.k5)(a.shape,s.shape,"Error in hingeLoss: ");const i=(0,jt.i)(1);a=(0,He.l)((0,w.d)((0,jt.i)(2),a),i);const u=(0,Lt.U)((0,He.l)(i,(0,w.d)(a,s)));return xr(u,o,r)}}),Ir=(0,I.op)({huberLoss_:function(e,t,n,a=1,s=br.I.SUM_BY_NONZERO_WEIGHTS){const i=(0,x._1)(e,"labels","huberLoss"),u=(0,x._1)(t,"predictions","huberLoss");let l=null;null!=n&&(l=(0,x._1)(n,"weights","huberLoss")),(0,$.k5)(i.shape,u.shape,"Error in huberLoss: ");const c=(0,jt.i)(a),d=(0,r.W)((0,He.l)(u,i)),p=(0,ut.L)(d,c),h=(0,He.l)(d,p),f=(0,o.I)((0,w.d)((0,jt.i)(.5),(0,dt.h)(p)),(0,w.d)(c,h));return xr(f,l,s)}}),Nr=(0,I.op)({logLoss_:function(e,t,n,r=1e-7,a=br.I.SUM_BY_NONZERO_WEIGHTS){const s=(0,x._1)(e,"labels","logLoss"),i=(0,x._1)(t,"predictions","logLoss");let u=null;null!=n&&(u=(0,x._1)(n,"weights","logLoss")),(0,$.k5)(s.shape,i.shape,"Error in logLoss: ");const l=(0,jt.i)(1),c=(0,jt.i)(r),d=(0,Le.W)((0,w.d)(s,(0,Me.c)((0,o.I)(i,c)))),p=(0,w.d)((0,He.l)(l,s),(0,Me.c)((0,o.I)((0,He.l)(l,i),c))),h=(0,He.l)(d,p);return xr(h,u,a)}}),Tr=(0,I.op)({meanSquaredError_:function(e,t,n,r=br.I.SUM_BY_NONZERO_WEIGHTS){const a=(0,x._1)(e,"labels","meanSquaredError"),s=(0,x._1)(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=(0,x._1)(n,"weights","meanSquaredError")),(0,$.k5)(a.shape,s.shape,"Error in meanSquaredError: ");const i=(0,hn.$)(a,s);return xr(i,o,r)}}),Sr=(0,I.op)({sigmoidCrossEntropy_:function(e,t,n,a=0,s=br.I.SUM_BY_NONZERO_WEIGHTS){let i=(0,x._1)(e,"multiClassLabels","sigmoidCrossEntropy");const u=(0,x._1)(t,"logits","sigmoidCrossEntropy");let l=null;if(null!=n&&(l=(0,x._1)(n,"weights","sigmoidCrossEntropy")),(0,$.k5)(i.shape,u.shape,"Error in sigmoidCrossEntropy: "),a>0){const e=(0,jt.i)(a),t=(0,jt.i)(1),n=(0,jt.i)(.5);i=(0,o.I)((0,w.d)(i,(0,He.l)(t,e)),(0,w.d)(n,e))}const c=function(e,t){const n=(0,x._1)(e,"labels","sigmoidCrossEntropyWithLogits"),a=(0,x._1)(t,"logits","sigmoidCrossEntropyWithLogits");(0,$.k5)(n.shape,a.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=(0,Lt.U)(a),i=(0,w.d)(a,n),u=(0,Be.K)((0,ge.Q)((0,Le.W)((0,r.W)(a))));return(0,o.I)((0,He.l)(s,i),u)}(i,u);return xr(c,l,s)}}),Cr=(0,I.op)({softmaxCrossEntropy_:function(e,t,n,r=0,a=br.I.SUM_BY_NONZERO_WEIGHTS){let s=(0,x._1)(e,"onehotLabels","softmaxCrossEntropy");const i=(0,x._1)(t,"logits","softmaxCrossEntropy");let u=null;if(null!=n&&(u=(0,x._1)(n,"weights","softmaxCrossEntropy")),(0,$.k5)(s.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const e=(0,jt.i)(r),t=(0,jt.i)(1),n=(0,jt.i)(s.shape[1]);s=(0,o.I)((0,w.d)(s,(0,He.l)(t,e)),(0,le.h)(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was `+n);return(0,Pe.cb)(((e,t,r)=>{const a=qe(t,[n],!0),s=(0,He.l)((0,B.p)(t,"float32"),a);r([e,s]);const o=(0,Le.W)((0,w.d)(s,e));return{value:(0,Xe.S)(o,[n]),gradFunc:(e,t)=>{const[r,a]=t,s=(0,Ue.rv)(e.shape,[n]);return[(0,w.d)((0,Z.X)(e,s),(0,He.l)((0,B.p)(r,"float32"),(0,ge.Q)(a))),(0,w.d)((0,Z.X)(e,s),(0,He.l)((0,ge.Q)(a),(0,B.p)(r,"float32")))]}}}))(e,t)}(s,i);return xr(l,u,a)}}),Er=(0,I.op)({sparseFillEmptyRows_:function(e,t,n,r){const a=(0,x._1)(e,"indices","sparseFillEmptyRows"),s=(0,x._1)(t,"values","sparseFillEmptyRows"),o=(0,x._1)(n,"denseShape","sparseFillEmptyRows"),i=(0,x._1)(r,"defaultValue","sparseFillEmptyRows",s.dtype);if(2!==a.rank)throw new Error("Indices should be Tensor2D but received shape\n        "+a.shape);if(1!==s.rank)throw new Error("Values should be Tensor1D but received shape "+s.shape);if(1!==o.rank)throw new Error("Dense shape should be Tensor1D but received shape "+o.shape);if(0!==i.rank)throw new Error("Default value should be a scalar but received shape "+i.shape);const u={indices:a,values:s,denseShape:o,defaultValue:i},l=Y.BV.runKernel(Q.O3,u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}}),_r=(0,I.op)({sparseReshape_:function(e,t,n){const r=(0,x._1)(e,"inputIndices","sparseReshape"),a=(0,x._1)(t,"inputShape","sparseReshape"),s=(0,x._1)(n,"newShape","sparseReshape");if(2!==r.rank)throw new Error("Input indices should be Tensor2D but received shape\n        "+r.shape);if(1!==a.rank)throw new Error("Input shape should be Tensor1D but received shape "+a.shape);if(1!==s.rank)throw new Error("New shape should be Tensor1D but received shape "+s.shape);const o={inputIndices:r,inputShape:a,newShape:s},i=Y.BV.runKernel(Q.nh,o);return{outputIndices:i[0],outputShape:i[1]}}}),$r=(0,I.op)({sparseSegmentMean_:function(e,t,n){const r=(0,x._1)(e,"data","sparseSegmentMean"),a=(0,x._1)(t,"indices","sparseSegmentMean"),s=(0,x._1)(n,"segmentIds","sparseSegmentMean");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error("Indices should be Tensor1D but received shape\n          "+a.shape);if(1!==s.rank)throw new Error("Segment ids should be Tensor1D but received shape\n          "+s.shape);const o={data:r,indices:a,segmentIds:s};return Y.BV.runKernel(Q.YW,o)}}),Ar=(0,I.op)({sparseSegmentSum_:function(e,t,n){const r=(0,x._1)(e,"data","sparseSegmentSum"),a=(0,x._1)(t,"indices","sparseSegmentSum"),s=(0,x._1)(n,"segmentIds","sparseSegmentSum");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error("Indices should be Tensor1D but received shape\n         "+a.shape);if(1!==s.rank)throw new Error("Segment ids should be Tensor1D but received shape\n         "+s.shape);const o={data:r,indices:a,segmentIds:s};return Y.BV.runKernel(Q.Zj,o)}}),Rr=(0,I.op)({stringNGrams_:function(e,t,n,r,a,s,o,i){const u=(0,x._1)(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error("Data must be a vector, saw: "+u.shape);const l=(0,x._1)(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:a,rightPad:s,padWidth:o,preserveShortSequences:i},d={data:u,dataSplits:l},p=Y.BV.runKernel(Q._J,d,c);return{nGrams:p[0],nGramsSplits:p[1]}}}),Fr=(0,I.op)({stringSplit_:function(e,t,n=!0){const r=(0,x._1)(e,"input","stringSplit","string"),a=(0,x._1)(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error("Input should be Tensor1D but received shape "+r.shape);if(0!==a.rank)throw new Error("Delimiter should be a scalar but received shape "+a.shape);const s={skipEmpty:n},o={input:r,delimiter:a},i=Y.BV.runKernel(Q.s1,o,s);return{indices:i[0],values:i[1],shape:i[2]}}}),Or=(0,I.op)({stringToHashBucketFast_:function(e,t){const n=(0,x._1)(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const a={input:n};return Y.BV.runKernel(Q.Xk,a,r)}}),Dr={fft:on.k,ifft:un.S,rfft:cn.Q,irfft:ln.w},Mr={hammingWindow:Qn,hannWindow:Zn,frame:Jn,stft:er},Br={flipLeftRight:nr,resizeNearestNeighbor:cr,resizeBilinear:lr,rotateWithOffset:rr,cropAndResize:tr,nonMaxSuppression:sr,nonMaxSuppressionAsync:async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=(0,x._1)(e,"boxes","nonMaxSuppressionAsync"),o=(0,x._1)(t,"scores","nonMaxSuppressionAsync"),i=ar(s,o,n,r,a);n=i.maxOutputSize,r=i.iouThreshold,a=i.scoreThreshold;const u=await Promise.all([s.data(),o.data()]),l=u[0],c=u[1],{selectedIndices:d}=(0,or.GP)(l,c,n,r,a);return s!==e&&s.dispose(),o!==t&&o.dispose(),(0,vn.R)(d,"int32")},nonMaxSuppressionWithScore:ir,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=(0,x._1)(e,"boxes","nonMaxSuppressionAsync"),i=(0,x._1)(t,"scores","nonMaxSuppressionAsync"),u=ar(o,i,n,r,a,s);n=u.maxOutputSize,r=u.iouThreshold,a=u.scoreThreshold,s=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),c=l[0],d=l[1],{selectedIndices:p,selectedScores:h}=(0,or.pA)(c,d,n,r,a,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:(0,vn.R)(p,"int32"),selectedScores:(0,vn.R)(h)}},nonMaxSuppressionPadded:ur,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=(0,x._1)(e,"boxes","nonMaxSuppressionAsync"),i=(0,x._1)(t,"scores","nonMaxSuppressionAsync"),u=ar(o,i,n,r,a,null),l=u.maxOutputSize,c=u.iouThreshold,d=u.scoreThreshold,[p,h]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=(0,or.qP)(p,h,l,c,d,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:(0,vn.R)(f,"int32"),validOutputs:(0,jt.i)(m,"int32")}},threshold:dr,transform:pr},Pr={bandPart:hr,gramSchmidt:fr,qr:yr},Lr={absoluteDifference:vr,computeWeightedLoss:xr,cosineDistance:kr,hingeLoss:wr,huberLoss:Ir,logLoss:Nr,meanSquaredError:Tr,sigmoidCrossEntropy:Sr,softmaxCrossEntropy:Cr},Vr={sparseFillEmptyRows:Er,sparseReshape:_r,sparseSegmentMean:$r,sparseSegmentSum:Ar},zr={stringNGrams:Rr,stringSplit:Fr,stringToHashBucketFast:Or}},9682:(e,t,n)=>{"use strict";n.d(t,{v:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({pad_:function(e,t,n=0){const o=(0,s._1)(e,"x","pad");if(0===o.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const i={paddings:t,constantValue:n},u={x:o};return r.BV.runKernel(a.ly,u,i)}})},3453:(e,t,n)=>{"use strict";n.d(t,{s:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({pow_:function(e,t){let n=(0,o._1)(e,"base","pow"),i=(0,o._1)(t,"exp","pow");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.pe,u)}})},8151:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({prelu_:function(e,t){const n={x:(0,s._1)(e,"x","prelu"),alpha:(0,s._1)(t,"alpha","prelu")};return r.BV.runKernel(a.o0,n)}})},9798:(e,t,n)=>{"use strict";function r(e,t=!1){console.log(e.toString(t))}n.d(t,{S:()=>r})},9451:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(2271);const i=(0,n(2668).op)({prod_:function(e,t=null,n=!1){let i=(0,s._1)(e,"x","prod");"bool"===i.dtype&&(i=(0,o.p)(i,"int32"));const u={x:i},l={axis:t,keepDims:n};return r.BV.runKernel(a.Dl,u,l)}})},6845:(e,t,n)=>{"use strict";n.d(t,{Yi:()=>a,T9:()=>s,wv:()=>o});var r=n(6377);class a{constructor(e,t,n,a,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=a,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const o=s||Math.random();this.random=r.alea(o.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,a,s;do{r=2*this.random()-1,a=2*this.random()-1,s=r*r+a*a}while(s>=1||0===s);const o=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*a*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class s{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const o=s||Math.random();this.randu=r.alea(o.toString()),this.randn=new a(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,a,s;for(;;){do{r=this.randn.nextValue(),s=1+this.c*r}while(s<=0);if(s*=s*s,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-s+Math.log(s)),a=this.randu(),a<t||Math.log(a)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class o{constructor(e=0,t=1,n,a){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==a&&(a=Math.random()),"number"==typeof a&&(a=a.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=r.alea(a)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}},5002:(e,t,n)=>{"use strict";n.d(t,{L:()=>o});var r=n(2657),a=n(2668),s=n(6845);const o=(0,a.op)({randomUniform_:function(e,t=0,n=1,a="float32",o){const i=(0,r.f)(e,a),u=new s.wv(t,n,null,o);for(let e=0;e<i.values.length;e++)i.values[e]=u.nextValue();return i.toTensor()}})},7245:(e,t,n)=>{"use strict";n.d(t,{w:()=>s});var r=n(7097),a=n(9121);function s(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const o={start:e,stop:t,step:n,dtype:s};return r.BV.runKernel(a.e6,{},o)}},766:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({real_:function(e){const t={input:(0,s._1)(e,"input","real")};return r.BV.runKernel(a.xJ,t)}})},9036:(e,t,n)=>{"use strict";n.d(t,{M:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({reciprocal_:function(e){const t={x:(0,s._1)(e,"x","reciprocal")};return r.BV.runKernel(a.$H,t)}})},7409:(e,t,n)=>{"use strict";n.d(t,{U:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({relu_:function(e){const t={x:(0,s._1)(e,"x","relu")};return r.BV.runKernel(a.qk,t)}})},3582:(e,t,n)=>{"use strict";n.d(t,{b:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({relu6_:function(e){const t={x:(0,s._1)(e,"x","relu6")};return r.BV.runKernel(a.Sb,t)}})},4968:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({reshape_:function(e,t){const n={x:(0,s._1)(e,"x","reshape","string_or_numeric")},o={shape:t};return r.BV.runKernel(a.HZ,n,o)}})},7486:(e,t,n)=>{"use strict";n.d(t,{G:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({reverse_:function(e,t){const n={x:(0,s._1)(e,"x","reverse")},o={dims:t};return r.BV.runKernel(a.mK,n,o)}})},7809:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({round_:function(e){const t={x:(0,s._1)(e,"x","round")};return r.BV.runKernel(a.e0,t)}})},2634:(e,t,n)=>{"use strict";n.d(t,{b:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({rsqrt_:function(e){const t={x:(0,s._1)(e,"x","rsqrt")};return r.BV.runKernel(a.bV,t)}})},9494:(e,t,n)=>{"use strict";n.d(t,{i:()=>s});var r=n(569),a=n(7852);function s(e,t){if(((0,r.fU)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&(0,r.fU)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return(0,a.H)(e,[],[],t)}},3100:(e,t,n)=>{"use strict";n.d(t,{s:()=>u});var r=n(7097),a=n(9121),s=n(3740),o=n(2668),i=n(3028);const u=(0,o.op)({scatterND_:function(e,t,n){const o=(0,s._1)(e,"indices","scatterND","int32"),u=(0,s._1)(t,"updates","scatterND");i.validateInput(u,o,n);const l={indices:o,updates:u},c={shape:n};return r.BV.runKernel(a.xQ,l,c)}})},3028:(e,t,n)=>{"use strict";n.r(t),n.d(t,{validateUpdateShape:()=>a,validateInput:()=>s,calculateShapes:()=>o});var r=n(569);function a(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,s="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${t.shape}, shape: ${e}`+`, sliceDim: ${r}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(s+` update.rank < ${a}. `);if(e.length<r+(n.rank-a))throw new Error(s+" Output shape length < "+(r+(n.rank-a)));if(n.rank!==a+e.length-r)throw new Error(s+" update.rank != "+(a+e.length-r));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+r])throw new Error(s+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function s(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+t.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===t.size)throw new Error("Indices specified for empty output. indices shape: "+t.shape);if(0===e.size)throw new Error("Updates specified for empty output. updates shape: "+e.shape)}a(n,t,e)}function o(e,t,n){const a=t.shape.length,s=a>1?t.shape[a-1]:1,o=n.length;let i=1;for(let e=s;e<o;++e)i*=n[e];const u=s<1?1:s;return{sliceRank:s,numUpdates:(0,r.NA)(t.shape)/u,sliceSize:i,strides:[...(0,r.e3)(n.slice(0,s)),1],outputSize:(0,r.NA)(n)}}},5503:(e,t,n)=>{"use strict";n.d(t,{U:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({selu_:function(e){const t={x:(0,s._1)(e,"x","selu")};return r.BV.runKernel(a.oF,t)}})},6567:(e,t,n)=>{"use strict";n.d(t,{O:()=>o});var r=n(4077),a=n(3740),s=n(569);const o=async function(e,t){const n=(0,a._1)(e,"x","setdiff1d"),o=(0,a._1)(t,"y","setdiff1d");s.hu(n.dtype===o.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${o.dtype}).`)),s.hu(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),s.hu(1===o.rank,(()=>`y should be 1D tensor, but got y (${o.shape}).`));const i=await n.data(),u=await o.data(),l=new Set(u);let c=0;for(let e=0;e<i.length;e++)l.has(i[e])||c++;const d=new r.YD([c],n.dtype),p=new r.YD([c],"int32");for(let e=0,t=0;e<i.length;e++)l.has(i[e])||(d.values[t]=i[e],p.values[t]=e,t++);return[d.toTensor(),p.toTensor()]}},625:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({sigmoid_:function(e){const t={x:(0,s._1)(e,"x","sigmoid")};return r.BV.runKernel(a.a5,t)}})},4434:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({sign_:function(e){const t={x:(0,s._1)(e,"x","sign")};return r.BV.runKernel(a.i5,t)}})},9331:(e,t,n)=>{"use strict";n.d(t,{O:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({sin_:function(e){const t={x:(0,s._1)(e,"x","sin")};return r.BV.runKernel(a.RQ,t)}})},3254:(e,t,n)=>{"use strict";n.d(t,{R:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({sinh_:function(e){const t={x:(0,s._1)(e,"x","sinh")};return r.BV.runKernel(a.w3,t)}})},2676:(e,t,n)=>{"use strict";n.d(t,{t:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({slice_:function(e,t,n){const o=(0,s._1)(e,"x","slice","string_or_numeric");if(0===o.rank)throw new Error("Slicing scalar is not possible");const i={x:o},u={begin:t,size:n};return r.BV.runKernel(a.p2,i,u)}})},682:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({softmax_:function(e,t=-1){const n=(0,s._1)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const o={logits:n},i={dim:t};return r.BV.runKernel(a.Gc,o,i)}})},3694:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({softplus_:function(e){const t={x:(0,s._1)(e,"x","softplus")};return r.BV.runKernel(a.MR,t)}})},7918:(e,t,n)=>{"use strict";n.d(t,{f:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({spaceToBatchND_:function(e,t,n){const i=(0,s._1)(e,"x","spaceToBatchND");o.hu(i.rank>=1+t.length,(()=>`input rank ${i.rank} should be > than [blockShape] ${t.length}`)),o.hu(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),o.hu(i.shape.reduce(((e,r,a)=>a>0&&a<=t.length?e&&(r+n[a-1][0]+n[a-1][1])%t[a-1]==0:e),!0),(()=>`input spatial dimensions ${i.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const u={x:i},l={blockShape:t,paddings:n};return r.BV.runKernel(a.TQ,u,l)}})},9758:(e,t,n)=>{"use strict";n.d(t,{e:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({sparseToDense_:function(e,t,n,o=0){const i=(0,s._1)(e,"sparseIndices","sparseToDense","int32"),u=(0,s._1)(t,"sparseValues","sparseToDense"),l=(0,s._1)(o,"defaultValue","sparseToDense",u.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(i,u,n,l);const c={sparseIndices:i,sparseValues:u,defaultValue:l},d={outputShape:n};return r.BV.runKernel(a.D2,c,d)}})},7020:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var r=n(7097),a=n(9121),s=n(569);const o=(0,n(2668).op)({fft_:function(e){(0,s.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return r.BV.runKernel(a.vw,t)}})},8447:(e,t,n)=>{"use strict";n.d(t,{S:()=>o});var r=n(7097),a=n(9121),s=n(569);const o=(0,n(2668).op)({ifft_:function(e){(0,s.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return r.BV.runKernel(a.Qg,t)}})},4415:(e,t,n)=>{"use strict";n.d(t,{w:()=>f});var r=n(1661),a=n(6884),s=n(4386),o=n(4841),i=n(2668),u=n(766),l=n(4968),c=n(7486),d=n(9494),p=n(2676),h=n(8447);const f=(0,i.op)({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let i;if(t<=2){const r=(0,l.X)(e,[n,t]);i=(0,h.S)(r)}else{const f=[n,2*(t-1)],m=(0,l.X)((0,u.k)(e),[n,t]),g=(0,l.X)((0,s.a)(e),[n,t]),y=(0,c.G)((0,p.t)(m,[0,1],[n,t-2]),1),b=(0,o.d)((0,c.G)((0,p.t)(g,[0,1],[n,t-2]),1),(0,d.i)(-1)),x=(0,a.z)([m,y],1),v=(0,a.z)([g,b],1),k=(0,l.X)((0,r.P)(x,v),[f[0],f[1]]);i=(0,h.S)(k)}if(i=(0,u.k)(i),3===e.rank&&0!==e.shape[0]){const t=i,n=e.shape[0];i=(0,l.X)(i,[n,i.shape[0]/n,i.shape[1]]),t.dispose()}return i}})},3710:(e,t,n)=>{"use strict";n.d(t,{Q:()=>m});var r=n(569),a=n(1661),s=n(6884),o=n(4386),i=n(2668),u=n(766),l=n(4968),c=n(2676),d=n(8644),p=n(9640),h=n(6577),f=n(7020);const m=(0,i.op)({rfft_:function(e,t){(0,r.hu)("float32"===e.dtype,(()=>"The dtype for rfft() must be real value but got "+e.dtype));let n=e.shape[e.shape.length-1];const i=e.size/n;let m;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,m=(0,c.t)(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,m=(0,s.z)([e,(0,p.l)(r)],e.shape.length-1),n=t}else m=e;const g=(0,h.P)(m),y=(0,l.X)((0,a.P)(m,g),[i,n]),b=(0,f.k)(y),x=Math.floor(n/2)+1,v=(0,u.k)(b),k=(0,o.a)(b),w=(0,d.V)(v,[x,n-x],v.shape.length-1),I=(0,d.V)(k,[x,n-x],k.shape.length-1),N=m.shape.slice();return N[m.shape.length-1]=x,(0,l.X)((0,a.P)(w[0],I[0]),N)}})},8644:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({split_:function(e,t,n=0){const o={x:(0,s._1)(e,"x","split")},i={numOrSizeSplits:t,axis:n};return r.BV.runKernel(a.L8,o,i)}})},3261:(e,t,n)=>{"use strict";n.d(t,{_:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({sqrt_:function(e){const t={x:(0,s._1)(e,"x","sqrt")};return r.BV.runKernel(a.FK,t)}})},248:(e,t,n)=>{"use strict";n.d(t,{h:()=>s});var r=n(7097),a=n(3740);const s=(0,n(2668).op)({square_:function(e){const t=(0,a._1)(e,"x","square");return r.BV.runKernel("Square",{x:t},{})}})},5265:(e,t,n)=>{"use strict";n.d(t,{$:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({squaredDifference_:function(e,t){let n=(0,o._1)(e,"a","squaredDifference"),u=(0,o._1)(t,"b","squaredDifference");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a._t,l,{})}})},9590:(e,t,n)=>{"use strict";n.d(t,{L:()=>i});var r=n(3740),a=n(569),s=n(2668),o=n(4968);const i=(0,s.op)({squeeze_:function(e,t){const n=(0,r._1)(e,"x","squeeze");return(0,o.X)(n,(0,a.bp)(n.shape,t).newShape)}})},2991:(e,t,n)=>{"use strict";n.d(t,{k:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({stack_:function(e,t=0){const n=(0,s.sI)(e,"tensors","stack","string_or_numeric");o.hu(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&o.hu(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const i=n,u={axis:t};return r.BV.runKernel(a.Qi,i,u)}})},1901:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({step_:function(e,t=0){const n={x:(0,s._1)(e,"x","step")},o={alpha:t};return r.BV.runKernel(a.h8,n,o)}})},5158:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({stridedSlice_:function(e,t,n,o,i=0,u=0,l=0,c=0,d=0){const p={x:(0,s._1)(e,"x","stridedSlice","string_or_numeric")},h={begin:t,end:n,strides:o,beginMask:i,endMask:u,ellipsisMask:l,newAxisMask:c,shrinkAxisMask:d};return r.BV.runKernel(a.m2,p,h)}})},827:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({sub_:function(e,t){let n=(0,o._1)(e,"a","sub"),i=(0,o._1)(t,"b","sub");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.Tr,u)}})},5475:(e,t,n)=>{"use strict";n.d(t,{S:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(2271);const i=(0,n(2668).op)({sum_:function(e,t=null,n=!1){let i=(0,s._1)(e,"x","sum");"bool"===i.dtype&&(i=(0,o.p)(i,"int32"));const u={x:i},l={axis:t,keepDims:n};return r.BV.runKernel(a.GB,u,l)}})},1173:(e,t,n)=>{"use strict";n.d(t,{O:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({tan_:function(e){const t={x:(0,s._1)(e,"x","tan")};return r.BV.runKernel(a.sE,t)}})},1869:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({tanh_:function(e){const t={x:(0,s._1)(e,"x","tanh")};return r.BV.runKernel(a.MI,t)}})},701:(e,t,n)=>{"use strict";n.d(t,{X:()=>s});var r=n(3740),a=n(7852);function s(e,t,n){const s=(0,r.C)(e,n);return(0,a.H)(e,t,s,n)}},6092:(e,t,n)=>{"use strict";n.d(t,{R:()=>o});var r=n(3740),a=n(569),s=n(7852);function o(e,t){(0,a.Cq)(e);const n=(0,r.C)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return(0,s.H)(e,null,n,t)}},9906:(e,t,n)=>{"use strict";n.d(t,{w:()=>o});var r=n(3740),a=n(569),s=n(7852);function o(e,t,n){if((0,a.Cq)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const o=(0,r.C)(e,n);if(3!==o.length&&1!==o.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===o.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,s.H)(e,t,o,n)}},7852:(e,t,n)=>{"use strict";n.d(t,{H:()=>o});var r=n(7097),a=n(569),s=n(9122);function o(e,t,n,o){if(null==o&&(o=(0,a.D2)(e)),"complex64"===o)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!(0,a.fU)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){(0,a.Mu)(t);const e=(0,a.NA)(t),r=(0,a.NA)(n);(0,a.hu)(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==(0,a.NA)(t.slice(e));(0,a.hu)(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return(0,a.fU)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==o?(0,s.toTypedArray)(e,o):(0,a.xH)(e,[],!0),r.BV.makeTensor(e,t,o)}},7501:(e,t,n)=>{"use strict";n.d(t,{G:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({tile_:function(e,t){const n=(0,s._1)(e,"x","tile","string_or_numeric");o.hu(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const i={x:n},u={reps:t};return r.BV.runKernel(a.n9,i,u)}})},3243:(e,t,n)=>{"use strict";n.d(t,{h:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({topk_:function(e,t=1,n=!0){const o=(0,s._1)(e,"x","topk");if(0===o.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const i=o.shape[o.shape.length-1];if(t>i)throw new Error(`'k' passed to topk() must be <= the last dimension (${i}) but got `+t);const u={x:o},l={k:t,sorted:n},[c,d]=r.BV.runKernel(a.cW,u,l);return{values:c,indices:d}}})},9065:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({transpose_:function(e,t){const n=(0,s._1)(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),o.hu(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{o.hu(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+t))})),n.rank<=1)return n.clone();const i={x:n},u={perm:t};return r.BV.runKernel(a.G3,i,u)}})},3596:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(2657),a=n(2668),s=n(6845);const o=(0,a.op)({truncatedNormal_:function(e,t=0,n=1,a,o){if(null!=a&&"bool"===a)throw new Error("Unsupported data type $ { dtype }");const i=new s.Yi(t,n,a,!0,o),u=(0,r.f)(e,a);for(let e=0;e<u.values.length;e++)u.values[e]=i.nextValue();return u.toTensor()}})},9608:(e,t,n)=>{"use strict";n.d(t,{T:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({unique_:function(e,t=0){const n=(0,s._1)(e,"x","unique","string_or_numeric");(0,o.hu)(n.rank>0,(()=>"The input tensor must be at least 1D"));const i={x:n},u={axis:t},[l,c]=r.BV.runKernel(a.kp,i,u);return{values:l,indices:c}}})},4136:(e,t,n)=>{"use strict";n.d(t,{H:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({unstack_:function(e,t=0){const n=(0,s._1)(e,"x","unstack","string_or_numeric");o.hu(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const i={value:n},u={axis:t};return r.BV.runKernel(a.To,i,u)}})},5912:(e,t,n)=>{"use strict";n.d(t,{a:()=>u});var r=n(7097),a=n(9121),s=n(3740),o=n(8247),i=n(2200);const u=(0,n(2668).op)({where_:function(e,t,n){const u=(0,s._1)(t,"a","where"),l=(0,s._1)(n,"b","where"),c=(0,s._1)(e,"condition","where","bool"),d=(0,i.$N)((0,i.$N)(c.shape,u.shape),l.shape),p={condition:(0,o.U)(c,d),t:(0,o.U)(u,d),e:(0,o.U)(l,d)};return r.BV.runKernel(a.Ph,p)}})},6380:(e,t,n)=>{"use strict";n.d(t,{i:()=>s});var r=n(8333),a=n(3740);const s=async function(e){const t=(0,a._1)(e,"condition","whereAsync","bool"),n=await t.data(),s=(0,r.Z)(t.shape,n);return e!==t&&t.dispose(),s}},9640:(e,t,n)=>{"use strict";n.d(t,{l:()=>o});var r=n(7097),a=n(569),s=n(1661);function o(e,t="float32"){if("complex64"===t){const t=o(e,"float32"),n=o(e,"float32");return(0,s.P)(t,n)}const n=(0,a.wT)((0,a.NA)(e),t);return r.BV.makeTensor(n,e,t)}},6577:(e,t,n)=>{"use strict";n.d(t,{P:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({zerosLike_:function(e){const t={x:(0,s._1)(e,"x","zerosLike")};return r.BV.runKernel(a.Ru,t)}})},4077:(e,t,n)=>{"use strict";n.d(t,{es:()=>b,YD:()=>d,_w:()=>x,FZ:()=>y,Vp:()=>g,Vi:()=>m});var r=n(5938),a=n(569);function s(e,t,n,r){const s=(0,a.e3)(t),i=function(e,t,n,r){const s=(0,a.NA)(t),i=r[r.length-1],u=new Array(i).fill(0),c=t.length,d="complex64"===n?l(e):e;if(c>1)for(let e=0;e<s/i;e++){const t=e*i;for(let e=0;e<i;e++)u[e]=Math.max(u[e],o(d[t+e],0,n).length)}return u}(e,t,n,s),c=t.length,d=u(e,t,n,s,i),p=["Tensor"];return r&&(p.push("  dtype: "+n),p.push("  rank: "+c),p.push(`  shape: [${t}]`),p.push("  values:")),p.push(d.map((e=>"    "+e)).join("\n")),p.join("\n")}function o(e,t,n){let r;return r=Array.isArray(e)?parseFloat(e[0].toFixed(7))+" + "+parseFloat(e[1].toFixed(7))+"j":(0,a.HD)(e)?`'${e}'`:"bool"===n?i(e):parseFloat(e.toFixed(7)).toString(),(0,a.oj)(r,t)}function i(e){return 0===e?"false":"true"}function u(e,t,n,r,a,s=!0){const c="complex64"===n?2:1,d=t[0],p=t.length;if(0===p)return"complex64"===n?[o(l(e)[0],0,n)]:"bool"===n?[i(e[0])]:[e[0].toString()];if(1===p){if(d>20){const t=3*c;let r=Array.from(e.slice(0,t)),s=Array.from(e.slice((d-3)*c,d*c));return"complex64"===n&&(r=l(r),s=l(s)),["["+r.map(((e,t)=>o(e,a[t],n))).join(", ")+", ..., "+s.map(((e,t)=>o(e,a[d-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?l(e):Array.from(e)).map(((e,t)=>o(e,a[t],n))).join(", ")+"]"]}const h=t.slice(1),f=r.slice(1),m=r[0]*c,g=[];if(d>20){for(let t=0;t<3;t++){const r=t*m,s=r+m;g.push(...u(e.slice(r,s),h,n,f,a,!1))}g.push("...");for(let t=d-3;t<d;t++){const r=t*m,s=r+m;g.push(...u(e.slice(r,s),h,n,f,a,t===d-1))}}else for(let t=0;t<d;t++){const r=t*m,s=r+m;g.push(...u(e.slice(r,s),h,n,f,a,t===d-1))}const y=2===p?",":"";g[0]="["+g[0]+y;for(let e=1;e<g.length-1;e++)g[e]=" "+g[e]+y;let b=",\n";for(let e=2;e<p;e++)b+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(s?"":b),g}function l(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var c=n(9122);class d{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=a.NA(e),null!=n){const e=n.length;a.hu(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||a.rQ(t,this.size),this.strides=(0,a.e3)(e)}set(e,...t){0===t.length&&(t=[0]),a.hu(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=`+this.shape;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return p().makeTensor(this.values,this.shape,this.dtype)}}let p=null,h=null,f=null;function m(e){p=e}function g(e){h=e}function y(e){f=e}class b{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=a.NA(e),this.strides=(0,a.e3)(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return h.buffer(this.shape,this.dtype,e)}bufferSync(){return h.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return(0,a.GX)(this.shape,e,"complex64"===this.dtype)}arraySync(){return(0,a.GX)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=p().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>c.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=p().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>c.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await p().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(p().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return h.print(this,e)}clone(){return this.throwIfDisposed(),h.clone(this)}toString(e=!1){return s(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),h.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),p().makeVariable(this,e,t,n)}}Object.defineProperty(b,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),(0,r.R)("Tensor",(()=>b));class x extends b{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!a.cO(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);p().disposeTensor(this),this.dataId=e.dataId,p().incRef(this,null)}dispose(){p().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(x,Symbol.hasInstance,{value:e=>e instanceof b&&null!=e.assign&&e.assign instanceof Function})},747:(e,t,n)=>{"use strict";n.r(t),n.d(t,{makeTypesMatch:()=>o,assertTypesMatch:()=>i,isTensorInList:()=>u,getTensorsInContainer:()=>l});var r=n(4077),a=n(1221),s=n(569);function o(e,t){if(e.dtype===t.dtype)return[e,t];const n=(0,a.x8)(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function i(e,t){(0,s.hu)(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function u(e,t){return t.some((t=>t.id===e.id))}function l(e){const t=[];return c(e,t,new Set),t}function c(e,t,n){if(null==e)return;if(e instanceof r.es)return void t.push(e);if(a=e,!Array.isArray(a)&&"object"!=typeof a)return;var a;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),c(r,t,n))}}},3740:(e,t,n)=>{"use strict";n.d(t,{C:()=>u,_1:()=>d,sI:()=>p});var r=n(7097),a=n(2885),s=n(4077),o=n(569),i=n(9122);function u(e,t){let n=e;if((0,o.fU)(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||(0,o.fU)(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&(0,a.OB)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&l(e,r,[]),r}function l(e,t,n){if(n=n||[],!Array.isArray(e)&&!(0,o.fU)(e))return void(0,o.hu)(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));(0,o.hu)(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),(0,o.hu)(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)l(e[t],r,n.concat(t))}function c(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function d(e,t,n,a="numeric"){if(e instanceof s.es)return c(a,e.dtype,t,n),e;let l=(0,o.D2)(e);if("string"!==l&&["bool","int32","float32"].indexOf(a)>=0&&(l=a),c(a,l,t,n),null==e||!(0,o.fU)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const d=u(e,l);(0,o.fU)(e)||Array.isArray(e)||(e=[e]);const p="string"!==l?(0,i.toTypedArray)(e,l):(0,o.xH)(e,[],!0);return r.BV.makeTensor(p,d,l)}function p(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,a)=>d(e,`${t}[${a}]`,n,r)))}},1221:(e,t,n)=>{"use strict";var r,a,s,o,i;n.d(t,{yw:()=>r,x8:()=>l,z4:()=>c}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(r||(r={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(a||(a={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(s||(s={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(o||(o={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(i||(i={}));const u={float32:o,int32:a,bool:s,complex64:i};function l(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return u[e][t]}function c(e){return l(e,"int32")}},9122:(e,t,n)=>{"use strict";n.r(t),n.d(t,{arraysEqual:()=>a.cO,assert:()=>a.hu,assertNonNegativeIntegerDimensions:()=>a.Mu,assertNonNull:()=>a.Cq,assertShapesMatch:()=>a.k5,bytesFromStringArray:()=>a.Ub,bytesPerElement:()=>a.bT,checkConversionForErrors:()=>a.D5,clamp:()=>a.uZ,computeStrides:()=>a.e3,createScalarValue:()=>x,createShuffledIndices:()=>a.U$,decodeString:()=>N,distSquared:()=>a.E7,encodeString:()=>I,fetch:()=>w,fingerPrint64:()=>b,flatten:()=>a.xH,getArrayFromDType:()=>a.rQ,getTypedArrayFromDType:()=>a.WP,hasEncodingLoss:()=>a.QB,hexToLong:()=>i,indexToLoc:()=>a.NE,inferDtype:()=>a.D2,inferFromImplicitShape:()=>a.JZ,isBoolean:()=>a.jn,isFunction:()=>a.mf,isInt:()=>a.GN,isNumber:()=>a.hj,isPromise:()=>a.tI,isScalarShape:()=>a.N9,isString:()=>a.HD,isTypedArray:()=>a.fU,isValidDtype:()=>a.LP,locToIndex:()=>a.qy,makeOnesTypedArray:()=>a.p8,makeZerosNestedTypedArray:()=>a.l6,makeZerosTypedArray:()=>a.wT,nearestDivisor:()=>a.jP,nearestLargerEven:()=>a.nY,now:()=>k,parseAxisParam:()=>a.EC,randUniform:()=>a.bj,repeatedTry:()=>a.WD,rightPad:()=>a.oj,shuffle:()=>a.TV,shuffleCombo:()=>a.d7,sizeFromShape:()=>a.NA,sizeToSquarishShape:()=>a.YP,squeezeShape:()=>a.bp,sum:()=>a.Sm,tanh:()=>a.AE,toNestedArray:()=>a.GX,toTypedArray:()=>v});var r=n(2885),a=n(569),s=n(3720);const o=n.n(s)()||s;function i(e){return o.fromString(e,!0,16)}const u=i("c3a5c85c97cb3127"),l=i("b492b66fbe98f273"),c=i("9ae16a3b2f90404f");function d(e){return e.xor(e.shru(47))}function p(e,t,n){const r=e.slice(t,t+n);return o.fromBytes(Array.from(r),!0,!0)}function h(e,t){return p(e,t,8)}function f(e,t){return p(e,t,4)}function m(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function g(e,t,n=i("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let a=t.xor(r).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function y(e,t,n,r){return function(e,t,n,r,a,s){a=a.add(e),s=m(s.add(a).add(r),21);const o=a;return a=(a=a.add(t)).add(n),s=s.add(m(a,44)),[a.add(r),s.add(o)]}(h(e,t),h(e,t+8),h(e,t+16),h(e,t+24),n,r)}function b(e,t=e.length){const n=o.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=c.add(2*t),r=h(e,0).add(c),a=h(e,t-8);return g(m(a,37).mul(n).add(r),m(r,25).add(a).mul(n),n)}if(t>=4){const n=c.add(2*t);return g(f(e,0).shl(3).add(t),f(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return d(c.mul(n).xor(u.mul(r))).mul(c)}return c}(e,t):function(e,t=e.length){const n=c.add(2*t),r=h(e,0).mul(l),a=h(e,8),s=h(e,t-8).mul(n),o=h(e,t-16).mul(c);return g(m(r.add(a),43).add(m(s,30)).add(o),r.add(m(a.add(c),18)).add(s),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=c.add(2*t),r=h(e,0).mul(c),a=h(e,8),s=h(e,t-8).mul(n),o=h(e,t-16).mul(c),i=m(r.add(a),43).add(m(s,30)).add(o),u=g(i,r.add(m(a.add(c),18)).add(s),n),l=h(e,16).mul(n),d=h(e,24),p=i.add(h(e,t-32)).mul(n),f=u.add(h(e,t-24)).mul(n);return g(m(l.add(d),43).add(m(p,30)).add(f),l.add(m(d.add(r),18)).add(p),n)}(e,t);let r=n,a=n.mul(l).add(113),s=d(a.mul(c).add(113)).mul(c),i=[o.UZERO,o.UZERO],p=[o.UZERO,o.UZERO];r=r.mul(c).add(h(e,0));let b=0;const x=64*(t-1>>6),v=x+(t-1&63)-63;do{r=m(r.add(a).add(i[0]).add(h(e,b+8)),37).mul(l),a=m(a.add(i[1]).add(h(e,b+48)),42).mul(l),r=r.xor(p[1]),a=a.add(i[0]).add(h(e,b+40)),s=m(s.add(p[0]),33).mul(l),i=y(e,b,i[1].mul(l),r.add(p[0])),p=y(e,b+32,s.add(p[1]),a.add(h(e,b+16))),[s,r]=[r,s],b+=64}while(b!==x);const k=l.add(s.and(255).shl(1));return b=v,p[0]=p[0].add(t-1&63),i[0]=i[0].add(p[0]),p[0]=p[0].add(i[0]),r=m(r.add(a).add(i[0]).add(h(e,b+8)),37).mul(k),a=m(a.add(i[1]).add(h(e,b+48)),42).mul(k),r=r.xor(p[1].mul(9)),a=a.add(i[0].mul(9).add(h(e,b+40))),s=m(s.add(p[0]),33).mul(k),i=y(e,b,i[1].mul(k),r.add(p[0])),p=y(e,b+32,s.add(p[1]),a.add(h(e,b+16))),[s,r]=[r,s],g(g(i[0],p[0],k).add(d(a).mul(u)).add(s),g(i[1],p[1],k).add(r),k)}function x(e,t){return"string"===t?I(e):v([e],t)}function v(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=a.xH(e)),(0,r.OB)().getBool("DEBUG")&&a.D5(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error("Unknown data type "+t)}function k(){return(0,r.OB)().platform.now()}function w(e,t){return(0,r.OB)().platform.fetch(e,t)}function I(e,t="utf-8"){return t=t||"utf-8",(0,r.OB)().platform.encode(e,t)}function N(e,t="utf-8"){return t=t||"utf-8",(0,r.OB)().platform.decode(e,t)}},569:(e,t,n)=>{"use strict";function r(e){let t=e.length,n=0,r=0;for(;t>0;)r=Math.random()*t|0,t--,n=e[t],e[t]=e[r],e[r]=n}function a(e,t){if(e.length!==t.length)throw new Error("Array sizes must match to be shuffled together First array length was "+e.length+"Second array length was "+t.length);let n,r,a=e.length,s=0;for(;a>0;)s=Math.random()*a|0,a--,n=e[a],r=t[a],e[a]=e[s],t[a]=t[s],e[s]=n,t[s]=r}function s(e,t,n){return Math.max(e,Math.min(t,n))}function o(e){return e%2==0?e:e+1}function i(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function u(e,t){const n=Math.random();return t*n+(1-n)*e}function l(e,t){let n=0;for(let r=0;r<e.length;r++){const a=Number(e[r])-Number(t[r]);n+=a*a}return n}function c(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function d(e,t,n=""){c(g(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function p(e){c(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function h(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||A(e)&&!n)for(let r=0;r<e.length;++r)h(e[r],t,n);else t.push(e);return t}function f(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function m(e){return 0===e.length}function g(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function y(e){return e%1==0}function b(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function x(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function v(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return r(t),t}function k(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function w(e,t=(e=>0),n){return new Promise(((r,a)=>{let s=0;const o=()=>{if(e())return void r();s++;const i=t(s);null!=n&&s>=n?a():setTimeout(o,i)};o()}))}function I(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[r]=t/n,a}function N(e,t){const n=t.length;return c((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+e)),c(e.every((e=>y(e))),(()=>"All values in axis param must be integers but got axis "+e)),e.map((e=>e<0?n+e:e))}function T(e,t){const n=[],r=[],a=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||a?null:N(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[o]||s[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),s[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function S(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error("Unknown data type "+e);n=new Uint8Array(t)}return n}function C(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error("Unknown data type "+e);n=new Array(t)}return n}function E(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function _(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function $(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function A(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function R(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error("Unknown dtype "+e)}function F(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function O(e){return"string"==typeof e||e instanceof String}function D(e){return"boolean"==typeof e}function M(e){return"number"==typeof e}function B(e){return Array.isArray(e)?B(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":M(e)?"float32":O(e)?"string":D(e)?"bool":"float32"}function P(e){return!!(e&&e.constructor&&e.call&&e.apply)}function L(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function V(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function z(e,t,n,r=!1){const a=new Array;if(1===t.length){const s=t[0]*(r?2:1);for(let t=0;t<s;t++)a[t]=n[e+t]}else{const s=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<s;t++)a[t]=z(e+t*i,o,n,r)}return a}function W(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return z(0,e,t,n)}function U(e,t){const n=G(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function G(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error("Unknown data type "+t)}function H(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return W(e,new Float32Array(n));if("int32"===t)return W(e,new Int32Array(n));if("bool"===t)return W(e,new Uint8Array(n));throw new Error("Unknown data type "+t)}function X(e){e.forEach((t=>{c(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function q(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function j(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function K(e){return e&&e.then&&"function"==typeof e.then}n.d(t,{TV:()=>r,d7:()=>a,uZ:()=>s,nY:()=>o,Sm:()=>i,bj:()=>u,E7:()=>l,hu:()=>c,k5:()=>d,Cq:()=>p,xH:()=>h,NA:()=>f,N9:()=>m,cO:()=>g,GN:()=>y,AE:()=>b,YP:()=>x,U$:()=>v,oj:()=>k,WD:()=>w,JZ:()=>I,EC:()=>N,bp:()=>T,WP:()=>S,rQ:()=>C,D5:()=>E,LP:()=>_,QB:()=>$,fU:()=>A,bT:()=>R,Ub:()=>F,HD:()=>O,jn:()=>D,hj:()=>M,D2:()=>B,mf:()=>P,jP:()=>L,e3:()=>V,GX:()=>W,p8:()=>U,wT:()=>G,l6:()=>H,Mu:()=>X,qy:()=>q,NE:()=>j,tI:()=>K})},7559:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),a(n(6969),t)},6969:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DR=t.Dt=void 0;var n=function(e,t,n){this.textures=new Array,this.locations=new Map,this.framebuffer=e.createFramebuffer(),this.renderbuffer=e.createRenderbuffer(),this.texture=e.createTexture(),this.textures=t,this.uniforms=n};t.Dt=n;var r=function(){function e(e,t,n,r){void 0===r&&(r={}),this.canvas=e,this.cU=r,this.frameCount=0,this.header="#version 300 es\n    #ifdef GL_ES\n    precision highp float;\n    precision highp int;\n    precision mediump sampler3D;\n    #endif\n    ",this.targets=new Map,this.mainUniforms=new Map,this.programs=new Map,this.textureCache=new Map;var a,s=e.getContext("webgl2",{preserveDrawingBuffer:!0}),o=0;for(var i in s)"function"==typeof s[i]&&(s[a=(a=(255&o++).toString(16)).match(/^[0-9].*$/)?"x"+a:a]=s[i]);this.gl=s;var u=s.createProgram();if(this.mainProgram=u,s.viewport(0,0,e.width,e.height),this.buffer=s.createBuffer(),this.surfaceBuffer=s.createBuffer(),this.cS(u,35633,this.header+t),this.cS(u,35632,this.header+n),s.linkProgram(u),s.validateProgram(u),!s.getProgramParameter(u,s.LINK_STATUS))throw"Could not compile WebGL program. \n\n"+s.getProgramInfoLog(u);for(s.useProgram(u),i=0;i<s.getProgramParameter(u,s.ACTIVE_UNIFORMS);++i){var l=s.getActiveUniform(u,i);this.mainUniforms.set(l.name,s.getUniformLocation(u,l.name))}this.screenVertexPosition=s.getAttribLocation(u,"pos"),s.enableVertexAttribArray(this.screenVertexPosition),s.bindBuffer(34962,this.buffer),s.bufferData(34962,new Float32Array([-1,-1,1,-1,-1,1,1,-1,1,1,-1,1]),35044)}return e.prototype.cS=function(e,t,n){var r=this.gl,a=r.createShader(t);if(r.shaderSource(a,n),r.compileShader(a),r.attachShader(e,a),!r.getShaderParameter(a,35713))throw r.getShaderInfoLog(a).trim().split("\n").forEach((function(e){return console.error("[shader] "+e)})),new Error("Error while compiling vertex/fragment"+n)},e.prototype.aP=function(e){var t=this.gl.createProgram();return this.programs.set(e,t),t},e.prototype.t=function(e,t){var n=this.gl,r=n.createTexture();return n.activeTexture(t),n.bindTexture(3553,r),e instanceof Image?n.texImage2D(3553,0,6408,6408,5121,e):n.texImage2D(n.TEXTURE_2D,0,n.RGBA,1,1,0,n.RGBA,n.UNSIGNED_BYTE,e),n.generateMipmap(3553),r},e.prototype.tC=function(e,t){var n=this.gl,r=n.createTexture();return n.activeTexture(t),n.bindTexture(n.TEXTURE_CUBE_MAP,r),Promise.all(e.map((function(e){return t=e.d,n=e.t,new Promise((function(e,r){var a=new Image;a.dataset.key=n,a.onerror=r,a.onload=function(){e(a)},a.src=t}));var t,n}))).then((function(e){e.forEach((function(e){var t=e.dataset.key,a=n.RGBA,s=n.RGBA,o=n.UNSIGNED_BYTE;n.texImage2D(t,0,a,512,512,0,s,o,null),n.bindTexture(n.TEXTURE_CUBE_MAP,r),n.texImage2D(t,0,a,s,o,e),n.generateMipmap(n.TEXTURE_CUBE_MAP)}))})),n.generateMipmap(n.TEXTURE_CUBE_MAP),n.texParameteri(n.TEXTURE_CUBE_MAP,n.TEXTURE_MIN_FILTER,n.LINEAR_MIPMAP_LINEAR),r},e.prototype.aA=function(e,t){var n=this,r=function(e,t,r,a){n.textureCache.set(e,{unit:t,src:r,fn:a})};return Promise.all(Object.keys(e).map((function(t){return function(e,t){var a=t.unit;return new Promise((function(s){if(t.src)if(Array.isArray(t.src))r(e,a,n.tC(t.src,a),t.fn),s(e);else{var o=new Image;o.onload=function(t){r(e,a,n.t(o,a),null),s(e)},o.src=t.src}else r(e,a,n.t(new Uint8Array(1024),a),t.fn),s(e)}))}(t,e[t])}))).then((function(e){t(e)})).catch((function(){})),this},e.prototype.aB=function(e,t,n,r,a){var s=this,o=this.gl,i=this.cT(this.canvas.width,this.canvas.height,r||[],a||{}),u=this.cT(this.canvas.width,this.canvas.height,r||[],a||{});this.targets.set(e,i),this.targets.set("_"+e,u);var l=this.aP(e);if(this.cS(l,35633,this.header+t),this.cS(l,35632,this.header+n),o.linkProgram(l),o.validateProgram(l),!o.getProgramParameter(l,o.LINK_STATUS))throw"Could not compile WebGL program. \n\n"+o.getProgramInfoLog(l);o.useProgram(l),r&&r.forEach((function(e){o.bindTexture(3553,s.textureCache.get(e).src)})),this.vertexPosition=o.getAttribLocation(l,"pos"),o.enableVertexAttribArray(this.vertexPosition);for(var c=0;c<o.getProgramParameter(l,o.ACTIVE_UNIFORMS);++c){var d=o.getActiveUniform(l,c);i.locations.set(d.name,o.getUniformLocation(l,d.name))}return this},e.prototype.R=function(e){var t=this,n=this.gl,r=this.mainProgram,a=0;this.programs.forEach((function(r,s){n.useProgram(r);var o=t.targets.get(s),i=t.targets.get("_"+s);n.uniform2f(o.locations.get("resolution"),t.canvas.width,t.canvas.height),n.uniform1f(o.locations.get("time"),e),n.uniform1f(o.locations.get("frame"),t.frameCount);var u=o.uniforms;u&&Object.keys(u).forEach((function(t){u[t](o.locations.get(t),n,r,e)}));var l=n.getUniformLocation(r,s);n.uniform1i(l,0),n.activeTexture(n.TEXTURE0),n.bindTexture(n.TEXTURE_2D,i.texture),o.textures.forEach((function(e,s){var o=t.textureCache.get(e);n.activeTexture(o.unit),n.bindTexture(n.TEXTURE_2D,o.src),o.fn&&o.fn(r,n,o.src);var i=n.getUniformLocation(r,e);n.uniform1i(i,s+1),a++})),n.bindBuffer(34962,t.surfaceBuffer),n.vertexAttribPointer(0,2,5126,!1,0,0),n.bindBuffer(34962,t.buffer),n.vertexAttribPointer(0,2,5126,!1,0,0),n.bindFramebuffer(36160,o.framebuffer),n.clear(16640),n.drawArrays(4,0,6),o=i=o})),n.useProgram(r),n.uniform2f(this.mainUniforms.get("resolution"),this.canvas.width,this.canvas.height),n.uniform1f(this.mainUniforms.get("time"),e),Object.keys(this.cU).forEach((function(a){t.cU[a](n.getUniformLocation(r,a),n,r,e)})),n.bindBuffer(34962,this.buffer),n.vertexAttribPointer(0,2,5126,!1,0,0),this.targets.forEach((function(e,t){n.uniform1i(n.getUniformLocation(r,t),a),n.activeTexture(33984+a),n.bindTexture(3553,e.texture),a++})),n.bindFramebuffer(36160,null),n.clear(16640),n.drawArrays(4,0,6),this.frameCount++},e.prototype.cT=function(e,t,r,a){var s=this.gl,o=new n(s,r,a);return s.bindTexture(3553,o.texture),s.texImage2D(3553,0,6408,e,t,0,6408,5121,null),s.texParameteri(3553,10242,33071),s.texParameteri(3553,10243,33071),s.texParameteri(3553,10240,9728),s.texParameteri(3553,10241,9728),s.bindFramebuffer(36160,o.framebuffer),s.framebufferTexture2D(36160,36064,3553,o.texture,0),s.bindRenderbuffer(36161,o.renderbuffer),s.renderbufferStorage(36161,33189,e,t),s.framebufferRenderbuffer(36160,36096,36161,o.renderbuffer),s.bindTexture(3553,null),s.bindRenderbuffer(36161,null),s.bindFramebuffer(36160,null),o},e.prototype.run=function(e,t){var n=this,r=performance.now(),a=1e3/t,s=0,o=function(e){requestAnimationFrame(o),(s=e-r)>a&&(r=e-s%a,n.R(r/1e3))};return o(0|e),this},e.gT=function(t,n,r,a,s,o){var i=document.createElement("canvas");i.width=s,i.height=o;var u=new e(i,t,n);u.aB("A",r,a);for(var l=0;l<2;l++)u.R(l);return i},e}();t.DR=r},3720:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function r(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=r;var a={},s={};function o(e,t){var n,r,o;return t?(o=0<=(e>>>=0)&&e<256)&&(r=s[e])?r:(n=u(e,(0|e)<0?-1:0,!0),o&&(s[e]=n),n):(o=-128<=(e|=0)&&e<128)&&(r=a[e])?r:(n=u(e,e<0?-1:0,!1),o&&(a[e]=n),n)}function i(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=h)return w}else{if(e<=-f)return I;if(e+1>=f)return k}return e<0?i(-e,t).neg():u(e%p|0,e/p|0,t)}function u(e,t,r){return new n(e,t,r)}n.fromInt=o,n.fromNumber=i,n.fromBits=u;var l=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return c(e.substring(1),t,n).neg();for(var a=i(l(n,8)),s=g,o=0;o<e.length;o+=8){var u=Math.min(8,e.length-o),d=parseInt(e.substring(o,o+u),n);if(u<8){var p=i(l(n,u));s=s.mul(p).add(i(d))}else s=(s=s.mul(a)).add(i(d))}return s.unsigned=t,s}function d(e,t){return"number"==typeof e?i(e,t):"string"==typeof e?c(e,t):u(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=d;var p=4294967296,h=p*p,f=h/2,m=o(1<<24),g=o(0);n.ZERO=g;var y=o(0,!0);n.UZERO=y;var b=o(1);n.ONE=b;var x=o(1,!0);n.UONE=x;var v=o(-1);n.NEG_ONE=v;var k=u(-1,2147483647,!1);n.MAX_VALUE=k;var w=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=w;var I=u(0,-2147483648,!1);n.MIN_VALUE=I;var N=n.prototype;N.toInt=function(){return this.unsigned?this.low>>>0:this.low},N.toNumber=function(){return this.unsigned?(this.high>>>0)*p+(this.low>>>0):this.high*p+(this.low>>>0)},N.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=i(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var a=i(l(e,6),this.unsigned),s=this,o="";;){var u=s.div(a),c=(s.sub(u.mul(a)).toInt()>>>0).toString(e);if((s=u).isZero())return c+o;for(;c.length<6;)c="0"+c;o=""+c+o}},N.getHighBits=function(){return this.high},N.getHighBitsUnsigned=function(){return this.high>>>0},N.getLowBits=function(){return this.low},N.getLowBitsUnsigned=function(){return this.low>>>0},N.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},N.isZero=function(){return 0===this.high&&0===this.low},N.eqz=N.isZero,N.isNegative=function(){return!this.unsigned&&this.high<0},N.isPositive=function(){return this.unsigned||this.high>=0},N.isOdd=function(){return 1==(1&this.low)},N.isEven=function(){return 0==(1&this.low)},N.equals=function(e){return r(e)||(e=d(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},N.eq=N.equals,N.notEquals=function(e){return!this.eq(e)},N.neq=N.notEquals,N.ne=N.notEquals,N.lessThan=function(e){return this.comp(e)<0},N.lt=N.lessThan,N.lessThanOrEqual=function(e){return this.comp(e)<=0},N.lte=N.lessThanOrEqual,N.le=N.lessThanOrEqual,N.greaterThan=function(e){return this.comp(e)>0},N.gt=N.greaterThan,N.greaterThanOrEqual=function(e){return this.comp(e)>=0},N.gte=N.greaterThanOrEqual,N.ge=N.greaterThanOrEqual,N.compare=function(e){if(r(e)||(e=d(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},N.comp=N.compare,N.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(b)},N.neg=N.negate,N.add=function(e){r(e)||(e=d(e));var t=this.high>>>16,n=65535&this.high,a=this.low>>>16,s=65535&this.low,o=e.high>>>16,i=65535&e.high,l=e.low>>>16,c=0,p=0,h=0,f=0;return h+=(f+=s+(65535&e.low))>>>16,p+=(h+=a+l)>>>16,c+=(p+=n+i)>>>16,c+=t+o,u((h&=65535)<<16|(f&=65535),(c&=65535)<<16|(p&=65535),this.unsigned)},N.subtract=function(e){return r(e)||(e=d(e)),this.add(e.neg())},N.sub=N.subtract,N.multiply=function(e){if(this.isZero())return g;if(r(e)||(e=d(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(I))return e.isOdd()?I:g;if(e.eq(I))return this.isOdd()?I:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return i(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,a=65535&this.high,s=this.low>>>16,o=65535&this.low,l=e.high>>>16,c=65535&e.high,p=e.low>>>16,h=65535&e.low,f=0,y=0,b=0,x=0;return b+=(x+=o*h)>>>16,y+=(b+=s*h)>>>16,b&=65535,y+=(b+=o*p)>>>16,f+=(y+=a*h)>>>16,y&=65535,f+=(y+=s*p)>>>16,y&=65535,f+=(y+=o*c)>>>16,f+=n*h+a*p+s*c+o*l,u((b&=65535)<<16|(x&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},N.mul=N.multiply,N.divide=function(e){if(r(e)||(e=d(e)),e.isZero())throw Error("division by zero");var n,a,s;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return x;s=y}else{if(this.eq(I))return e.eq(b)||e.eq(v)?I:e.eq(I)?b:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:v:(a=this.sub(e.mul(n)),s=n.add(a.div(e)));if(e.eq(I))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=g}for(a=this;a.gte(e);){n=Math.max(1,Math.floor(a.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(n)/Math.LN2),c=o<=48?1:l(2,o-48),p=i(n),h=p.mul(e);h.isNegative()||h.gt(a);)h=(p=i(n-=c,this.unsigned)).mul(e);p.isZero()&&(p=b),s=s.add(p),a=a.sub(h)}return s},N.div=N.divide,N.modulo=function(e){return r(e)||(e=d(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},N.mod=N.modulo,N.rem=N.modulo,N.not=function(){return u(~this.low,~this.high,this.unsigned)},N.and=function(e){return r(e)||(e=d(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},N.or=function(e){return r(e)||(e=d(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},N.xor=function(e){return r(e)||(e=d(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},N.shiftLeft=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},N.shl=N.shiftLeft,N.shiftRight=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},N.shr=N.shiftRight,N.shiftRightUnsigned=function(e){if(r(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned)},N.shru=N.shiftRightUnsigned,N.shr_u=N.shiftRightUnsigned,N.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},N.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},N.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},N.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},N.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},6243:e=>{if(!t)var t={map:function(e,t){var n={};return t?e.map((function(e,r){return n.index=r,t.call(n,e)})):e.slice()},naturalOrder:function(e,t){return e<t?-1:e>t?1:0},sum:function(e,t){var n={};return e.reduce(t?function(e,r,a){return n.index=a,e+t.call(n,r)}:function(e,t){return e+t},0)},max:function(e,n){return Math.max.apply(null,n?t.map(e,n):e)}};var n=function(){function e(e,t,n){return(e<<10)+(t<<5)+n}function n(e){var t=[],n=!1;function r(){t.sort(e),n=!0}return{push:function(e){t.push(e),n=!1},peek:function(e){return n||r(),void 0===e&&(e=t.length-1),t[e]},pop:function(){return n||r(),t.pop()},size:function(){return t.length},map:function(e){return t.map(e)},debug:function(){return n||r(),t}}}function r(e,t,n,r,a,s,o){var i=this;i.r1=e,i.r2=t,i.g1=n,i.g2=r,i.b1=a,i.b2=s,i.histo=o}function a(){this.vboxes=new n((function(e,n){return t.naturalOrder(e.vbox.count()*e.vbox.volume(),n.vbox.count()*n.vbox.volume())}))}function s(n,r){if(r.count()){var a=r.r2-r.r1+1,s=r.g2-r.g1+1,o=r.b2-r.b1+1,i=t.max([a,s,o]);if(1==r.count())return[r.copy()];var u,l,c,d,p=0,h=[],f=[];if(i==a)for(u=r.r1;u<=r.r2;u++){for(d=0,l=r.g1;l<=r.g2;l++)for(c=r.b1;c<=r.b2;c++)d+=n[e(u,l,c)]||0;p+=d,h[u]=p}else if(i==s)for(u=r.g1;u<=r.g2;u++){for(d=0,l=r.r1;l<=r.r2;l++)for(c=r.b1;c<=r.b2;c++)d+=n[e(l,u,c)]||0;p+=d,h[u]=p}else for(u=r.b1;u<=r.b2;u++){for(d=0,l=r.r1;l<=r.r2;l++)for(c=r.g1;c<=r.g2;c++)d+=n[e(l,c,u)]||0;p+=d,h[u]=p}return h.forEach((function(e,t){f[t]=p-e})),function(e){var t,n,a,s,o,i=e+"1",l=e+"2",c=0;for(u=r[i];u<=r[l];u++)if(h[u]>p/2){for(a=r.copy(),s=r.copy(),o=(t=u-r[i])<=(n=r[l]-u)?Math.min(r[l]-1,~~(u+n/2)):Math.max(r[i],~~(u-1-t/2));!h[o];)o++;for(c=f[o];!c&&h[o-1];)c=f[--o];return a[l]=o,s[i]=a[l]+1,[a,s]}}(i==a?"r":i==s?"g":"b")}}return r.prototype={volume:function(e){var t=this;return t._volume&&!e||(t._volume=(t.r2-t.r1+1)*(t.g2-t.g1+1)*(t.b2-t.b1+1)),t._volume},count:function(t){var n=this,r=n.histo;if(!n._count_set||t){var a,s,o,i=0;for(a=n.r1;a<=n.r2;a++)for(s=n.g1;s<=n.g2;s++)for(o=n.b1;o<=n.b2;o++)i+=r[e(a,s,o)]||0;n._count=i,n._count_set=!0}return n._count},copy:function(){var e=this;return new r(e.r1,e.r2,e.g1,e.g2,e.b1,e.b2,e.histo)},avg:function(t){var n=this,r=n.histo;if(!n._avg||t){var a,s,o,i,u=0,l=0,c=0,d=0;for(s=n.r1;s<=n.r2;s++)for(o=n.g1;o<=n.g2;o++)for(i=n.b1;i<=n.b2;i++)u+=a=r[e(s,o,i)]||0,l+=a*(s+.5)*8,c+=a*(o+.5)*8,d+=a*(i+.5)*8;n._avg=u?[~~(l/u),~~(c/u),~~(d/u)]:[~~(8*(n.r1+n.r2+1)/2),~~(8*(n.g1+n.g2+1)/2),~~(8*(n.b1+n.b2+1)/2)]}return n._avg},contains:function(e){var t=this,n=e[0]>>3;return gval=e[1]>>3,bval=e[2]>>3,n>=t.r1&&n<=t.r2&&gval>=t.g1&&gval<=t.g2&&bval>=t.b1&&bval<=t.b2}},a.prototype={push:function(e){this.vboxes.push({vbox:e,color:e.avg()})},palette:function(){return this.vboxes.map((function(e){return e.color}))},size:function(){return this.vboxes.size()},map:function(e){for(var t=this.vboxes,n=0;n<t.size();n++)if(t.peek(n).vbox.contains(e))return t.peek(n).color;return this.nearest(e)},nearest:function(e){for(var t,n,r,a=this.vboxes,s=0;s<a.size();s++)((n=Math.sqrt(Math.pow(e[0]-a.peek(s).color[0],2)+Math.pow(e[1]-a.peek(s).color[1],2)+Math.pow(e[2]-a.peek(s).color[2],2)))<t||void 0===t)&&(t=n,r=a.peek(s).color);return r},forcebw:function(){var e=this.vboxes;e.sort((function(e,n){return t.naturalOrder(t.sum(e.color),t.sum(n.color))}));var n=e[0].color;n[0]<5&&n[1]<5&&n[2]<5&&(e[0].color=[0,0,0]);var r=e.length-1,a=e[r].color;a[0]>251&&a[1]>251&&a[2]>251&&(e[r].color=[255,255,255])}},{quantize:function(o,i){if(!o.length||i<2||i>256)return!1;var u=function(t){var n,r,a,s,o=new Array(32768);return t.forEach((function(t){r=t[0]>>3,a=t[1]>>3,s=t[2]>>3,n=e(r,a,s),o[n]=(o[n]||0)+1})),o}(o);u.forEach((function(){}));var l=function(e,t){var n,a,s,o=1e6,i=0,u=1e6,l=0,c=1e6,d=0;return e.forEach((function(e){n=e[0]>>3,a=e[1]>>3,s=e[2]>>3,n<o?o=n:n>i&&(i=n),a<u?u=a:a>l&&(l=a),s<c?c=s:s>d&&(d=s)})),new r(o,i,u,l,c,d,t)}(o,u),c=new n((function(e,n){return t.naturalOrder(e.count(),n.count())}));function d(e,t){for(var n,r=1,a=0;a<1e3;)if((n=e.pop()).count()){var o=s(u,n),i=o[0],l=o[1];if(!i)return;if(e.push(i),l&&(e.push(l),r++),r>=t)return;if(a++>1e3)return}else e.push(n),a++}c.push(l),d(c,.75*i);for(var p=new n((function(e,n){return t.naturalOrder(e.count()*e.volume(),n.count()*n.volume())}));c.size();)p.push(c.pop());d(p,i-p.size());for(var h=new a;p.size();)h.push(p.pop());return h}}}();e.exports=n.quantize},6377:(e,t,n)=>{var r=n(4832),a=n(8652),s=n(801),o=n(2030),i=n(3618),u=n(9049),l=n(1971);l.alea=r,l.xor128=a,l.xorwow=s,l.xorshift7=o,l.xor4096=i,l.tychei=u,e.exports=l},4832:function(e,t,n){var r;!function(e,a,s){function o(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function i(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new o(e),r=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.alea=u}(0,e=n.nmd(e),n.amdD)},9049:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.tychei=u}(0,e=n.nmd(e),n.amdD)},8652:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xor128=u}(0,e=n.nmd(e),n.amdD)},3618:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this;t.next=function(){var e,n,r=t.w,a=t.X,s=t.i;return t.w=r=r+1640531527|0,n=a[s+34&127],e=a[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[s]=n^e,t.i=s,n+(r^r>>>16)|0},function(e,t){var n,r,a,s,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),a=0,s=-32;s<u;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(o=o+1640531527|0,a=0==(n=i[127&s]^=r+o)?a+1:0);for(a>=128&&(i[127&(t&&t.length||0)]=-1),a=127,s=512;s>0;--s)r=i[a+34&127],n=i[a=a+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[a]=r^n;e.w=o,e.X=i,e.i=a}(t,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&(r.X&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xor4096=u}(0,e=n.nmd(e),n.amdD)},2030:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this;t.next=function(){var e,n,r=t.x,a=t.i;return e=r[a],n=(e^=e>>>7)^e<<24,n^=(e=r[a+1&7])^e>>>10,n^=(e=r[a+3&7])^e>>>3,n^=(e=r[a+4&7])^e<<7,e=r[a+7&7],n^=(e^=e<<13)^e<<9,r[a]=n,t.i=a+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&(r.x&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xorshift7=u}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xorwow=u}(0,e=n.nmd(e),n.amdD)},1971:(e,t,n)=>{var r;!function(a,s){var o,i=this,u=256,l=s.pow(u,6),c=s.pow(2,52),d=2*c,p=255;function h(e,t,n){var r=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(a)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(u):(e=new Uint8Array(u),(i.crypto||i.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=i.navigator,n=t&&t.plugins;return[+new Date,i,n,i.screen,b(a)]}}():e,3),r),h=new f(r),x=function(){for(var e=h.g(6),t=l,n=0;e<c;)e=(e+n)*u,t*=u,n=h.g(1);for(;e>=d;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|h.g(4)},x.quick=function(){return h.g(4)/4294967296},x.double=x,y(b(h.S),a),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,h),e.state=function(){return m(h,{})}),n?(s.random=e,t):e})(x,p,"global"in t?t.global:this==s,t.state)}function f(e){var t,n=e.length,r=this,a=0,s=r.i=r.j=0,o=r.S=[];for(n||(e=[n++]);a<u;)o[a]=a++;for(a=0;a<u;a++)o[a]=o[s=p&s+e[a%n]+(t=o[a])],o[s]=t;(r.g=function(e){for(var t,n=0,a=r.i,s=r.j,o=r.S;e--;)t=o[a=p&a+1],n=n*u+o[p&(o[a]=o[s=p&s+t])+(o[s]=t)];return r.i=a,r.j=s,n})(u)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],a=typeof e;if(t&&"object"==a)for(n in e)try{r.push(g(e[n],t-1))}catch(e){}return r.length?r:"string"==a?e:e+"\0"}function y(e,t){for(var n,r=e+"",a=0;a<r.length;)t[p&a]=p&(n^=19*t[p&a])+r.charCodeAt(a++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(s.seedrandom=h,y(s.random(),a),e.exports){e.exports=h;try{o=n(3906)}catch(e){}}else void 0===(r=function(){return h}.call(t,n,t,e))||(e.exports=r)}([],Math)},852:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GreenScreenStream=t.GreenScreenMethod=void 0;const a=n(7559),s=r(n(6243)),o=n(7417);var i;n(9731),n(8912),function(e){e[e.Mask=0]="Mask",e[e.VirtualBackground=1]="VirtualBackground",e[e.VirtualBackgroundUsingGreenScreen=2]="VirtualBackgroundUsingGreenScreen"}(i=t.GreenScreenMethod||(t.GreenScreenMethod={})),t.GreenScreenStream=class{constructor(e,t,n,r){this.greenScreenMethod=e,this.canvas=t,this.chromaKey={r:0,g:.6941176470588235,b:.25098039215686274},this.maskRange={x:.0025,y:.26},this.mainFrag="uniform vec2 resolution;\n    uniform sampler2D A;\n    out vec4 fragColor;\n    void main(){\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        fragColor = texture(A, uv);\n    }",this.mainVert="layout(location = 0) in vec2 pos;\n    out vec4 fragColor;\n    void main() {\n        gl_Position = vec4(pos.xy,0.0,1.0);\n    }\n    ",this.bufferVert="layout(location = 0) in vec2 pos;\n    out vec4 fragColor;\n    void main() {\n        gl_Position = vec4(pos.xy,0.0,1.0);\n    }\n    ",this.bufferFrag="uniform float time;\n    uniform vec2 resolution;\n    uniform sampler2D webcam;\n    uniform sampler2D background;\n    uniform vec4 chromaKey;\n    uniform vec2 maskRange;\n    out vec4 fragColor;\n\n    mat4 RGBtoYUV = mat4(0.257,  0.439, -0.148, 0.0,\n        0.504, -0.368, -0.291, 0.0,\n        0.098, -0.071,  0.439, 0.0,\n        0.0625, 0.500,  0.500, 1.0 );\n\nfloat colorclose(vec3 yuv, vec3 keyYuv, vec2 tol)\n{\nfloat tmp = sqrt(pow(keyYuv.g - yuv.g, 2.0) + pow(keyYuv.b - yuv.b, 2.0));\nif (tmp < tol.x)\nreturn 0.0;\nelse if (tmp < tol.y)\nreturn (tmp - tol.x)/(tol.y - tol.x);\nelse\nreturn 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2 fragPos =  1. - fragCoord.xy / resolution.xy;\nvec4 fg = texture(webcam, fragPos);\nvec4 bg = texture(background, fragPos);\n\nvec4 keyYUV =  RGBtoYUV * chromaKey;\nvec4 yuv = RGBtoYUV * fg;\n\nfloat mask = 1.0 - colorclose(yuv.rgb, keyYUV.rgb, maskRange);\n\nfragColor = max(fg - mask * chromaKey, 0.0) + bg * mask;\n\n}\n\nvoid main(){\n    mainImage(fragColor,gl_FragCoord.xy);\n}",this.mediaStream=new MediaStream,t?this.canvas=t:(this.canvas=document.createElement("canvas"),this.canvas.width=n||640,this.canvas.height=r||360),e!==i.VirtualBackgroundUsingGreenScreen&&(this.useML=!0)}setupRenderer(e){return new Promise(((t,n)=>{try{if(this.ctx=this.canvas.getContext("webgl2"),e){const n=null!==e.match(/\.(jpeg|jpg|png)$/);this.backgroundSource=n?new Image:document.createElement("video");let r={};n?r={background:{unit:33985,src:e},webcam:{unit:33986,fn:(e,t,n)=>{t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,6408,6408,5121,this.cameraSource),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR)}}}:(r={background:{unit:33985,fn:(e,t,n)=>{t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(3553,0,6408,6408,5121,this.backgroundSource),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR)}},webcam:{unit:33986,fn:(e,t,n)=>{t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(3553,0,6408,6408,5121,this.cameraSource),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR)}}},this.backgroundSource.autoplay=!0,this.backgroundSource.loop=!0),this.backgroundSource.addEventListener(n?"load":"canplay",(()=>{this.demolished=new a.DR(this.canvas,this.mainVert,this.mainFrag),this.demolished.aA(r,(()=>{this.demolished.aB("A",this.mainVert,this.bufferFrag,["background","webcam"],{chromaKey:(e,t,n,r)=>{t.uniform4f(e,this.chromaKey.r,this.chromaKey.g,this.chromaKey.b,1)},maskRange:(e,t,n,r)=>{t.uniform2f(e,this.maskRange.x,this.maskRange.y)}}),t(!0)}))})),this.backgroundSource.src=e}}catch(e){n(e)}}))}setChromaKey(e,t,n){this.chromaKey.r=e,this.chromaKey.g=t,this.chromaKey.b=n}setMaskRange(e,t){this.maskRange.x=e,this.maskRange.y=t}getColorsFromStream(){let e=this.canvas,t=document.createElement("canvas");t.width=e.width,t.height=e.height;let n=t.getContext("2d");n.drawImage(this.sourceVideo,0,0);let r=n.getImageData(0,0,t.width,t.height);const a=this.canvas.width*this.canvas.height;return{palette:this.pallette(r,a),dominant:this.dominant(r,a)}}start(){if(this.isRendering=!0,this.greenScreenMethod===i.VirtualBackgroundUsingGreenScreen){const e=t=>{this.isRendering&&(this.rafId=requestAnimationFrame(e),this.demolished.R(t/1e3))};e(0)}else if(this.greenScreenMethod===i.VirtualBackground){let e=document.createElement("canvas");this.cameraSource=e;const t=n=>{this.isRendering&&this.model.segmentPerson(this.sourceVideo,this.segmentConfig).then((r=>{const a=o.toMask(r,this.foregroundColor,this.backgroundColor);o.drawMask(e,this.sourceVideo,a,this.opacity,this.maskBlurAmount,this.flipHorizontal),this.rafId=requestAnimationFrame(t),this.demolished.R(n/1e3)})).catch(console.error)};t(0)}else if(this.greenScreenMethod===i.Mask){const e=document.createElement("canvas").getContext("2d"),t=n=>{this.isRendering&&this.model.segmentPerson(this.sourceVideo,this.segmentConfig).then((r=>{const a=o.toMask(r,this.foregroundColor,this.backgroundColor);e.putImageData(a,0,0),this.rafId=requestAnimationFrame(t),this.demolished.R(n/1e3)})).catch(console.error)};t(0)}}stop(e){this.isRendering=!1,cancelAnimationFrame(this.rafId),this.rafId=-1,e&&this.mediaStream.getVideoTracks().forEach((e=>{e.stop()}))}initialize(e,t){return t||(this.opacity=1,this.flipHorizontal=!0,this.maskBlurAmount=3,this.foregroundColor={r:255,g:255,b:255,a:0},this.backgroundColor={r:0,g:177,b:64,a:255},this.segmentConfig={flipHorizontal:!0,internalResolution:"medium",segmentationThreshold:.7,maxDetections:1,quantBytes:2}),new Promise(((t,n)=>{this.setupRenderer(e).then((e=>{new Promise(((e,t)=>{this.demolished||t("Now renderer created.Background image must be provided."),this.useML?o.load({architecture:"MobileNetV1",outputStride:16,multiplier:1,quantBytes:2}).then((t=>{this.model=t,e(!0)})).catch((e=>{t(e)})):e(!0)})).then((e=>{t(this)})).catch((e=>{n(e)}))}))}))}addVideoTrack(e){this.mediaStream.addTrack(e),this.sourceVideo=document.createElement("video"),this.sourceVideo.width=this.canvas.width,this.sourceVideo.height=this.canvas.height,this.sourceVideo.autoplay=!0,this.sourceVideo.srcObject=this.mediaStream,this.sourceVideo.play(),this.cameraSource=this.sourceVideo}captureStream(e){return this.canvas.captureStream(e||25)}pixelArray(e,t,n){const r=[];for(let a,s,o,i,u,l=0;l<t;l+=n)a=4*l,s=e[a+0],o=e[a+1],i=e[a+2],u=e[a+3],(void 0===u||u>=125)&&(s>250&&o>250&&i>250||r.push([s,o,i]));return r}dominant(e,t){return this.pallette(e,t)[0]}pallette(e,t){const n=this.pixelArray(e.data,t,10),r=s.default(n,8);return r?r.palette():null}}},3906:()=>{},8352:()=>{},1758:()=>{}},t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n(7432)})();